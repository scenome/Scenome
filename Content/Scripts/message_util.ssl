////////////////////////////////////////////////////////////////////////////////
// $file             MESSAGE_UTIL.SSL
// $author           Scenomics LLC
// $privacy          PUBLIC
// $description      This script implements basic message functions.
// $legal            Reserved * r_rLegal
//
// Copyright 2004-2014 Scenomics LLC. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////

library Console;

////////////////////////////////////////////////////////////////////////////////////////
// Global Variables
////////////////////////////////////////////////////////////////////////////////////////

int BinaryExpressionStructure_None            = 0;
int BinaryExpressionStructure_Scalar_Scalar   = 1;
int BinaryExpressionStructure_Scalar_Vector   = 2;
int BinaryExpressionStructure_Scalar_Matrix   = 3;
int BinaryExpressionStructure_Vector_Scalar   = 4;
int BinaryExpressionStructure_Vector_Vector   = 5;
int BinaryExpressionStructure_Vector_Matrix   = 6;
int BinaryExpressionStructure_Matrix_Scalar   = 7;
int BinaryExpressionStructure_Matrix_Vector   = 8;
int BinaryExpressionStructure_Matrix_Matrix   = 9;
int BinaryExpressionStructure_Struct_Struct   = 10;

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void ClearOutputWindow()
{
   OutputViewEditor a_eOutputEditor = (OutputViewEditor)Application.GetEditor( "{1F922109-F612-46D4-A453-4B81096121A9}" );
   a_eOutputEditor.Clear();
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Clear()
{
   ClearOutputWindow();
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Message( string p_sMessage )
{
   OutputViewEditor a_eOutputEditor = (OutputViewEditor)Application.GetEditor( "{1F922109-F612-46D4-A453-4B81096121A9}" );
   a_eOutputEditor.LogString( p_sMessage );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Out( string p_sMessage )
{
   Message( p_sMessage );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void GenerateOutputMessageHeader( string p_sMessageType )
{
   if( p_sMessageType == "NULL" )
   {
      Application.MessageBeep( 0 );
   }
   else
   if( p_sMessageType == "INFO" )
   {
      Console.Message( "\nINFORMATION" );
      Application.MessageBeep( 0 );
   }
   else
   if( p_sMessageType == "WARN" )
   {
      Console.Message( "\nWARNING" );
      Application.MessageBeep( 3 );
   }
   else
   if( p_sMessageType == "ERROR" )
   {
      Console.Message( "\nERROR" );
      Application.MessageBeep( 1 );
   }
   else
   if( p_sMessageType == "ASSERT" )
   {
      Console.Message( "\nASSERT" );
      Application.MessageBeep( 1 );
   }
   else
   {
      Console.Message( "UNKNOWN MESSAGE TYPE: Message type string should be passed as 'INFO', 'WARN', or 'ERROR'.\n" );
      Application.MessageBeep( 1 );
   }
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void GenerateOutputMessage( string p_sMessageText, string p_sMessageType )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( p_sMessageType );
   // Send the message to the output window.
   Message( p_sMessageText );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Assert( string p_sMessageText )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( "ASSERT" );
   // Send the message to the output window.
   Message( p_sMessageText );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void FileDoesNotExist( string p_sFilePath )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( "ASSERT" );
   string a_sMessage = "The following file does not exist: " + p_sFilePath;
   // Send the message to the output window.
   Message( a_sMessage );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Error( string p_sMessageText )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( "ERROR" );
   // Send the message to the output window.
   Message( p_sMessageText );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void FileError( string p_sPathToFile )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( "ERROR" );
   // Send the message to the output window.
   string a_sMessage = "There was a problem opening or reading the following file: " + p_sPathToFile + "\n";
   a_sMessage += "Please make sure that the directory exists and that it is possible to create a file in that location.";
   Message( a_sMessage );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void Info( string p_sMessageText )
{
   // Generate a message header and an appropriate sound.
   GenerateOutputMessageHeader( "INFO" );
   // Send the message to the output window.
   Message( p_sMessageText );
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function void GenerateOutputMessageFromList( StrList p_slMessages, string p_sMessageLeader, string p_sMessageType )
{
   if( p_slMessages.GetCount() )
   {
      Console.GenerateOutputMessage( p_sMessageLeader, p_sMessageType );
      string a_sMessages;

      for( int strings = 0; strings < p_slMessages.GetCount(); ++strings )
      {
         a_sMessages += p_slMessages.Get( strings );
         a_sMessages += "\n";
      }

      Console.Message( a_sMessages );
   }
}

////////////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////////////

function string ExpressionStructure( int p_eExpressionStructure )
{
   string a_sExpressionStructure;

   if( p_eExpressionStructure == BinaryExpressionStructure_None )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_None";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Scalar_Scalar )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Scalar_Scalar";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Scalar_Vector )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Scalar_Vector";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Scalar_Matrix )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Scalar_Matrix";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Vector_Scalar )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Vector_Scalar";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Vector_Vector )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Vector_Vector";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Vector_Matrix )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Vector_Matrix";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Matrix_Scalar )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Matrix_Scalar";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Matrix_Vector )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Matrix_Vector";
   }
   else
   if( p_eExpressionStructure == BinaryExpressionStructure_Matrix_Matrix )
   {
      a_sExpressionStructure = "BinaryExpressionStructure_Matrix_Matrix";
   }

   return a_sExpressionStructure;
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GraphOut( Node node, TypeInformation type )
{
   if( node.IsDerived( type ) )
   {
      Console.Out( node.Name + " " + "<" + node.GetType().GetTypeName() + ">" );
   }

   if( node.IsDerived( Group ) )
   {
      Group a_oGroup = (Group)node;

      for( int i = 0; i < a_oGroup.ChildCount; ++i )
      {
         GraphOut( a_oGroup.Children[i], type );
      }
   }
}
