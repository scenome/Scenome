///////////////////////////////////////////////////////////////////////////////
// $file             NODE_SCRIPTS.SSL
// $author           Scenomics LLC
// $privacy          PUBLIC
// $description      This script implements commands for working with nodes.
// $legal            Reserved * r_rLegal
//
// Copyright 2004-2014 Scenomics LLC. All Rights Reserved.
///////////////////////////////////////////////////////////////////////////////

import library "build_util.ssl";
import library "class_util.ssl";
import library "create_util.ssl";
import library "dependency_util.ssl";
import library "dialog_util.ssl";
import library "enumeration_util.ssl";
import library "expression_util.ssl";
import library "file_util.ssl";
import library "generate_glsl_util.ssl";
import library "graph_util.ssl";
import library "int_array_util.ssl";
import library "interface_util.ssl";
import library "main_util.ssl";
import library "math_util.ssl";
import library "menu_util.ssl";
import library "mesh_util.ssl";
import library "message_util.ssl";
import library "module_util.ssl";
import library "node_util.ssl";
import library "performance_util.ssl";
import library "select_util.ssl";
import library "str_list_util.ssl";
import library "terrain_util.ssl";
import library "type_util.ssl";
import library "variable_util.ssl";


///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GenerateNullMenuItem( CommandBar p_oMenu, string p_sCommandGuid )
{
   CommandItem a_oCommandItem;
   string a_sNullGuid = "{00000000-0000-0000-0000-000000000000}";
   p_oMenu.InsertItem( 0, "Unable to find code generation root.",
      p_sCommandGuid, -1, false, false );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GetCodeGenerationRoot(

   Node p_oSelNode,
   Node p_oSelection,
   ref Group p_oProjectRoot,
   ref VariableExpressionNode p_oCurrentFunctionDeclaration,
   ref bool p_bInFunctionDeclaration

   )
{
   if(   p_oSelNode && p_oSelNode.IsDerived( ShaderSourceNode ) ||
         p_oSelNode && p_oSelNode.IsDerived( Program ) )
   {
      p_oProjectRoot = (Group)p_oSelNode;
   }

   if( p_oSelNode && p_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oIsFunctionDeclaration =
         (VariableExpressionNode)p_oSelNode;
      if( a_oIsFunctionDeclaration.IsFunctionDeclaration() )
      {
         p_oCurrentFunctionDeclaration = a_oIsFunctionDeclaration;
         p_bInFunctionDeclaration = true;
      }
   }

   if( p_oSelNode && !p_oProjectRoot )
   {
      GetCodeGenerationRoot(
         p_oSelNode.Parent(),
         p_oSelection,
         p_oProjectRoot,
         p_oCurrentFunctionDeclaration,
         p_bInFunctionDeclaration );
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void HandleOnUpdate( CommandPresentationModuleInfo commandInfo, string hint )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, hint );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void HandleProgramOnUpdate( CommandPresentationModuleInfo commandInfo, string hint )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Program, hint );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void HandleTextureOnUpdate( CommandPresentationModuleInfo commandInfo, string hint )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Texture, hint );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EditDeleteSelectedNodes_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   bool enabled = Model.GetSelectCount() != 0;
   string hint = "Delete the selected nodes";
   if( !enabled )
   {
      hint += ": to enable this command, select one or more nodes";
   }
   commandInfo.SetEnabled( enabled );
   commandInfo.Status.SetHint( hint );
}

macro EditDeleteSelectedNodes()
[Category="Edit Commands", Guid="{1F91F9D2-F612-46d4-A453-4B81096121A9}", Image=".\\icons\\delete.bmp"]
{
   Node newSel;
   int selectCount = Model.GetSelectCount();
   int childIndex = -1;
   Group parent;
   bool a_bDeleted = false;
   for( int i = 0; i < selectCount; ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.Name == "Dependencies" )
      {
         string a_sMessage = "You should not delete the 'Dependencies' group.";
         Console.Error( a_sMessage );
         return;
      }

      if( i == selectCount - 1 )
      {
         // Default tree behavior seems to be:
         // If deleting an item and it has a sibling below it, select that sibling.
         // Else select the parent.
         // This is what we're doing here.
         parent = node.Parent();
         if( parent )
         {
            childIndex = parent.GetChildIndex( node );
         }
      }

      // Please use this handler to do other things before deleting the node.
      a_bDeleted = Graph.HandleOnDelete( node );
      if( a_bDeleted )
      {
         Model.Deselect( node );
         Model.DeleteNode( node );

         if( i == selectCount - 1 )
         {
            if( parent && childIndex < parent.ChildCount - 1 )
            {
               newSel = parent.Children[childIndex + 1];
            }
            else
            {
               newSel = parent;
            }
         }
      }
   }

   // If there was nothing left to select, select the root.
   // It should be the only node left at this point anyway.
   if( !newSel && a_bDeleted )
   {
      newSel = Model;
   }

   Model.Select( newSel );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EditFindNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   commandInfo.Status.SetHint( "Find a node by name" );
}

macro EditFindNode()
[Category="Edit Commands", Guid="{1F9220BA-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\edit_find_node.bmp"]
{
   Application.ShowFindWindow();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EditFindNextNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   commandInfo.Status.SetHint( "Find next node" );
}

macro EditFindNextNode()
[Category="Edit Commands", Guid="{1F9220B9-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\edit_find_next_node.bmp"]
{
   Application.FindNext( true );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EditFindPreviousNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   commandInfo.Status.SetHint( "Find previous node" );
}

macro EditFindPreviousNode()
[Category="Edit Commands", Guid="{1F9220B8-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\edit_find_previous_node.bmp"]
{
   Application.FindPrevious( true );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeToggleExport_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Toggles the export state of the selected nodes" );
}

macro NodeToggleExport()
[Category="Node Commands", Guid="{1F91FABC-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.EditNode( Model.GetSelectedNode( i ).GetNode() );
      node.ExportDisabled = !node.ExportDisabled;
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeClearDependencies_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Clear dependencies of the selected nodes" );
}

macro NodeClearDependencies()
[Category="Node Commands", Guid="{1F91FAF4-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\node_clear_dependencies.bmp"]
{
   SpaDependencyUtil.NodeClearDependencies();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeCloneSelection_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Clone the selected node" );
}

macro NodeCloneSelection()
[Category="Node Commands", Guid="{1F91FAF7-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\node_clone_selection.bmp"]
{
   Graph.NodeCloneSelection();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeSelectReferences_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Select nodes that reference the selected node" );
}

macro NodeSelectReferences()
[Category="Node Commands", Guid="{FBC98962-0F2F-4EC0-A45E-2E8D77B39D33}", Image=".\\icons\\node_select_references.bmp"]
{
   SpaDependencyUtil.NodeSelectReferences();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeSelectDependencies_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Select the dependencies of the selected node" );
}

macro NodeSelectDependencies()
[Category="Node Commands", Guid="{FD25768D-532A-42FA-A8CB-925226D8D819}", Image=".\\icons\\node_select_dependencies.bmp"]
{
   SpaDependencyUtil.NodeSelectDependencies();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeCreateSetFromReferences_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Create a selection set of the nodes that reference the selected node" );
}

macro NodeCreateSetFromReferences()
[Category="Node Commands", Guid="{F2D97BBA-BFD6-426A-B244-A69AC138705D}", Image=".\\icons\\node_create_set_from_references.bmp"]
{
   SpaDependencyUtil.NodeCreateSetFromReferences();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMergePalettes_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   bool enabled = Model.GetSelectCount() == 2 && (Model.GetSelectBuffer().IsNodeTypeSelected( Path ) || Model.GetSelectBuffer().IsNodeTypeSelected( Mesh ));
   string hint = "Merge palettes";
   if( !enabled )
   {
      hint += ": to enable this command, select two Path nodes, two Mesh nodes, or a Path and Mesh";
   }

   commandInfo.SetEnabled( enabled );
   commandInfo.Status.SetHint( hint );
}

macro NodeMergePalettes()
[Category="Node Commands", Guid="{1F9220D0-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\node_merge_palettes.bmp"]
{
   if( Model.GetSelectCount() == 2 )
   {
      Node nodeFilter1 = Model.GetSelectedNode( 0 ).GetNode();
      Node nodeFilter2 = Model.GetSelectedNode( 1 ).GetNode();
      
      if( (nodeFilter1.IsDerived( Path ) || nodeFilter1.IsDerived( Mesh ) ) &&
          (nodeFilter2.IsDerived( Path ) || nodeFilter2.IsDerived( Mesh ) ) )
      {
         Graph.MergePalettes( nodeFilter1, nodeFilter2 );
      }
      else
      {
         //////////////////////////////////////////////////////////
         // Fail: If both nodes are not meshes or paths.
         //////////////////////////////////////////////////////////

         string a_sMessage = "You must have only paths or meshes selected to invoke this command.";
         Console.Error( a_sMessage );
      }
   }
   else
   {
      //////////////////////////////////////////////////////////
      // Fail: If the selection count is not 2 we won't do it.
      //////////////////////////////////////////////////////////

      string a_sMessage = "You must have two meshes or paths selected to invoke this command.";
      Console.Error( a_sMessage );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeRefreshDatabase_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   commandInfo.Status.SetHint( "Refresh the nodes in the current scene" );
}

macro NodeRefreshDatabase()
[Category="Node Commands", Guid="{BC49A8AB-D1A1-422B-ADF4-F8C4BAC93167}", Image=".\\icons\\node_refresh_database.bmp"]
{
   SpaMeshUtil.InvalidateMeshes();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeSetPathRelative_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Converts an absolute path to a relative path" );
   SpaFileUtil.IsFileSaved( commandInfo );
}

macro NodeSetPathRelative()
[Category="Node Commands", Guid="{85EE67F0-20B5-4C77-AF7F-FA5F0A8D1FDF}", Image=".\\icons\\path_set_relative.bmp"]
{
   SpaNodeUtil.TransformExternalPaths( Model, Model.GetSelectBuffer().GetSelectedNodes(), 2 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeSetPathAbsolute_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Converts a relative path to an absolute path" );
   SpaFileUtil.IsFileSaved( commandInfo );
}

macro NodeSetPathAbsolute()
[Category="Node Commands", Guid="{5FA05C8D-F79D-4A2E-8F71-AD834783DD82}", Image=".\\icons\\path_set_absolute.bmp"]
{
   SpaNodeUtil.TransformExternalPaths( Model, Model.GetSelectBuffer().GetSelectedNodes(), 1 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveUp_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) up one position in the hierarchy" );
}

macro NodeMoveUp()
[Category="Node Commands", Guid="{B4B36721-E6EB-47C5-AC7F-47164A4506E1}", Image=".\\icons\\node_move_up.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      if( sel.Parent() )
      {
         int index = sel.Parent().GetChildIndex( sel );
         if( index > 0 )
         {
            --index;
            Model.ParentNode( sel, sel.Parent(), index );
            Model.Select( sel );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveDown_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) down one position in the hierarchy" );
}

macro NodeMoveDown()
[Category="Node Commands", Guid="{B1ADB1CD-BF52-44CA-B67E-2B4E7B693C96}", Image=".\\icons\\node_move_down.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      if( sel.Parent() )
      {
         int index = sel.Parent().GetChildIndex( sel );
         if( index + 1 < sel.Parent().ChildCount )
         {
            ++index;
            Model.ParentNode( sel, sel.Parent(), index + 1 );
            Model.Select( sel );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveLeft_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) left one level in the hierarchy" );
}

macro NodeMoveLeft()
[Category="Node Commands", Guid="{F9AA1355-7256-4A00-8E02-D8CF33415526}", Image=".\\icons\\node_move_left.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      if( sel.Parent() && sel.Parent().Parent() )
      {
         Group newParent = sel.Parent().Parent();
         int newIndex = newParent.GetChildIndex( sel.Parent() ) + 1;
         Model.ParentNode( sel, newParent, newIndex );
         Model.Select( sel );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveRight_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) right one level in the hierarchy" );
}

macro NodeMoveRight()
[Category="Node Commands", Guid="{A0DE329E-56D8-432B-B133-E39BD5A67B2E}", Image=".\\icons\\node_move_right.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      Group parent = sel.Parent();
      if( parent )
      {
         Group newParent;
         if( sel.IsDerived( FrameBuffer ) || sel.IsDerived( Program ) )
         {
            newParent = new Group;
         }
         else
         if( sel.IsDerived( Group ) )
         {
            newParent = (Group)sel.Clone();
            // We want a clone of the current selection but we
            // do not want all its children, only its own properties.
            newParent.DeleteAllChildren();
         }
         else
         {
            newParent = new Group;
         }
         newParent.Name = "NewGroupNode";
         
         Model.AddNode( newParent, parent, parent.GetChildIndex( sel ) );
         Model.ParentNode( sel, newParent, -1 );
         Model.Select( sel );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveTop_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) to the top position in the current list" );
}

macro NodeMoveTop()
[Category="Node Commands", Guid="{CF96D78F-965F-4F3A-94BB-8BD7F5530224}", Image=".\\icons\\node_move_top.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      Group parent = sel.Parent();
      if( parent && parent.GetChildIndex( sel ) > 0 )
      {
         Model.ParentNode( sel, parent, 0 );
         Model.Select( sel );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeMoveBottom_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Move the selected node(s) to the bottom position in the current list" );
}

macro NodeMoveBottom()
[Category="Node Commands", Guid="{D5DAE46A-6134-4514-8432-3E2C23F09F63}", Image=".\\icons\\node_move_bottom.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node sel = Model.GetSelectedNode( i ).GetNode();
      Group parent = sel.Parent();
      if( parent && parent.GetChildIndex( sel ) + 1 < parent.ChildCount )
      {
         Model.ParentNode( sel, parent, parent.ChildCount );
         Model.Select( sel );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void HalveSwitchingDistances_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LOD, "Set switching distances to half their current values" );
}

macro HalveSwitchingDistances()
[Category="Group Commands", Guid="{EEDDD972-EF05-4F11-8B3F-5209518AC476}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( LOD ) )
      {
         LOD lod= (LOD)Model.EditNode( node );
            
         lod.SwitchIn = lod.SwitchIn / 2;
         lod.SwitchOut = lod.SwitchOut / 2;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void SetSwitchInDistance_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LOD, "Set switch in distance to the distance from camera to the LOD center" );
}

macro SetSwitchInDistance()
[Category="Group Commands", Guid="{1F91FADE-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_lod_switch_in.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( LOD ) )
      {
         LOD lod = (LOD)Model.EditNode( node );

         ModelView a_oView = Model.ActiveView;

         double xlength = 0;
         double ylength = 0;
         double zlength = 0;

         xlength = a_oView.Position.X - lod.Center[0];
         ylength = a_oView.Position.Y - lod.Center[1];
         zlength = a_oView.Position.Z - lod.Center[2];

           lod.SwitchIn = Math.Sqrt( xlength*xlength + ylength*ylength + zlength*zlength);
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void SetSwitchOutDistance_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LOD, "Set switch out distance to the distance from camera to the LOD center" );
}

macro SetSwitchOutDistance()
[Category="Group Commands", Guid="{1F91FAE0-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_lod_switch_out.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( LOD ) )
      {
         LOD lod = (LOD)Model.EditNode( node );

         ModelView a_oView = Model.ActiveView;

         double xlength = 0;
         double ylength = 0;
         double zlength = 0;

         xlength = a_oView.Position.X - lod.Center[0];
         ylength = a_oView.Position.Y - lod.Center[1];
         zlength = a_oView.Position.Z - lod.Center[1];

         lod.SwitchOut = Math.Sqrt ( xlength*xlength + ylength*ylength + zlength*zlength);
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CalculateLevelOfDetailCenter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LOD, "Calculate the center of the selected LOD nodes" );
}

macro CalculateLevelOfDetailCenter()
[Category="Group Commands", Guid="{1F91FABF-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\calculate_lod_center.bmp"]
{
   int selCount = Model.GetSelectCount();
   if( selCount > 0 )
   {
      int firstSelLOD = -1;
      int i = 0;
      double centerX;
      double centerY;
      double centerZ;
      
      for( i = 0; i < selCount; ++i )
      {
         Node node = Model.GetSelectedNode( i ).GetNode();
         if( node.IsDerived( LOD ) )
         {
            LOD lod = (LOD)Model.EditNode( node );
            firstSelLOD = i;
            
            double BoundRangeXMin = lod.BoundMin[0];
            double BoundRangeXMax = lod.BoundMax[0];
            double BoundRangeYMin = lod.BoundMin[1];
            double BoundRangeYMax = lod.BoundMax[1];
            double BoundRangeZMin = lod.BoundMin[2];
            double BoundRangeZMax = lod.BoundMax[2];
            
            centerX = ( BoundRangeXMin + BoundRangeXMax ) / 2;
            centerY = ( BoundRangeYMin + BoundRangeYMax ) / 2;
            centerZ = ( BoundRangeZMin + BoundRangeZMax ) / 2;
            break;
         }
      }
      
      if( firstSelLOD != -1 )
      {
         for( i = firstSelLOD; i < Model.GetSelectCount(); ++i )
         {
            Node node = Model.GetSelectedNode( i ).GetNode();
            if( node.IsDerived( LOD ) )
            {
               LOD lod = (LOD)Model.EditNode( node );
               
               lod.Center[0] = centerX;
               lod.Center[1] = centerY;
               lod.Center[2] = centerZ;
            }
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CalculateSwitchingDistances_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LOD, "Calculate switching distances for the selected LOD nodes" );
}

macro CalculateSwitchingDistances()
[Category="Group Commands", Guid="{1F91FAE1-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_multiple_switching_distances.bmp"]
{
   double SwitchMultiplier;
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( LOD ) )
      {
         LOD lod = (LOD)Model.EditNode( node );

         if( i == 0 )
         {
            SwitchMultiplier = lod.SwitchOut;
            continue;
         }
         lod.SwitchIn = SwitchMultiplier * i;
         lod.SwitchOut = SwitchMultiplier * (i + 1);
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro NodeCreateDependencyGraph()
[Category="Node Commands", Guid="{409F2615-A7F5-45EE-9277-F1AAB0DD5D28}", Image=".\\icons\\node_create_dependency_graph.bmp"]
{
   SpaDependencyUtil.NodeCreateDependencyGraph();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro NodeCreateReferenceGraph()
[Category="Node Commands", Guid="{077A4C24-32A3-4196-A081-6DB986B40B9D}", Image=".\\icons\\node_create_reference_graph.bmp"]
{
   SpaDependencyUtil.NodeCreateReferenceGraph();
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LinkSetType_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, NodeLink, "Sets the node link type to the type of the node it references" );
}

macro LinkSetType()
[ Category="Link Commands", Guid="{91E1ABA0-5718-443F-9EAE-6F5462CE1F76}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( NodeLink ) )
      {
         NodeLink link = (NodeLink)Model.EditNode(node);
         if( link.Node )
         {
            link.LinkType = link.Node.GetType();
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LinkRefresh_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, NodeLink, "Flush and reload the files referenced by the selected links" );
}

macro LinkRefresh()
[Category="Link Commands", Guid="{1F91FAD9-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( NodeLink ) )
      {
         NodeLink link = (NodeLink)node;
         Application.FlushModelReferences( link.GetModel() );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CreateLinkFromSelection_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   bool enabled = Model.GetSelectCount() != 0;
   string hint = "Create a set of links to the selected nodes";
   if( !enabled )
   {
      hint += ": to enable this command, select one or more nodes";
   }

   commandInfo.SetEnabled( enabled );
   commandInfo.Status.SetHint( hint );
}

macro CreateLinkFromSelection()
[Category="Link Commands", Guid="{1F92099B-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\create_nodelink_from_selection.bmp"]
{
   // NOTE: This script cannot create a nodelink to the active parent that is also a child of the active parent.

   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node == (Node)Model.GetActiveParent() )
      {
         continue;
      }

      NodeLink newNode = new NodeLink;
      newNode.Node = node;
      newNode.Name = node.Name;
      newNode.LinkType = node.GetType();
      Model.AddNode( newNode, Model.GetActiveParent(), -1 );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CreateTempFileNodeReference( string p_sTempFileName )
{
   if( !( SpaFileUtil.ValidateCurrentFileState( "" ) ) )
   {
      return;
   }

   Model3D exportReferences = new Model3D;
   if( !exportReferences )
   {
      return;
   }

   // for each selected node
   for( int select = 0; select < Model.GetSelectCount (); ++select )
   {
      // get the selected node
      Node selectedNode = Model.GetSelectedNode( select ).GetNode();
      // create a nodelink
      NodeLink link = new NodeLink;
      if( link )
      {
         link.Name = selectedNode.Name;
         // set up the type identification
         link.LinkType = selectedNode.GetType();
         // point the nodelink to the file
         link.PathToFile = Model.Filename;
         // get the hierarchy path to the selected node
         link.PathToNode = selectedNode.GetPathToNode();
         // add to the external model
         exportReferences.AddChild( link );
      }
   }

   // save the model containing the references 
   string file = Application.GetTempPath( p_sTempFileName, 0 );
   // DEBUG
   //Console.Out( Application.GetTempPath( p_sTempFileName, 0) );
   exportReferences.SaveFile( file );
   // clean up
   delete exportReferences;
}

function void LinkCopyReferences_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Copy selected nodes as links" );
}

macro LinkCopyReferences()
[Category="Link Commands", Guid="{1F91FAD3-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\link_copy.bmp"]
{
   CreateTempFileNodeReference( "TempLinkCopyReferencesTransport.box" );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CommandRepNodeCopyToInterfaceItem_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, CommandRepNode, "Copies a CommandRepNode to an InterfaceElementNode" );
}

macro CommandRepNodeCopyToInterfaceItem()
[Category="Node Commands", Guid="{9836951F-E03B-4131-B91C-44DAA68D4B96}", Image=".\\icons\\copy_command_rep_node_to_interface_element_node.bmp"]
{
   CreateTempFileNodeReference( "TempCommandRepCopyReferencesTransport.box" );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EditPasteNodeLink_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Group, "Paste Node as NodeLink that references Node" );
}

macro EditPasteNodeLink()
[Category="Link Commands", Guid="{1F91FAD4-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\link_paste.bmp"]
{
   if( !( SpaFileUtil.ValidateCurrentFileState( "" ) ) )
   {
      return;
   }

   string file = Application.GetTempPath( "TempLinkCopyReferencesTransport.box", 0 );
   // Create and import a model
   Model3D importModel = new Model3D;
   if( importModel.OpenFile( file ) )
   {
      Group newParent = Graph.GetStandardAddGroup();

      for( ; importModel.ChildCount != 0; )
      {
         // take the nodelink out of the imported model
         NodeLink importReference = (NodeLink)importModel.Children[ 0 ];
         importReference.SetParent( null );

         // convert the absolute path to a relative path
         importReference.PathToFile = Application.MakeRelativePath( importReference.PathToFile , Model.Filename );

         // Moves the node from the imported model into the open document
         Model.AddNode( importReference, newParent, -1 );
      }
   }

   // clean up
   delete importModel;
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LinkConvertToDeepCopy_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, NodeLink, "Imports the NodeLink" );
}

macro LinkConvertToDeepCopy()
[Category="Link Commands", Guid="{8BC53244-9785-4B38-AF7A-7BE2AA02C57A}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( NodeLink ) )
      {
         Node a_oNodeLink = (NodeLink)node;
         Group a_oParent = a_oNodeLink.Parent();
         int a_iChildIndex = a_oParent.GetChildIndex( a_oNodeLink );
         if( a_oNodeLink.Node && a_oNodeLink.PathToFile == "" && a_oNodeLink.PathToNode == "" )
         {
            Node a_oLinkTarget = (Node)a_oNodeLink.Node;
            Node a_oDeepCopy = (Node)a_oLinkTarget.Clone();
            Model.AddNode( a_oDeepCopy, a_oParent, a_iChildIndex );
            Model.DeleteNode ( a_oNodeLink );
         }
         else
         {
            string a_sMessage = "This command does not work on <LinkNodes> that point at external files. " +
               "Choose 'Merge' from the Link Node command menu.";
            Console.Error( a_sMessage );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ProgramNodeEnumerateAttributeChannels_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleProgramOnUpdate( commandInfo, "Enumerates the attribute channels declared by the shader" );
}

macro ProgramNodeEnumerateAttributeChannels()
[Category="Program Commands", Guid="{CAE5126D-731D-43B8-A30D-5F6A2E9D3541}", Image=".\\icons\\generic_script_icon.bmp"]
{
   OutputViewEditor a_eOutputEditor = (OutputViewEditor)Application.GetEditor( "{1F922109-F612-46D4-A453-4B81096121A9}" );
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      {
         Node node = Model.GetSelectedNode( i ).GetNode();
         if( node.IsDerived( Program ) )
         {
            Program program = (Program)node;

            a_eOutputEditor.LogString( "\n<Program \'" + program.Name + "\' Statistics>\n\n" +
                                       "Samplers: " + program.GetSPASamplerCount() + "\n" +
                                       "Position: " + program.GetSPAPositionAttributeCount() + "\n" +
                                       "Normal:   " + program.GetSPANormalAttributeCount() + "\n" +
                                       "Color:    " + program.GetSPAColorAttributeCount() + "\n" +
                                       "TexCoord: " + program.GetSPATexCoordAttributeCount() + "\n" +
                                       "Data:     " + program.GetSPADataAttributeCount() );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////
 
function void SelectNodesWithSameName_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Selects all nodes with the same name" );
}
 
macro SelectNodesWithSameName()
[Category="Select Commands", Guid="{E3B94010-ED4B-4764-9628-236AE18BA21A}", Image=".\\icons\\select_nodes_with_same_name.bmp"]
{
   Model.DeselectAll();
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Graph.SelectNodesWithSameName( Model, Model.GetSelectedNode( i ).GetNode().Name );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void SelectNodesOfSameType_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Selects all nodes of the same type" );
}

macro SelectNodesOfSameType()
[Category="Select Commands", Guid="{1F922103-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\select_nodes_of_same_type.bmp"]
{
   int i;
   for( i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      Model.Deselect( node );
   }

   for( i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      TypeInformation type = node.GetType();

      Graph.SelectAllTypeNodes( Model, type );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void SelectRemainderOfList_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Selects all the remaining nodes in the child list" );
}

macro SelectRemainderOfList()
[Category="Select Commands", Guid="{1F91FACA-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\select_remainder_of_list.bmp"]
{
   Model.DeselectAll();
   int selectCount = Model.GetSelectCount();
   for( int i = 0; i < selectCount; ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      Group parent = node.Parent();
      if( !parent )
      {
         continue;
      }
      int startIndex = parent.GetChildIndex( node );
      for( int c = startIndex; c < parent.ChildCount; ++c )
      {
         Model.Select( parent.Children[c] );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ScriptNodeToggleState_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode, "Toggle the script node on/off" );
}

macro ScriptNodeToggleState()
[Category="Expression Commands", Guid="{48473A8B-6E10-4DAB-8FE1-B13AC7BD4A4E}", Image=".\\icons\\script_node_toggle_state.bmp" ]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( ScriptNode ) )
      {
         ScriptNode a_oScriptNode = (ScriptNode)Model.EditNode( node );
         a_oScriptNode.Enabled = !a_oScriptNode.Enabled;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void RenderStateNodeToggleState_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, RenderStateNode, "Toggle the node on/off" );
}

macro RenderStateNodeToggleState()
[Category="Expression Commands", Guid="{20F0FF6D-7A20-4AC8-9CBC-A84459957F80}", Image=".\\icons\\script_node_toggle_state.bmp" ]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( RenderStateNode ) )
      {
         RenderStateNode a_oRenderState = (RenderStateNode)Model.EditNode( node );
         a_oRenderState.Enabled = !a_oRenderState.Enabled;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetExternal_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture external ( stored on the hard disk )" );
}

macro TextureSetExternal()
[Category="Texture Commands", Guid="{E2B2CED0-9594-47A5-9D6B-59C96BAEFC3D}", Image=".\\icons\\texture_set_external.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         texture.External = 1;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetInternal_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture internal ( stored inside the file )" );
}

macro TextureSetInternal()
[Category="Texture Commands", Guid="{0B9BF7A1-9E9D-440D-B992-C1AB23569A13}", Image=".\\icons\\texture_set_internal.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         texture.External = 0;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetSizeFromInternalImage_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture width and height to values that match the internal image" );
}

macro TextureSetSizeFromInternalImage()
[Category="Texture Commands", Guid="{D980DB33-FEEF-4B63-A819-A2F6DE438809}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         
         Image image = new Image;
         string a_sFileToOpen = Application.ResolveModelRelativePath( texture.PathToFile );
         image.OpenFileHeader( a_sFileToOpen );
         
         texture.SourceX = 0;
         texture.SourceY = 0;
         texture.SourceWidth = image.Width;
         texture.SourceHeight = image.Height;
         
         delete image;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetRenderFormat_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture render format to a value that matches the internal image" );
}

macro TextureSetRenderFormat()
[Category="Texture Commands", Guid="{05004A62-3CB9-458D-8C8A-7AE6A09F30D1}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         
         Image image = new Image;
         string a_sFileToOpen = Application.ResolveModelRelativePath( texture.PathToFile );
         image.OpenFileHeader( a_sFileToOpen );
         texture.RenderFormat = image.PixelFormat;
         delete image;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureConfigureDefaults_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Configures the most useful defaults for the texture's file path, size, and render size" );
}

macro TextureConfigureDefaults()
[Category="Texture Commands", Guid="{A8700285-25E2-4C2F-9553-22AA5B17044A}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         
         // Set the texture's size from its internal image.
         Image image = new Image;
         string a_sFileToOpen = Application.ResolveModelRelativePath( texture.PathToFile );
         image.OpenFileHeader( a_sFileToOpen );
         
         texture.SourceX = 0;
         texture.SourceY = 0;
         texture.SourceWidth = image.Width;
         texture.SourceHeight = image.Height;
                  
         // Set the texture's rendering size from its internal image.
         texture.RenderWidth = image.Width;
         texture.RenderHeight = image.Height;

         // Create a relative path.
         string relativePath = Application.MakeRelativePath( texture.PathToFile, Model.Filename );
         if( relativePath != "" )
         {
            texture.PathToFile = relativePath;
         }
                
         // Clean up
         delete image;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureToggleMipMapping_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Toggles the texture's 'MIP Mapping' parameter" );
}

macro TextureToggleMipMapping()
[Category="Texture Commands", Guid="{2F000E6E-04FD-4E32-9831-6E55AB034D39}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Texture ) )
      {
         Texture texture = (Texture)Model.EditNode( node );
         texture.MIPMap = !texture.MIPMap;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetType2D_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture type to 2D" );
}

macro TextureSetType2D()
[Category="Texture Commands", Guid="{E840B1A5-4C20-4A2F-9A16-BA4BCB82F105}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Graph.TextureSetType( 0 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetType3D_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture type to 3D" );
}

macro TextureSetType3D()
[Category="Texture Commands", Guid="{1D029002-466A-4DBF-8F9E-398532DD5714}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Graph.TextureSetType( 1 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetTypeCubeMap_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture type to 'Cube Map'" );
}

macro TextureSetTypeCubeMap()
[Category="Texture Commands", Guid="{6816139C-0DFD-4B7F-A763-F95C09B9814C}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Graph.TextureSetType( 2 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureTextureSetRenderDepth1_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture 'Render Depth' parameter to 1" );
}

macro TextureTextureSetRenderDepth1()
[Category="Texture Commands", Guid="{73A5F62B-B681-4544-ABE5-72C3D404A6D2}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Graph.TextureSetRenderDepth( 1 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureSetTypeRenderBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleTextureOnUpdate( commandInfo, "Sets the texture type to 'Render Buffer'" );
}

macro TextureSetTypeRenderBuffer()
[Category="Texture Commands", Guid="{0A5DD9AC-C153-4B9E-BB0F-8B8207F27218}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Graph.TextureSetType( 3 );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

//  Handle OnUpdate for geometry modifier commands.

function void HandleGeometryModifierOnUpdate( CommandPresentationModuleInfo commandInfo, string hint )
{
   bool enabled = false;
   Model3DSelectBuffer selBuffer = Model.GetSelectBuffer();
   if( selBuffer.IsNodeTypeSelected( RectangleGeometryModifier ) || selBuffer.IsNodeTypeSelected( BoxGeometryModifier ) ||
       selBuffer.IsNodeTypeSelected( CircleGeometryModifier ) || selBuffer.IsNodeTypeSelected( CylinderGeometryModifier ) ||
       selBuffer.IsNodeTypeSelected( SphereGeometryModifier ) )
   {
      enabled = true;
   }

   commandInfo.SetEnabled( enabled );
   commandInfo.Status.SetHint( hint );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierDoubleTessellation_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleGeometryModifierOnUpdate( commandInfo, "Double tessellation" );
}

macro GeometryModifierDoubleTessellation()
[Category="Primitive Commands", Guid="{B4EA70FA-CC95-4898-9F9B-6EC63B4B0495}", Image=".\\icons\\geometry_modifier_double_tessellation.bmp"
]
{
   Graph.GeometryModifierMultiplyTessellation( 2 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierHalfTessellation_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleGeometryModifierOnUpdate( commandInfo, "Half tessellation" );
}

macro GeometryModifierHalfTessellation()
[
 Category="Primitive Commands", Guid="{E15226C1-CE88-4F32-AD03-542C00E8D979}", Image=".\\icons\\geometry_modifier_half_tessellation.bmp"
]
{
   Graph.GeometryModifierMultiplyTessellation( 0.5 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierDoubleSize_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleGeometryModifierOnUpdate( commandInfo, "Double size" );
}

macro GeometryModifierDoubleSize()
[
 Category="Primitive Commands", Guid="{3DE26550-A9F4-4EFA-A85E-4AD164EA7375}", Image=".\\icons\\geometry_modifier_double_size.bmp"
]
{
   Graph.GeometryModifierMultiplySize( 2.0 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierHalfSize_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleGeometryModifierOnUpdate( commandInfo, "Half size" );
}

macro GeometryModifierHalfSize()
[
 Category="Primitive Commands", Guid="{8838DCDD-CCEE-4EF8-854D-135E422780CF}", Image=".\\icons\\geometry_modifier_half_size.bmp"
]
{
   Graph.GeometryModifierMultiplySize( 0.5 );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightToggleGlobal_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Toggle global" );
}

macro LightToggleGlobal()
[Category="Light Commands", Guid="{1F91F944-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\toggle_light_global.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
         light.Global = !light.Global;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightToggleShadows_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Toggle shadows" );
}

macro LightToggleShadows()
[Category="Light Commands", Guid="{F2569494-DE58-48AC-8E14-2C099BC054FB}", Image=".\\icons\\toggle_casts_shadows.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light a_oLight = (Light)Model.EditNode( node );
         a_oLight.Shadows = !a_oLight.Shadows;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightToggleDynamic_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Toggle dynamic" );
}

macro LightToggleDynamic()
[Category="Light Commands", Guid="{1F91F945-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
         light.Dynamic = !light.Dynamic;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightToggleActive_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Toggle active" );
}

macro LightToggleActive()
[Category="Light Commands", Guid="{1F91F943-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\toggle_light_active.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
         light.On = !light.On;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightSetDirectional_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Set light to infinite" );
}

macro LightSetDirectional()
[Category="Light Commands", Guid="{1F91F94C-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_light_infinite.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
         
         light.Name = "Directional";
         light.Type = 0;
         light.Aperture = 180;
         Matrix newMatrix = light.GetTransform();
         newMatrix.Orientation[0] = -45;
         newMatrix.Orientation[1] = 0;
         newMatrix.Orientation[2] = 180;
         light.SetTransform( newMatrix );
        }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightSetPoint_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Set light to ambient" );
}

macro LightSetPoint()
[Category="Light Commands", Guid="{1F91F94D-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_light_ambient.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );

         light.Name = "Point";
         light.Type = 2;
         Matrix newMatrix = new Matrix;
         newMatrix.Position[0] = light.Position.X;
         newMatrix.Position[1] = light.Position.Y;
         newMatrix.Position[2] = light.Position.Z;
         newMatrix.Orientation[0] = 1;
         newMatrix.Orientation[1] = 1;
         newMatrix.Orientation[2] = 1;
         light.Aperture = 180;
         light.ApertureY = 180;
         light.SetTransform( newMatrix );
         light.SpotExponent = 180;
         /*light.Aperture = 180;*/
         delete newMatrix;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightSetSpot_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Set light to spotlight" );
}

macro LightSetSpot()
[Category="Light Commands", Guid="{1F91F94E-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_light_spot.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
   
         light.Name = "Spot";
         light.Type = 1;
         Matrix newMatrix = new Matrix;
         newMatrix.Position[0] = light.Position.X;
         newMatrix.Position[1] = light.Position.Y;
         newMatrix.Position[2] = light.Position.Z;
         newMatrix.Orientation[0] = 0;
         newMatrix.Orientation[1] = 0;
         newMatrix.Orientation[2] = -8;
         light.Aperture = 45;
         light.ApertureY = 45;
         light.SetTransform( newMatrix );
         light.SpotExponent = 8;
         delete newMatrix;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightPositionAtCamera_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Light, "Positions the light at the camera" );
}

macro LightPositionAtCamera()
[Category="Light Commands", Guid="{99FFA40D-8185-40F5-991F-C63B5CF2AD18}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( Light ) )
      {
         Light light = (Light)Model.EditNode( node );
         ModelView a_oView = Model.ActiveView;
         Matrix setTransform = new Matrix;
         setTransform.Position[0] = a_oView.Position.X;
         setTransform.Position[1] = a_oView.Position.Y;
         setTransform.Position[2] = a_oView.Position.Z;
         light.SetTransform( setTransform );
         delete setTransform;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialToggleTransparent_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Toggle transparent" );
}

macro MaterialToggleTransparent()
[Category="Material Commands", Guid="{1F91FB01-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.AlphaBlend = !material.AlphaBlend;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialToggleSolidShaded_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Toggle solid shaded" );
}

macro MaterialToggleSolidShaded()
[Category="Material Commands", Guid="{1F91FB02-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Solid = !material.Solid;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorWhite_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to white" );
}

macro MaterialSetColorWhite()
[Category="Material Commands", Guid="{1F91F92C-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_white.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "WhiteMaterial";
         material.AmbientColor.SetRGB( 255, 255, 255 );
         material.DiffuseColor.SetRGB( 255, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorGrassGreen_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to grass green" );
}

macro MaterialSetColorGrassGreen()
[Category="Material Commands", Guid="{1F91F92D-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_grass_green.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "GreenGrassMaterial";
         material.AmbientColor.SetRGB( 0, 85, 0 );
         material.DiffuseColor.SetRGB( 139, 139, 139 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorIceBlue_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to ice blue" );
}

macro MaterialSetColorIceBlue()
[Category="Material Commands", Guid="{1F91F92E-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_ice_blue.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "IceBlueMaterial";
         material.AmbientColor.SetRGB( 140, 180, 210 );
         material.DiffuseColor.SetRGB( 0, 139, 139 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorGold_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to gold" );
}

macro MaterialSetColorGold()
[Category="Material Commands", Guid="{1F91F92F-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_gold.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "GoldMaterial";
         material.AmbientColor.SetRGB( 210, 180, 140 );
         material.DiffuseColor.SetRGB( 139, 139, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorCopper_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to copper" );
}

macro MaterialSetColorCopper()
[Category="Material Commands", Guid="{1F91F930-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_copper.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "CopperMaterial";
         material.AmbientColor.SetRGB( 40, 40, 40 );
         material.DiffuseColor.SetRGB( 255, 175, 90 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorSilver_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to silver" );
}

macro MaterialSetColorSilver()
[Category="Material Commands", Guid="{1F91F931-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_silver.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "SilverMaterial";
         material.AmbientColor.SetRGB( 0, 0, 0 );
         material.DiffuseColor.SetRGB( 230, 230, 230 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorPlatinum_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to platinum" );
}

macro MaterialSetColorPlatinum()
[Category="Material Commands", Guid="{1F91F932-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_platinum.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "PlatinumMaterial";
         material.AmbientColor.SetRGB( 40, 40, 40 );
         material.DiffuseColor.SetRGB( 255, 225, 225 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorTarnished_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to tarnished" );
}

macro MaterialSetColorTarnished()
[Category="Material Commands", Guid="{1F91F933-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_tarnished.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "TarnishedMaterial";
         material.AmbientColor.SetRGB( 56, 142, 142 );
         material.DiffuseColor.SetRGB( 255, 175, 90 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorBrightGold_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to bright gold" );
}

macro MaterialSetColorBrightGold()
[Category="Material Commands", Guid="{1F91F934-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_bright_gold.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "BrightGoldMaterial";
         material.AmbientColor.SetRGB( 210, 180, 140 );
         material.DiffuseColor.SetRGB( 255, 175, 90 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorLemonGrass_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to lemon grass" );
}

macro MaterialSetColorLemonGrass()
[Category="Material Commands", Guid="{1F91F935-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_lemon_grass.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "LemonGrassMaterial";
         material.AmbientColor.SetRGB( 0, 85, 0 );
         material.DiffuseColor.SetRGB( 255, 155, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorBlueGrass_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to blue grass" );
}

macro MaterialSetColorBlueGrass()
[Category="Material Commands", Guid="{1F91F936-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_blue_grass.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "BlueGrassMaterial";
         material.AmbientColor.SetRGB( 0, 85, 0 );
         material.DiffuseColor.SetRGB( 123, 192, 192 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorLightYellowGrass_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to light yellow grass" );
}

macro MaterialSetColorLightYellowGrass()
[Category="Material Commands", Guid="{1F91F937-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_light_yellow_grass.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "LightYellowGrassMaterial";
         material.AmbientColor.SetRGB( 0, 85, 0 );
         material.DiffuseColor.SetRGB( 255, 255, 124 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorBlue_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to blue" );
}

macro MaterialSetColorBlue()
[Category="Material Commands", Guid="{1F91F938-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_blue.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "BlueMaterial";
         material.AmbientColor.SetRGB( 0, 0, 140 );
         material.DiffuseColor.SetRGB( 175, 238, 238 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorIndigo_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to indigo" );
}

macro MaterialSetColorIndigo()
[Category="Material Commands", Guid="{1F91F939-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_indigo.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "IndigoMaterial";
         material.AmbientColor.SetRGB( 0, 0, 140 );
         material.DiffuseColor.SetRGB( 123, 192, 192 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorCobalt_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to cobalt" );
}

macro MaterialSetColorCobalt()
[Category="Material Commands", Guid="{1F91F93A-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_cobalt.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "CobaltMaterial";
         material.AmbientColor.SetRGB( 0, 0, 140 );
         material.DiffuseColor.SetRGB( 192, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorViolet_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to violet" );
}

macro MaterialSetColorViolet()
[Category="Material Commands", Guid="{1F91F93B-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_violet.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "VioletMaterial";
         material.AmbientColor.SetRGB( 128, 0, 128 );
         material.DiffuseColor.SetRGB( 192, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorTan_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to tan" );
}

macro MaterialSetColorTan()
[Category="Material Commands", Guid="{1F91F93C-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_tan.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "TanMaterial";
         material.AmbientColor.SetRGB( 80, 68, 53 );
         material.DiffuseColor.SetRGB( 210, 180, 140 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorBurntOrange_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to burnt orange" );
}

macro MaterialSetColorBurntOrange()
[Category="Material Commands", Guid="{1F91F93D-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_burnt_orange.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "BurntOrangeMaterial";
         material.AmbientColor.SetRGB( 128, 64, 0 );
         material.DiffuseColor.SetRGB( 210, 180, 140 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorRustRed_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to rust red" );
}

macro MaterialSetColorRustRed()
[Category="Material Commands", Guid="{1F91F93E-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_rust_red.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "RustRedMaterial";
         material.AmbientColor.SetRGB( 165, 42, 2 );
         material.DiffuseColor.SetRGB( 139, 139, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorWarmFire_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to warm fire" );
}

macro MaterialSetColorWarmFire()
[Category="Material Commands", Guid="{1F91F93F-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_warm_fire.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "WarmFireMaterial";
         material.AmbientColor.SetRGB( 32, 0, 0 );
         material.DiffuseColor.SetRGB( 255, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorSalmon_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to salmon" );
}

macro MaterialSetColorSalmon()
[Category="Material Commands", Guid="{1F91F940-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_salmon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.Name = "SalmonMaterial";
         material.AmbientColor.SetRGB( 165, 42, 0 );
         material.DiffuseColor.SetRGB( 255, 175, 190 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetColorStandardGray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material color to standard gray" );
}

macro MaterialSetColorStandardGray()
[Category="Material Commands", Guid="{1F91F941-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\set_material_standard_gray.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.AmbientColor.SetRGB( 102, 102, 102 );
         material.DiffuseColor.SetRGB( 255, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetIDColorWhite_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material ID color to white" );
}

macro MaterialSetIDColorWhite()
[Category="Material Commands", Guid="{C71D9402-EA67-47CD-94A9-A908017630ED}", Image=".\\icons\\set_material_idcolor_white.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.IDColor.SetRGB( 255, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetIDColorGold_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material ID color to gold" );
}

macro MaterialSetIDColorGold()
[Category="Material Commands", Guid="{30EBFDDB-E0EE-4EC9-A98C-341E1D328D13}", Image=".\\icons\\set_material_idcolor_gold.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.IDColor.SetRGB( 255, 215, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetIDColorGreen_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material ID color to green" );
}

macro MaterialSetIDColorGreen()
[Category="Material Commands", Guid="{5E78C8E7-4444-4589-A7BE-10B9D3E75550}", Image=".\\icons\\set_material_idcolor_green.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.IDColor.SetRGB( 140, 227, 140 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialSetIDColorPurple_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Material, "Set material ID color to purple" );
}

macro MaterialSetIDColorPurple()
[Category="Material Commands", Guid="{EB6FBC09-A857-408E-A616-8C0821F3D577}", Image=".\\icons\\set_material_idcolor_purple.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();

      if( node.IsDerived( Material ) )
      {
         Material material = (Material)Model.EditNode( node );
         material.IDColor.SetRGB( 255, 169, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeToggleClearColorBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Toggles the 'Clear Color Buffer' parameter true/false" );
}

macro ClearBuffersNodeToggleClearColorBuffer( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{24BC7136-A648-498F-8D62-2264C88BAD05}", Image=".\\icons\\clear_buffers_node_clear_color.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.ClearColorBuffer = !a_oClearBuffersNode.ClearColorBuffer;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeToggleClearDepthBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Toggles the 'Clear Depth Buffer' parameter true/false" );
}

macro ClearBuffersNodeToggleClearDepthBuffer( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{AEF5242A-C05B-4D96-B2DC-21E4CA85C45F}", Image=".\\icons\\clear_buffers_node_clear_depth.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.ClearDepthBuffer = !a_oClearBuffersNode.ClearDepthBuffer;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeClearColorAndDepthBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Clear Depth Buffer' and 'Clear Color Buffer' to true" );
}

macro ClearBuffersNodeClearColorAndDepthBuffer( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{5A1EC5C8-2A6E-48C0-BFFC-7ECFB36FCA47}", Image=".\\icons\\clear_buffers_node_clear_color_and_depth.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.ClearColorBuffer = true;
         a_oClearBuffersNode.ClearDepthBuffer = true;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeDoNotClearColorOrDepthBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Clear Depth Buffer' and 'Clear Color Buffer' to false" );
}

macro ClearBuffersNodeDoNotClearColorOrDepthBuffer( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{1EB784A1-5BEC-4114-9AB3-BA6D39425F58}", Image=".\\icons\\clear_buffers_node_do_not_clear_color_or_depth.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.ClearColorBuffer = false;
         a_oClearBuffersNode.ClearDepthBuffer = false;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeSetColorBufferWhite_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Color' parameter to pure 'White'" );
}

macro ClearBuffersNodeSetColorBufferWhite( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{A136F9FD-BE40-462C-B3AF-2933899D0130}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.Color.SetRGB( 255, 255, 255 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeSetColorBufferBlack_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Color' parameter to pure 'Black'" );
}

macro ClearBuffersNodeSetColorBufferBlack( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{B42A4AC4-5FB4-4B8D-BC4F-D7C6F0E8CE42}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.Color.SetRGB( 0, 0, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeSetColorBufferRed_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Color' parameter to pure 'Red'" );
}

macro ClearBuffersNodeSetColorBufferRed( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{0B4C2B6A-482D-45E7-A215-878C066DC9BA}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.Color.SetRGB( 255, 0, 0 );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ClearBuffersNodeSetDepthBufferNegative1_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the 'Depth' value to '-1'" );
}

macro ClearBuffersNodeSetDepthBufferNegative1( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{DF38DA50-A971-4445-B7C6-687CAE8D31CD}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();

      if( a_oNode && a_oNode.IsDerived( ClearBuffersNode ) )
      {
         ClearBuffersNode a_oClearBuffersNode = (ClearBuffersNode)Model.EditNode( a_oNode );
         a_oClearBuffersNode.Depth = -1.0;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CameraRestoreView_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Restore camera view" );
}

macro CameraRestoreView()
[Category="Camera Commands", Guid="{259D9801-701A-473D-9A1B-47A58AB5F74B}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Camera ) )
      {
         Graph.RestoreViewFromCamera( node );
         break;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CameraStoreView_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Store camera view" );
}

macro CameraStoreView()
[Category="Camera Commands", Guid="{8A8D48CB-4D32-4BB4-8150-62B580622FEB}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Camera ) )
      {
         Graph.StoreActiveViewInCamera( node );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CameraSetModeNone_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Sets the camera to 'default' mode" );
}

macro CameraSetModeNone()
[Category="Camera Commands", Guid="{01998BB0-588F-4459-8D9A-C0183447F230}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Camera ) )
      {
         Camera editCamera = (Camera)Model.EditNode( node );
         editCamera.Mode = 0;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CameraSetModeLiveStoreToDevice_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Set the camera to 'Live ( Store To Device )' mode" );
}

macro CameraSetModeLiveStoreToDevice()
[Category="Camera Commands", Guid="{9A53E8E4-D1C3-46FB-A50E-F1A9169F20EB}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Camera ) )
      {
         Camera editCamera = (Camera)Model.EditNode( node );
         editCamera.Mode = 1;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CameraSetModeLiveLoadFromDevice_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   HandleOnUpdate( commandInfo, "Set the camera to 'Live ( Load From Device )' mode" );
}

macro CameraSetModeLiveLoadFromDevice()
[Category="Camera Commands", Guid="{7A183B53-D649-423D-BE79-8D51877D89A6}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      if( node.IsDerived( Camera ) )
      {
         Camera editCamera = (Camera)Model.EditNode( node );
         editCamera.Mode = 2;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GenerateMenuError(

   StrList p_slMemberNames,
   IntArray p_aiVariableIndices,
   string p_sMessage

   )
{
   p_slMemberNames.Add( p_sMessage );
   p_aiVariableIndices.Add( 0 );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateRenderSizesPopupMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the max texture size.
   Render3D a_oRender3D = Model.ActiveView.Render;
   int a_nMaxTextureWidth = a_oRender3D.GetDeviceCapabilities().MaxTextureWidth;
   int a_nMaxPower = Math.Log2( a_nMaxTextureWidth );

   auto StrList a_slTitles;
   auto IntArray a_aiRenderSize;
   auto TypeInfoArray a_aoTypes;
   int a_nBase = 2;

   // Add the first index here. This
   // keeps the for() loop very simple.
   a_slTitles.Add( a_nBase + " pixels" );
   a_aiRenderSize.Add( 0 );
   a_aoTypes.Add( Texture );

   // Compute ^2 Texture Sizes.
   for( int i = 1; i < a_nMaxPower; ++i )
   {
      a_nBase *= 2;
      if( a_nBase <= a_nMaxTextureWidth )
      {
         a_slTitles.Add( a_nBase + " pixels" );
         a_aiRenderSize.Add( i );
         a_aoTypes.Add( Texture );
      }
   }

   // Do image icons.
   auto TypeArray a_oItemImages;
   SpaMenuUtil.GetIconImages( a_aoTypes, a_oItemImages );

   // Build the menu.
   int a_nInsertIndex = 0;
   SpaMenuUtil.BuildMenuFromIntArray(
      p_oMenu,
      a_nInsertIndex,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slTitles,
      a_aiRenderSize,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateGeometryModifierTessellationPopupMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiTessellationValue;
   int a_nMaxTessellation = 1024;
   int a_nMaxPower = Math.Log2( a_nMaxTessellation );
   int a_nBase = 1;
   
   a_slTitles.Add( "1 pt" );
   a_aiTessellationValue.Add( 1 );

   for( int i = 1; i <= a_nMaxPower; ++i )
   {
      a_nBase *= 2;
      a_slTitles.Add( a_nBase + " pt" );
      a_aiTessellationValue.Add( a_nBase );
      Console.Out( a_nBase );
   }

   // Build the menu.
   int a_nInsertIndex = 0;
   SpaMenuUtil.BuildMenuFromIntArray(
      p_oMenu,
      a_nInsertIndex,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slTitles,
      a_aiTessellationValue,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateGeometryModifierSizePopupMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray geometryModifierSize;

   a_slTitles.Add( "1" );      geometryModifierSize.Add( 1 );
   a_slTitles.Add( "2" );      geometryModifierSize.Add( 2 );
   a_slTitles.Add( "4" );      geometryModifierSize.Add( 4 );
   a_slTitles.Add( "8" );      geometryModifierSize.Add( 8 );
   a_slTitles.Add( "16" );     geometryModifierSize.Add( 16 );
   a_slTitles.Add( "32" );     geometryModifierSize.Add( 32 );
   a_slTitles.Add( "64" );     geometryModifierSize.Add( 64 );
   a_slTitles.Add( "128" );    geometryModifierSize.Add( 128 );
   a_slTitles.Add( "256" );    geometryModifierSize.Add( 256 );
   a_slTitles.Add( "512" );    geometryModifierSize.Add( 512 );
   a_slTitles.Add( "1024" );   geometryModifierSize.Add( 1024 );
   a_slTitles.Add( "2048" );   geometryModifierSize.Add( 2048 );
   a_slTitles.Add( "4096" );   geometryModifierSize.Add( 4096 );
   a_slTitles.Add( "8192" );   geometryModifierSize.Add( 8192 );
   a_slTitles.Add( "16384" );  geometryModifierSize.Add( 16384 );
   a_slTitles.Add( "32768" );  geometryModifierSize.Add( 32768 );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      geometryModifierSize,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateAttributeChannelSelectorPopupMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray attrChannel;

   a_slTitles.Add( "1" );   attrChannel.Add( 0 );
   a_slTitles.Add( "2" );   attrChannel.Add( 1 );
   a_slTitles.Add( "3" );   attrChannel.Add( 2 );
   a_slTitles.Add( "4" );   attrChannel.Add( 3 );
   a_slTitles.Add( "5" );   attrChannel.Add( 4 );
   a_slTitles.Add( "6" );   attrChannel.Add( 5 );
   a_slTitles.Add( "7" );   attrChannel.Add( 6 );
   a_slTitles.Add( "8" );   attrChannel.Add( 7 );
   a_slTitles.Add( "9" );   attrChannel.Add( 8 );
   a_slTitles.Add( "10" );  attrChannel.Add( 9 );
   a_slTitles.Add( "11" );  attrChannel.Add( 10 );
   a_slTitles.Add( "12" );  attrChannel.Add( 11 );
   a_slTitles.Add( "13" );  attrChannel.Add( 12 );
   a_slTitles.Add( "14" );  attrChannel.Add( 13 );
   a_slTitles.Add( "15" );  attrChannel.Add( 14 );
   a_slTitles.Add( "16" );  attrChannel.Add( 15 );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      attrChannel,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateTextureAttributeTilingSelectorPopupMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray tilingSelector;

   a_slTitles.Add( "2" );      tilingSelector.Add( 2 );
   a_slTitles.Add( "4" );      tilingSelector.Add( 4 );
   a_slTitles.Add( "8" );      tilingSelector.Add( 8 );
   a_slTitles.Add( "16" );     tilingSelector.Add( 16 );
   a_slTitles.Add( "32" );     tilingSelector.Add( 32 );
   a_slTitles.Add( "64" );     tilingSelector.Add( 64 );
   a_slTitles.Add( "128" );    tilingSelector.Add( 128 );
   a_slTitles.Add( "256" );    tilingSelector.Add( 256 );
   a_slTitles.Add( "512" );    tilingSelector.Add( 512 );
   a_slTitles.Add( "1024" );   tilingSelector.Add( 1024 );
   a_slTitles.Add( "2048" );   tilingSelector.Add( 2048 );
   a_slTitles.Add( "4096" );   tilingSelector.Add( 4096 );
   a_slTitles.Add( "8192" );   tilingSelector.Add( 8192 );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      tilingSelector,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateInstallerDirectiveMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler,
   InstallerDirectiveNode p_oInstallerDirectiveNode

   )
{
   bool a_bGenMenu;
   auto StrList a_slDirectiveNames;
   auto IntArray a_aiDirectiveIndices;

   if( p_oInstallerDirectiveNode.GetSection() == 13 )
   {
      p_oInstallerDirectiveNode.Setup.GetDirectiveNames( 13, a_slDirectiveNames );
      p_oInstallerDirectiveNode.Setup.GetDirectiveIndices( 13, a_aiDirectiveIndices );
      a_bGenMenu = true;
   }
   else
   if( p_oInstallerDirectiveNode.GetSection() == 8 )
   {
      p_oInstallerDirectiveNode.Setup.GetDirectiveNames( 8, a_slDirectiveNames );
      p_oInstallerDirectiveNode.Setup.GetDirectiveIndices( 8, a_aiDirectiveIndices );
      a_bGenMenu = true;
   }

   if( a_bGenMenu )
   {
      SpaMenuUtil.BuildMenuFromIntArray(
         menu,
         0,
         commandGuid,
         Script,
         eventHandler,
         a_slDirectiveNames,
         a_aiDirectiveIndices,
         null );
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateSamplerTypesPopupMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slSamplerTypes;
   auto IntArray a_aiSamplerTypeIndices;
   auto SamplerNode a_oSamplerNode;
   a_oSamplerNode.GetSamplerTypes( a_slSamplerTypes,
      a_aiSamplerTypeIndices );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slSamplerTypes,
      a_aiSamplerTypeIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateShaderPragmaDeclarations(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slPragmaDeclarations;
   auto IntArray a_aiPragmaDeclarationIndices;
   auto ShaderPragmaNode a_oShaderPragmaNode;
   a_oShaderPragmaNode.GetPragmaItems( a_slPragmaDeclarations,
      a_aiPragmaDeclarationIndices );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slPragmaDeclarations,
      a_aiPragmaDeclarationIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateRenderTargetTexturePopupMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiPixelFormatIndices;
   auto Texture a_oTexture;
   a_oTexture.GetPixelFormatItems( a_slTitles, a_aiPixelFormatIndices );

   SpaMenuUtil.BuildMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slTitles,
      a_aiPixelFormatIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferNodeMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray buffers;

   // Selected Program
   Program a_oSelProgram = (Program)Model.GetFirstSelectedNode().GetNode();

   // Get the local IncludePaletteNode
   Group a_oIncludes;
   Node a_oIsIncludesGroup = (Node)Model.GetTypedNodeByPath(
      Main.GetDatabaseIncludePath(), Node );
   if( !a_oIsIncludesGroup )
   {
      string a_sMessage = "Unable to find IncludePaletteNode at: " +
         Main.GetDatabaseIncludePath();
      Console.Assert( a_sMessage );
      return;
   }

   // Get all the UniformBufferNode and UniformBufferBindNodes from the database.
   // For the UniformBufferNodes, also check NodeLinks in the document to see if
   // they refer to UniformBufferNodes.
   auto List a_lUnboundUniformBufferNodes;
   auto List a_lUniformBufferNodes;
   if( a_oIsIncludesGroup && a_oIsIncludesGroup.IsDerived( IncludePaletteNode ) )
   {
      a_oIncludes = (Group)a_oIsIncludesGroup;
      Graph.GetLinkNodesFromDatabase( Model, a_lUniformBufferNodes, UniformBufferNode );
   }

   Node a_oIsGenerator = (Node)a_oSelProgram.PreRenderHook;
   if( a_oIsGenerator && a_oIsGenerator.IsDerived( Group ) )
   {
      Group a_oGenerator = (Group)a_oIsGenerator;
      Graph.GetNodesFromDatabase( a_oGenerator, a_lUniformBufferNodes, UniformBufferNode );
   }

   // Add to the menu only UniformBufferNodes that
   // have not yet been bound by the selected Program.
   // Test by name as well because the
   // UniformBufferBindNode may just be unlinked
   // from its UniformBufferNode.
   auto List a_lUniformBufferBindNodes;
   Graph.GetNodesFromDatabase( a_oSelProgram, a_lUniformBufferBindNodes, UniformBufferBindNode );
   int a_nBoundBufferCount = 0;
   for( int buffer = 0; buffer < a_lUniformBufferNodes.GetCount(); ++buffer )
   {
      bool a_bIsBound;
      Node a_oIsUniformBufferNode = (Node)a_lUniformBufferNodes.Get( buffer );

      for( int bound = 0; bound < a_lUniformBufferBindNodes.GetCount(); ++bound )
      {
         UniformBufferBindNode a_oUniformBufferBind =
            (UniformBufferBindNode)a_lUniformBufferBindNodes.Get( bound );
         Node a_oDataSource = (Node)a_oUniformBufferBind.BufferLink;

         if( a_oDataSource == a_oIsUniformBufferNode ||
            a_oDataSource.Name == a_oIsUniformBufferNode.Name )
         {
            a_bIsBound = true;
            ++a_nBoundBufferCount;
         }
      }

      if( a_bIsBound == false )
      {
         a_lUnboundUniformBufferNodes.AddRef( a_oIsUniformBufferNode );
      }
   }

   // Iterate UniformBufferNodes that are not bound by the program.
   // We don't want to bind the same UniformBufferNode twice. ( Although we could. )
   if( a_lUnboundUniformBufferNodes.GetCount() )
   {
      for( int nodes = 0; nodes < a_lUnboundUniformBufferNodes.GetCount(); ++nodes )
      {
         Node a_oNode = (Node)a_lUnboundUniformBufferNodes.Get( nodes );
         a_slTitles.Add( a_oNode.Name );
         buffers.Add( nodes );
      }
   }
   else
   {
      if( a_nBoundBufferCount != 0 )
      {
         a_slTitles.Add( "All UniformBufferNodes have been bound." );
         buffers.Add( 0 );
      }
      else
      {
         a_slTitles.Add( "No UniformBufferNodes to bind." );
         buffers.Add( 0 );
      }
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      buffers,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void ReadSamplerMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto TypeArray a_oItemImages;
   auto StrList a_slTitles;
   auto IntArray a_aiSamplerIndices;
   auto List a_lSamplerNodes;
   auto TypeInfoArray a_oItemTypes;

   MainFunctionNode a_oMainFunctionNode =
      (MainFunctionNode)Model.GetFirstSelectedNode().GetNode();
   Group a_oDeclarations = (Group)a_oMainFunctionNode.Declarations;
   Graph.GetNodesFromDatabase( a_oDeclarations, a_lSamplerNodes, DynamicSamplerNode );

   if( !( a_lSamplerNodes.GetCount() ) )
   {
      string a_sInfo = "There are no SamplerNodes in the declarations group.";
      GenerateMenuError( a_slTitles, a_aiSamplerIndices, a_sInfo );
   }
   else
   {
      for( int nodes = 0; nodes < a_lSamplerNodes.GetCount(); ++nodes )
      {
         DynamicSamplerNode a_oSamplerNode = (DynamicSamplerNode)a_lSamplerNodes.Get( nodes );
         a_slTitles.Add( a_oSamplerNode.Name );
         a_aiSamplerIndices.Add( nodes );
         a_oItemTypes.Add( SamplerNode );
      }
      
      // Do image icons.
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slTitles,
      a_lSamplerNodes,
      a_slTitles,
      a_aiSamplerIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GetArrayConstructorTitle(

   StrList p_slItems,
   TypeInformation p_oTypeInfo,
   TypeInfoArray p_oItemTypes,
   int p_nArrayDim,
   string p_sTitle

   )
{
   string a_sUndefinedConstructor =
      "Constructor unavailable for unsized arrays. Choose a left side data source first!";

   if( p_nArrayDim > 0 )
   {
      p_slItems.Add( "New " + p_sTitle + " Array Constructor" );
   }
   else
   {
      p_slItems.Add( a_sUndefinedConstructor );
   }
   p_oItemTypes.Add( p_oTypeInfo );
}

function void GetVectorConstructorTitles(

   StrList p_slItems,
   TypeInformation p_oTypeInfo,
   TypeInfoArray p_oItemTypes,
   int p_nVectorDimension,
   string p_sVectorTypePrefix,
   string p_sVectorScalarType

   )
{
   string a_sPre = p_sVectorTypePrefix;
   string a_sST = p_sVectorScalarType;
   if( p_nVectorDimension == Enum.GLSL_DataType_Vec2() )
   {
      p_slItems.Add( a_sPre + "vec2( " + a_sST + ", " + a_sST + " )" );
   }
   else
   if( p_nVectorDimension == Enum.GLSL_DataType_Vec3() )
   {
      p_slItems.Add( a_sPre + "vec3( " + a_sST + ", " + a_sST + ", " + a_sST + " )" );
      p_slItems.Add( a_sPre + "vec3( " + a_sPre + "vec2, " + a_sST + " )" );
   }
   else
   if( p_nVectorDimension == Enum.GLSL_DataType_Vec4() )
   {
      p_slItems.Add( a_sPre + "vec4( " + a_sST + ", " + a_sST + ", " + a_sST + ", " + a_sST + " )" );
      p_slItems.Add( a_sPre + "vec4( " + a_sPre + "vec2, " + a_sST + ", " + a_sST + " )" );
      p_slItems.Add( a_sPre + "vec4( " + a_sPre + "vec2, " + a_sPre + "vec2 )" );
      p_slItems.Add( a_sPre + "vec4( " + a_sPre + "vec3, " + a_sST + " )" );
   }

   p_oItemTypes.AddTypeSequence( p_oTypeInfo, p_slItems.GetCount() );
}

function void CreateConstructorMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto TypeArray a_oItemImages;
   auto TypeInfoArray a_oItemTypes;
   auto List a_lVariableExpressionNodes;
   auto StrList a_slConstructorItems;
   auto IntArray a_aiConstructorItemIndices;
   auto VariableExpressionNode a_oVariableExpressionNode;
   VariableExpressionNode a_oSelNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();
   
   string a_sUndefinedConstructor = "Constructor unavailable for unsized arrays.";
   if( a_oSelNode && a_oSelNode.IsDerived( BooleanArrayExpressionNode ) )
   {
      BooleanArrayExpressionNode a_oBooleanArrayExpressionNode =
         (BooleanArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oBooleanArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, BooleanArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Bool" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( BooleanVectorExpressionNode ) )
   {
      BooleanVectorExpressionNode a_oBooleanVectorExpressionNode =
         (BooleanVectorExpressionNode)a_oSelNode;
      int a_nDimension = a_oBooleanVectorExpressionNode.Dimension;
      GetVectorConstructorTitles( a_slConstructorItems, BooleanVectorExpressionNode,
         a_oItemTypes, a_nDimension, "b", "bool" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( BooleanVectorArrayExpressionNode ) )
   {
      BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
         (BooleanVectorArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oBooleanVectorArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, BooleanVectorArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Bool Vector" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( IntegerArrayExpressionNode ) )
   {
      IntegerArrayExpressionNode a_oIntegerArrayExpressionNode =
         (IntegerArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oIntegerArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, IntegerArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Int" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( IntegerVectorExpressionNode ) )
   {
      IntegerVectorExpressionNode a_oIntegerVectorExpressionNode =
         (IntegerVectorExpressionNode)a_oSelNode;
      int a_nDimension = a_oIntegerVectorExpressionNode.Dimension;
      GetVectorConstructorTitles( a_slConstructorItems, IntegerVectorExpressionNode,
         a_oItemTypes, a_nDimension, "i", "int" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( IntegerVectorArrayExpressionNode ) )
   {
      IntegerVectorArrayExpressionNode a_oIntegerVectorArrayExpressionNode =
         (IntegerVectorArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oIntegerVectorArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, IntegerVectorArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Int Vector" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( UnsignedIntegerArrayExpressionNode ) )
   {
      UnsignedIntegerArrayExpressionNode a_oUnsignedIntegerArrayExpressionNode =
         (UnsignedIntegerArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oUnsignedIntegerArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, UnsignedIntegerArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Uint" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( UnsignedIntegerVectorExpressionNode ) )
   {
      UnsignedIntegerVectorExpressionNode a_oUnsignedIntegerVectorExpressionNode =
         (UnsignedIntegerVectorExpressionNode)a_oSelNode;
      int a_nDimension = a_oUnsignedIntegerVectorExpressionNode.Dimension;
      GetVectorConstructorTitles( a_slConstructorItems, UnsignedIntegerVectorExpressionNode,
         a_oItemTypes, a_nDimension, "u", "uint" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( UnsignedIntegerVectorArrayExpressionNode ) )
   {
      UnsignedIntegerVectorArrayExpressionNode a_oUnsignedIntegerVectorArrayExpressionNode =
         (UnsignedIntegerVectorArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oUnsignedIntegerVectorArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, UnsignedIntegerVectorArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Uint Vector" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( FloatArrayExpressionNode ) )
   {
      FloatArrayExpressionNode a_oFloatArrayExpressionNode =
         (FloatArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oFloatArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, FloatArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Float" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( VectorExpressionNode ) )
   {
      VectorExpressionNode a_oVectorExpressionNode =
         (VectorExpressionNode)a_oSelNode;
      int a_nDimension = a_oVectorExpressionNode.Dimension;
      GetVectorConstructorTitles( a_slConstructorItems, VectorExpressionNode,
         a_oItemTypes, a_nDimension, "", "float" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( VectorArrayExpressionNode ) )
   {
      VectorArrayExpressionNode a_oVectorArrayExpressionNode =
         (VectorArrayExpressionNode)a_oSelNode;
      int a_nArrayDim = a_oVectorArrayExpressionNode.Count;
      GetArrayConstructorTitle( a_slConstructorItems, VectorArrayExpressionNode,
         a_oItemTypes, a_nArrayDim, "Float Vector" );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( MatrixExpressionNode ) )
   {
      MatrixExpressionNode a_oMatrixExpressionNode =
         (MatrixExpressionNode)a_oSelNode;
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat2x2() )
      {
         a_slConstructorItems.Add( "mat2x2( float, float, float, float )" );
         a_slConstructorItems.Add( "mat2x2( vec2, vec2 )" );
         a_slConstructorItems.Add( "mat2x2( vec3, float )" );
         a_oItemTypes.AddTypeSequence( MatrixExpressionNode, a_slConstructorItems.GetCount() );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat2x3() )
      {
         a_slConstructorItems.Add( "mat2x3( float, float, float, float, float, float )" );
         a_slConstructorItems.Add( "mat2x3( float, float, float, float, vec2 )" );
         a_slConstructorItems.Add( "mat2x3( float, float, float, vec3 )" );
         a_slConstructorItems.Add( "mat2x3( float, float, vec4 )" );
         a_slConstructorItems.Add( "mat2x3( float, vec2, vec3 )" );
         a_slConstructorItems.Add( "mat2x3( vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat2x3( vec2, vec4 )" );
         a_slConstructorItems.Add( "mat2x3( vec3, vec3 )" );
         a_oItemTypes.AddTypeSequence( MatrixExpressionNode, a_slConstructorItems.GetCount() );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat2x4() )
      {
         a_slConstructorItems.Add( "mat2x4( float, float, float, float, float, float, float, float )" );
         a_slConstructorItems.Add( "mat2x4( float, float, float, float, float, float, vec2 )" );
         a_slConstructorItems.Add( "mat2x4( float, float, float, float, float, vec3 )" );
         a_slConstructorItems.Add( "mat2x4( float, float, float, float, vec4 )" );
         a_slConstructorItems.Add( "mat2x4( float, float, float, vec2, vec3 )" );
         a_slConstructorItems.Add( "mat2x4( float, float, vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat2x4( vec2, vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat2x4( float, vec3, vec4 )" );
         a_slConstructorItems.Add( "mat2x4( vec3, vec3, vec2 )" );
         a_slConstructorItems.Add( "mat2x4( vec4, vec4 )" );
         a_oItemTypes.AddTypeSequence( MatrixExpressionNode, a_slConstructorItems.GetCount() );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat3x2() )
      {
         a_slConstructorItems.Add( "mat3x2( float, float, float, float, float, float )" );
         a_slConstructorItems.Add( "mat3x2( vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat3x2( vec3, vec3 )" );
         a_slConstructorItems.Add( "mat3x2( vec4, vec2 )" );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat3x3() )
      {
         a_slConstructorItems.Add( "mat3x3( vec3, vec3, vec3 )" );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat3x4() )
      {
         a_slConstructorItems.Add( "mat3x4( vec2, vec2, vec2, vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat3x4( vec3, vec3, vec3, vec3 )" );
         a_slConstructorItems.Add( "mat3x4( vec4, vec4, vec4 )" );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat4x2() )
      {
         a_slConstructorItems.Add( "mat4x2( float, float, float, float, float, float, float, float )" );
         a_slConstructorItems.Add( "mat4x2( vec2, vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat4x2( vec2, vec2, vec4 )" );
         a_slConstructorItems.Add( "mat4x2( vec4, vec4 )" );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat4x3() )
      {
         a_slConstructorItems.Add( "mat4x2( vec2, vec2, vec2, vec2, vec2, vec2 )" );
         a_slConstructorItems.Add( "mat4x2( vec3, vec3, vec3, vec3 )" );
         a_slConstructorItems.Add( "mat4x2( vec4, vec4, vec4 )" );
      }
      else
      if( a_oMatrixExpressionNode.GetScalarDimension() == Enum.GLSL_DataType_Mat4x4() )
      {
         a_slConstructorItems.Add( "mat4x4( vec4, vec4, vec4, vec4 )" );
         a_slConstructorItems.Add( "mat4x4( vec2, vec2, vec2, vec2, vec2, vec2, vec2, vec2 )" );
         a_oItemTypes.AddTypeSequence( MatrixExpressionNode, a_slConstructorItems.GetCount() );
      }
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( StructExpressionNode ) )
   {
      a_slConstructorItems.Add( "&New Struct Constructor" );
      a_oItemTypes.Add( StructExpressionNode );
   }
   else
   {
      a_slConstructorItems.Add( "No constructor expressions are defined for this type." );
      a_oItemTypes.Add( null );
   }

   if( !( a_slConstructorItems.GetCount() ) )
   {
      a_slConstructorItems.Add( "No constructor functions are defined for this type." );
      a_oItemTypes.Add( null );
   }

   // Do image icons.
   if( a_slConstructorItems.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   for( int a = 0; a < a_slConstructorItems.GetCount(); ++a )
   {
      a_aiConstructorItemIndices.Add( a );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slConstructorItems,
      a_aiConstructorItemIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateAddUniformBufferBindNodeVariableMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto StrList memberNames;
   auto IntArray variableIndices;
   auto List a_lVariableNodes;
   auto TypeInfoArray a_oItemTypes;

   // Get the data source from the UniformBufferBindNode.
   UniformBufferBindNode a_oUniformBufferBindNode =
      (UniformBufferBindNode)Model.GetFirstSelectedNode().GetNode();
   Node a_oDataSource = (Node)a_oUniformBufferBindNode.FindUniformBuffer();

   if( a_oDataSource && a_oDataSource.IsDerived( Group ) )
   {
      string a_sModifier;
      bool a_bFoundVariable;
      Graph.GetVariableNodesFromDataSource( a_oDataSource, a_lVariableNodes,
         memberNames, a_sModifier, a_bFoundVariable );
   }

   for( int i = 0; i < a_lVariableNodes.GetCount(); ++i )
   {
      Node a_oVar = (Node)a_lVariableNodes.Get( i );
      a_slTitles.Add( a_oVar.Name );
      variableIndices.Add( i );
      a_oItemTypes.Add( a_oVar.GetType() );
   }

   if( !a_oDataSource )
   {
      a_slTitles.Add( "Unable to find UniformBufferNode data source." );
      memberNames.Add( "Unable to find UniformBufferNode data source." );
      variableIndices.Add( 0 );
   }
   else
   if( a_slTitles.GetCount() == 0 )
   {
      a_slTitles.Add( "No member variables found." );
      memberNames.Add( "No member variables found." );
      variableIndices.Add( 0 );
   }

   // Do image icons.
   auto TypeArray a_oItemImages;
   if( a_lVariableNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      memberNames,
      a_lVariableNodes,
      memberNames,
      variableIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GenerateMenuForBindingType(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler,
   int p_iScopeSearchType

   )
{
   // Get the VariableNode data sources that are
   // in scope of the VariableExpressionNode.

   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   // DEBUG
   //Console.Out( a_oCodeGenerationRoot.Name );

   if( !a_oCodeGenerationRoot )
   {
      CommandItem a_oCommandItem;
      string a_sNullGuid = "{00000000-0000-0000-0000-000000000000}";
      p_oMenu.InsertItem( 0, "This command is not applicable.",
         p_sCommandGuid, -1, false, false );
      return;
   }

   VariableExpressionNode a_oVariableExpressionNode;
   bool a_bWriteable = true; // This is the safest default.

   if( a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      a_oVariableExpressionNode = (VariableExpressionNode)a_oSelNode;
      a_bWriteable = a_oVariableExpressionNode.MustBeWriteable();
   }

   // Types we want to add while traversing the code tree.
   auto TypeInfoArray a_oNamespaceTypes;
   SpaTypeUtil.GetNamespaceTypes( a_oNamespaceTypes );

   bool a_bTraverseInto = true;
   auto List a_lCodeObjects;
   auto List a_lNodeLinks;
   auto IntArray a_aiGlobalIndent;
   auto IntArray a_aiGlobalIndices;
   int a_nCurrentIndent = 0;
   bool a_bTraversedSelection;
   bool a_bFilterGlobals;
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetCodeObjects(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oCodeGenerationRoot.GetType(),
      a_oSelNode,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration,
      a_bTraversedSelection,
      a_bFilterGlobals,
      a_lCodeObjects,
      a_lNodeLinks,
      a_oNamespaceTypes,
      a_bTraverseInto,
      a_nCurrentIndent,
      a_aiGlobalIndent,
      a_aiGlobalIndices );

   auto List a_lSortedObjects;
   auto IntArray a_aiSortedIndent;
   auto IntArray a_aiSortedIndices;
   int a_nCurrentStorageQualifier;

   SpaVariableUtil.SortByStorageQualifier(
      a_lCodeObjects,
      a_lSortedObjects,
      p_iScopeSearchType,
      a_nCurrentStorageQualifier,
      a_aiGlobalIndent,
      a_aiSortedIndent,
      a_aiGlobalIndices,
      a_aiSortedIndices );

   auto IntArray a_aiFinalIndent;
   auto IntArray a_aiFinalIndices;
   auto List a_lFinalObjects;

   SpaVariableUtil.SortForExpression(
      a_bWriteable,
      a_oSelNode,
      a_aiSortedIndent,
      a_aiFinalIndent,
      a_aiSortedIndices,
      a_aiFinalIndices,
      a_lSortedObjects,
      a_lFinalObjects );

   // Populate the the Strlist for menu names, IntArray for indices, and TypeInfoArray.
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto StrList a_slVariableNames;
   auto StrList a_slMemberNames;
   auto ListNode a_oMemberSequence;
   for( int i = 0; i < a_lFinalObjects.GetCount(); ++i )
   {
      auto List a_lMemberSequence;
      Node a_oIsVariable = (Node)a_lFinalObjects.Get( i );
      if( a_oIsVariable && a_oIsVariable.IsDerived( VariableNode ) )
      {
         VariableNode a_oVariableNode = (VariableNode)a_oIsVariable;

         SpaVariableUtil.GetMemberSequence(
            a_lMemberSequence,
            a_lCodeObjects,
            a_aiGlobalIndent,
            a_aiFinalIndices.Objects[ i ] );
         
         a_slVariableNames.Add(
            SpaVariableUtil.GetSequenceName(
               a_lMemberSequence,
               a_oMemberSequence ) );

         a_oItemTypes.Add( a_oVariableNode.GetType() );
      }
   }

   if( !( a_lFinalObjects.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slVariableNames.Add( "No variables found." );
      a_aiFinalIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   if( a_lCodeObjects.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slVariableNames,
      a_lFinalObjects,
      a_slVariableNames,
      a_aiFinalIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GenerateMenuForVariableType(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler,
   TypeInfoArray p_oTypes

   )
{
   // Get the VariableNode data sources that are
   // in scope of the VariableExpressionNode.

   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   // DEBUG
   //Console.Out( a_oCodeGenerationRoot.Name );

   if( !a_oCodeGenerationRoot )
   {
      CommandItem a_oCommandItem;
      string a_sNullGuid = "{00000000-0000-0000-0000-000000000000}";
      p_oMenu.InsertItem( 0, "This command is not applicable.",
         p_sCommandGuid, -1, false, false );
      return;
   }

   MatrixExpressionNode a_oMatrixExpressionNode;
   VariableExpressionNode a_oVariableExpressionNode;
   bool a_bWriteable = true; // This is the safest default.

   if( a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      a_oVariableExpressionNode = (VariableExpressionNode)a_oSelNode;
      a_bWriteable = a_oVariableExpressionNode.MustBeWriteable();
   }

   if( a_oSelNode.IsDerived( MatrixExpressionNode ) )
   {
      a_oMatrixExpressionNode = (MatrixExpressionNode)a_oSelNode;
   }

   // Types we want to add while traversing the code tree.
   auto TypeInfoArray a_oNamespaceTypes;
   SpaTypeUtil.GetNamespaceTypes( a_oNamespaceTypes );

   bool a_bTraverseInto = true;
   auto List a_lCodeObjects;
   auto List a_lNodeLinks;
   auto IntArray a_aiGlobalIndent;
   auto IntArray a_aiGlobalIndices;
   int a_nCurrentIndent = 0;
   bool a_bTraversedSelection;
   bool a_bFilterGlobals;
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetCodeObjects(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oCodeGenerationRoot.GetType(),
      a_oSelNode,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration,
      a_bTraversedSelection,
      a_bFilterGlobals,
      a_lCodeObjects,
      a_lNodeLinks,
      a_oNamespaceTypes,
      a_bTraverseInto,
      a_nCurrentIndent,
      a_aiGlobalIndent,
      a_aiGlobalIndices );

   auto List a_lSortedObjects;
   auto IntArray a_aiSortedIndent;
   auto IntArray a_aiSortedIndices;
   int a_nCurrentStorageQualifier;

   SpaVariableUtil.SortByType(
      a_lCodeObjects,
      a_lSortedObjects,
      p_oTypes,
      a_nCurrentStorageQualifier,
      a_aiGlobalIndent,
      a_aiSortedIndent,
      a_aiGlobalIndices,
      a_aiSortedIndices );

   auto IntArray a_aiFinalIndent;
   auto IntArray a_aiFinalIndices;
   auto List a_lFinalObjects;

   SpaVariableUtil.SortForMatrix(
      a_oMatrixExpressionNode,
      a_oSelNode,
      a_aiSortedIndent,
      a_aiFinalIndent,
      a_aiSortedIndices,
      a_aiFinalIndices,
      a_lSortedObjects,
      a_lFinalObjects );

   // Populate the the Strlist for menu names, IntArray for indices, and TypeInfoArray.
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto StrList a_slVariableNames;
   auto StrList a_slMemberNames;
   auto ListNode a_oMemberSequence;
   for( int i = 0; i < a_lFinalObjects.GetCount(); ++i )
   {
      auto List a_lMemberSequence;
      Node a_oIsVariable = (Node)a_lFinalObjects.Get( i );
      if( a_oIsVariable && a_oIsVariable.IsDerived( VariableNode ) )
      {
         VariableNode a_oVariableNode = (VariableNode)a_oIsVariable;

         SpaVariableUtil.GetMemberSequence(
            a_lMemberSequence,
            a_lCodeObjects,
            a_aiGlobalIndent,
            a_aiFinalIndices.Objects[ i ] );
         
         a_slVariableNames.Add(
            SpaVariableUtil.GetSequenceName(
               a_lMemberSequence,
               a_oMemberSequence ) );

         a_oItemTypes.Add( a_oVariableNode.GetType() );
      }
   }

   if( !( a_lFinalObjects.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slVariableNames.Add( "No variables found." );
      a_aiFinalIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   if( a_lCodeObjects.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slVariableNames,
      a_lFinalObjects,
      a_slVariableNames,
      a_aiFinalIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void GenerateMenuForGlobalConstants(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler,
   int p_iScopeSearchType

   )
{
   // Get the VariableNode data sources that are
   // in scope of the VariableExpressionNode.

   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;
   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   // DEBUG
   //Console.Out( a_oCodeGenerationRoot.Name );

   if( !a_oCodeGenerationRoot )
   {
      CommandItem a_oCommandItem;
      string a_sNullGuid = "{00000000-0000-0000-0000-000000000000}";
      p_oMenu.InsertItem( 0, "This command is not applicable.",
         p_sCommandGuid, -1, false, false );
      return;
   }

   VariableExpressionNode a_oVariableExpressionNode;
   bool a_bWriteable = true; // This is the safest default.

   if( a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      a_oVariableExpressionNode = (VariableExpressionNode)a_oSelNode;
      a_bWriteable = a_oVariableExpressionNode.MustBeWriteable();
   }

   // Types we want to add while traversing the code tree.
   auto TypeInfoArray a_oNamespaceTypes;
   SpaTypeUtil.GetNamespaceTypes( a_oNamespaceTypes );

   bool a_bTraverseInto = true;
   auto List a_lCodeObjects;
   auto List a_lNodeLinks;
   auto IntArray a_aiGlobalIndent;
   auto IntArray a_aiGlobalIndices;
   int a_nCurrentIndent = 0;
   bool a_bTraversedSelection;
   bool a_bFilterGlobals = true;
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetCodeObjects(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oCodeGenerationRoot.GetType(),
      a_oSelNode,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration,
      a_bTraversedSelection,
      a_bFilterGlobals,
      a_lCodeObjects,
      a_lNodeLinks,
      a_oNamespaceTypes,
      a_bTraverseInto,
      a_nCurrentIndent,
      a_aiGlobalIndent,
      a_aiGlobalIndices );

   auto List a_lSortedObjects;
   auto IntArray a_aiSortedIndent;
   auto IntArray a_aiSortedIndices;
   int a_nCurrentStorageQualifier;

   SpaVariableUtil.SortGlobalObjects(
      a_lCodeObjects,
      a_lSortedObjects,
      a_aiGlobalIndent,
      a_aiSortedIndent,
      a_aiGlobalIndices,
      a_aiSortedIndices );

   auto List a_lFinalObjects;
   auto IntArray a_aiFinalIndent;
   auto IntArray a_aiFinalIndices;

   SpaVariableUtil.SortForExpression(
      a_bWriteable,
      a_oSelNode,
      a_aiSortedIndent,
      a_aiFinalIndent,
      a_aiSortedIndices,
      a_aiFinalIndices,
      a_lSortedObjects,
      a_lFinalObjects );

   //SpaListUtil.Out( a_lFinalObjects );
   //SpaIntArrayUtil.Out( a_aiFinalIndent );
   //SpaIntArrayUtil.Out( a_aiFinalIndices );

   // Populate the the Strlist for menu item names,
   // IntArray for menu item indices, and TypeInfoArray with node types.
   // We'll use the node types to get the right images for the menu items.
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto StrList a_slVariableNames;
   auto StrList a_slMemberNames;
   auto ListNode a_oMemberSequence;
   for( int i = 0; i < a_lFinalObjects.GetCount(); ++i )
   {
      auto List a_lMemberSequence;
      Node a_oIsVariable = (Node)a_lFinalObjects.Get( i );
      if( a_oIsVariable && a_oIsVariable.IsDerived( VariableNode ) )
      {
         VariableNode a_oVariableNode = (VariableNode)a_oIsVariable;

         SpaVariableUtil.GetMemberSequence(
            a_lMemberSequence,
            a_lCodeObjects,
            a_aiGlobalIndent,
            a_aiFinalIndices.Objects[ i ] );
         
         a_slVariableNames.Add( SpaVariableUtil.GetSequenceName( a_lMemberSequence, a_oMemberSequence ) );
         a_oItemTypes.Add( a_oVariableNode.GetType() );
      }
   }

   if( !( a_lFinalObjects.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slVariableNames.Add( "No variables found." );
      a_aiFinalIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   if( a_lCodeObjects.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slVariableNames,
      a_lFinalObjects,
      a_slVariableNames,
      a_aiFinalIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void FindVariable(

   Node p_oNode,
   ListNode p_oMemberSequence,
   int p_nGlobalIndex,
   bool p_bFilterGlobals

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool a_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;
   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      a_bInFunctionDeclaration );

   string a_sFunctionName = "FindUniformVariables()";
   if( !a_oCodeGenerationRoot )
   {
      string a_sMessage = "Unable to find code generation root in NODE_SCRIPTS::" + a_sFunctionName;
      Console.Assert( a_sMessage );
      return;
   }

   VariableExpressionNode a_oVariableExpressionNode;
   bool a_bWriteable = true; // This is the safest default.

   if( a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      a_oVariableExpressionNode = (VariableExpressionNode)a_oSelNode;
      a_bWriteable = a_oVariableExpressionNode.MustBeWriteable();
   }

   // Types we want to add while traversing the code tree.
   auto TypeInfoArray a_oNamespaceTypes;
   SpaTypeUtil.GetNamespaceTypes( a_oNamespaceTypes );

   bool a_bTraverseInto = true;
   auto List a_lCodeObjects;
   auto List a_lNodeLinks;
   auto IntArray a_aiGlobalIndent;
   auto IntArray a_aiGlobalIndices;
   int a_nCurrentIndent = 0;
   bool a_bTraversedSelection;
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetCodeObjects(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oCodeGenerationRoot.GetType(),
      a_oSelNode,
      a_oCurrentFunctionDeclaration,
      a_bInFunctionDeclaration,
      a_bTraversedSelection,
      p_bFilterGlobals,
      a_lCodeObjects,
      a_lNodeLinks,
      a_oNamespaceTypes,
      a_bTraverseInto,
      a_nCurrentIndent,
      a_aiGlobalIndent,
      a_aiGlobalIndices );

   // Populate the the Strlist for menu names, IntArray for indices, and TypeInfoArray.
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto StrList a_slVariableNames;
   auto StrList a_slMemberNames;

   auto List a_lMemberSequence;
   Node a_oIsVariable = (Node)a_lCodeObjects.Get( p_nGlobalIndex );
   if( a_oIsVariable && a_oIsVariable.IsDerived( VariableNode ) )
   {
      VariableNode a_oVariableNode = (VariableNode)a_oIsVariable;
      SpaVariableUtil.GetMemberSequence(
         a_lMemberSequence,
         a_lCodeObjects,
         a_aiGlobalIndent,
         a_aiGlobalIndices.Objects[ p_nGlobalIndex ] );
      a_slVariableNames.Add(
         SpaVariableUtil.GetSequenceName(
            a_lMemberSequence,
            p_oMemberSequence ) );
      a_oItemTypes.Add( a_oVariableNode.GetType() );
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateGlobalDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForGlobalConstants(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_Const() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateUniformDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForBindingType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_Uniform() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateLocalDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForBindingType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_None() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateInDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForBindingType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_In() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateOutDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForBindingType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_Out() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateConstDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   GenerateMenuForBindingType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      Enum.GLSL_Qualifier_Const() );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateMatrixColDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( IntegerNode );
   a_oTypes.Add( UnsignedIntegerNode );

   GenerateMenuForVariableType(
      p_oMenu,
      p_sCommandGuid,
      p_sEventHandler,
      a_oTypes );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateStructDeclarationDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   if( !a_oCodeGenerationRoot )
   {
      GenerateNullMenuItem( p_oMenu, p_sCommandGuid );
      return;
   }

   bool a_bTraverseInto = true;
   auto List a_lStructNodes;
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( StructNode );
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetScopedObjectsByType(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oSelNode,
      a_lStructNodes,
      a_bTraverseInto,
      a_oTypes );

   auto IntArray a_aiStructIndices;
   auto StrList a_slStructTypeNames;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   for( int i = 0; i < a_lStructNodes.GetCount(); ++i )
   {
      StructNode a_oStructNode = (StructNode)a_lStructNodes.Get( i );
      a_slStructTypeNames.Add( a_oStructNode.Block.BlockName );
      a_oItemTypes.Add( StructInstanceNode );
      a_aiStructIndices.Add( i );
   }

   if( a_lStructNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }
   else
   {
      a_oItemTypes.Add( null );
      a_slStructTypeNames.Add( "No struct declarations found." );
      a_aiStructIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slStructTypeNames,
      a_lStructNodes,
       a_slStructTypeNames,
      a_aiStructIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateSamplerDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   if( !a_oCodeGenerationRoot )
   {
      GenerateNullMenuItem( p_oMenu, p_sCommandGuid );
      return;
   }

   bool a_bTraverseInto = true;
   auto List a_lSamplerNodes;
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( SamplerNode );
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetScopedObjectsByType(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oSelNode,
      a_lSamplerNodes,
      a_bTraverseInto,
      a_oTypes );

   auto IntArray a_aiSamplerIndices;
   auto StrList a_slSamplerTypeNames;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   for( int i = 0; i < a_lSamplerNodes.GetCount(); ++i )
   {
      SamplerNode a_oSamplerNode = (SamplerNode)a_lSamplerNodes.Get( i );
      a_slSamplerTypeNames.Add( a_oSamplerNode.GetSamplerTypeString( a_oSamplerNode.SamplerType ) );
      a_oItemTypes.Add( SamplerNode );
      a_aiSamplerIndices.Add( i );
   }

   if( a_lSamplerNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slSamplerTypeNames,
      a_lSamplerNodes,
      a_slSamplerTypeNames,
      a_aiSamplerIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferBindDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   auto List a_lBoundBuffers;
   Group a_oCodeGenerationRoot;
   if( a_oSelNode.IsDerived( Program ) )
   {
      Program a_oProgram = (Program)a_oSelNode;
      Graph.GetNodesFromDatabase( a_oProgram, a_lBoundBuffers, UniformBufferBindNode );
      Node a_oIsCodeGenerator = (Node)a_oProgram.PreRenderHook;
      if( a_oIsCodeGenerator && a_oIsCodeGenerator.IsDerived( Group ) )
      {
         a_oCodeGenerationRoot = (Group)a_oIsCodeGenerator;
      }
   }

   if( !a_oCodeGenerationRoot )
   {
      GenerateNullMenuItem( p_oMenu, p_sCommandGuid );
      return;
   }

   // Sort the UniformBufferBindNode objects and
   // get the UniformBufferNodes they are binding.
   auto List a_lBoundUniformBuffers;
   for( int b = 0; b < a_lBoundBuffers.GetCount(); ++b )
   {
      UniformBufferBindNode a_oUniformBufferBindNode =
         (UniformBufferBindNode)a_lBoundBuffers.Get( b );
      Node a_oIsUniformBufferNode = (Node)a_oUniformBufferBindNode.FindUniformBuffer();
      if( a_oIsUniformBufferNode && a_oIsUniformBufferNode.IsDerived( UniformBufferNode ) )
      {
         a_lBoundUniformBuffers.AddRef( a_oIsUniformBufferNode );
      }
   }

   // Find UniformBufferNodes in the source tree.
   bool a_bTraverseInto = true;
   auto List a_lUniformBufferNodes;
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( UniformBufferNode );
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetScopedObjectsByType(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      null,
      a_lUniformBufferNodes,
      a_bTraverseInto,
      a_oTypes );

   auto IntArray a_aiItemIndices;
   auto StrList a_slUniformBufferNodeNames;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto List a_lBindTargets;
   for( int i = 0; i < a_lUniformBufferNodes.GetCount(); ++i )
   {
      UniformBufferNode a_oUniformBufferNode = (UniformBufferNode)a_lUniformBufferNodes.Get( i );
      if( !( a_lBoundUniformBuffers.In( a_oUniformBufferNode ) ) )
      {
         a_slUniformBufferNodeNames.Add( a_oUniformBufferNode.Block.BlockName );
         a_oItemTypes.Add( UniformBufferNode );
         a_aiItemIndices.Add( i );
         a_lBindTargets.AddRef( a_oUniformBufferNode );
      }
   }

   if( a_lUniformBufferNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slUniformBufferNodeNames,
      a_lBindTargets,
      a_slUniformBufferNodeNames,
      a_aiItemIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateIntegralTypeDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   if( !a_oCodeGenerationRoot )
   {
      GenerateNullMenuItem( p_oMenu, p_sCommandGuid );
      return;
   }

   bool a_bTraverseInto = true;
   auto List a_lIntegerNodes;
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( IntegerNode );
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetScopedObjectsByType(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oSelNode,
      a_lIntegerNodes,
      a_bTraverseInto,
      a_oTypes );

   auto IntArray a_aiItemIndices;
   auto StrList a_slIntegerVariableNames;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   for( int i = 0; i < a_lIntegerNodes.GetCount(); ++i )
   {
      IntegerNode a_oIntegerNode = (IntegerNode)a_lIntegerNodes.Get( i );
      string a_sVariableName = a_oIntegerNode.NamePrefix +
         a_oIntegerNode.Variable + a_oIntegerNode.NameSuffix;
      a_slIntegerVariableNames.Add( "int " + a_sVariableName );
      a_oItemTypes.Add( IntegerNode );
      a_aiItemIndices.Add( i );
   }

   if( a_lIntegerNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slIntegerVariableNames,
      a_lIntegerNodes,
      a_slIntegerVariableNames,
      a_aiItemIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateConstIntegralTypeDataSourceMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   // Get the selected node.
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;
   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   if( !a_oCodeGenerationRoot )
   {
      GenerateNullMenuItem( p_oMenu, p_sCommandGuid );
      return;
   }

   bool a_bTraverseInto = true;
   auto List a_lIntegralNodes;
   auto TypeInfoArray a_oTypes;
   a_oTypes.Add( IntegerNode );
   a_oTypes.Add( UnsignedIntegerNode );
   int a_nGlslVersion = Expression.GetLanguageVersion();

   SpaVariableUtil.GetScopedObjectsByType(
      a_nGlslVersion,
      a_oCodeGenerationRoot,
      a_oSelNode,
      a_lIntegralNodes,
      a_bTraverseInto,
      a_oTypes );
   
   auto IntArray a_aiItemIndices;
   auto StrList a_slIntegerVariableNames;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto List a_lConstVariables;

   for( int i = 0; i < a_lIntegralNodes.GetCount(); ++i )
   {
      VariableNode a_oVariableNode = (VariableNode)a_lIntegralNodes.Get( i );
      if( a_oVariableNode.IsConst() )
      {
         string a_sVariableName = a_oVariableNode.NamePrefix +
            a_oVariableNode.Variable + a_oVariableNode.NameSuffix;
         string a_sType = "int ";
         if( a_oVariableNode.IsDerived( UnsignedIntegerNode ) )
         {
            a_sType = "uint ";
         }
         a_slIntegerVariableNames.Add( a_sType + a_sVariableName );
         a_oItemTypes.Add( a_oVariableNode.GetType() );
         a_aiItemIndices.Add( i );
         a_lConstVariables.AddRef( a_oVariableNode );
      }
   }

   if( a_lConstVariables.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }
   else
   {
      a_oItemTypes.Add( null );
      a_slIntegerVariableNames.Add( "No const integral variables found." );
      a_aiItemIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slIntegerVariableNames,
      a_lConstVariables,
      a_slIntegerVariableNames,
      a_aiItemIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateSetMatrixNodeDimensionMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiDimensions;
   auto MatrixNode a_oMatrixNode;
   auto TypeArray a_aoItemImages;
   auto TypeInfoArray a_aoItemTypes;
   a_oMatrixNode.GetAllTypeStrings( a_slTitles );
   a_oMatrixNode.GetAllDimensions( a_aiDimensions );

   if( a_slTitles.GetCount() == 0 )
   {
      a_slTitles.Add( "No matrix dimension information is available." );
      a_aiDimensions.Add( 0 );
      a_aoItemTypes.Add( null );
   }
   else
   {
      for( int i = 0; i < a_slTitles.GetCount(); ++i )
      {
         a_aoItemTypes.Add( MatrixNode );
      }
   }

   SpaMenuUtil.GetIconImages( a_aoItemTypes, a_aoItemImages );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiDimensions,
      a_aoItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateCommandRepNodeStatusMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto CommandRepNode a_oCommandRepNode;
   a_oCommandRepNode.GetStatusItems( a_slTitles, a_aiIndices );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateTypeRepNodeStatusMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeRepNode a_oTypeRepNode;
   a_oTypeRepNode.GetStatusItems( a_slTitles, a_aiIndices );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateQualifierMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;

   GlslQualifierNode a_oGlslQualifierNode =
      (GlslQualifierNode)Model.GetFirstSelectedNode().GetNode();

   if( a_oGlslQualifierNode.Qualifier == Enum.GLSL_Qualifier_None() )
   {
      a_oGlslQualifierNode.GetAllQualifierStrings(
         a_slTitles,
         a_aiIndices );
   }
   else
   {
      a_oGlslQualifierNode.GetQualifierStringsByCategory(
         a_slTitles,
         a_aiIndices,
         a_oGlslQualifierNode.GetCategory() );
   }

   for( int i = 0; i < a_slTitles.GetCount(); ++i )
   {
      a_oItemTypes.Add( GlslQualifierNode );
   }

   SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreatePropertyItemTypeMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto DataMemberNode a_oDataMemberNode;
   a_oDataMemberNode.GetPropertyItemTypes( a_slTitles );
   for( int a_nIndices = 0; a_nIndices < a_slTitles.GetCount(); ++a_nIndices )
   {
      a_aiIndices.Add( a_nIndices );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      null );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateArrayMemberPropertiesMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto TypeArray a_oItemImages;
   auto TypeInfoArray a_oItemTypes;
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   QualifierList a_oQualifierList;

   if( a_oSelNode && a_oSelNode.IsDerived( UniformBufferNode ) )
   {
      UniformBufferNode a_oUniformBufferNode = (UniformBufferNode)a_oSelNode;
      a_oQualifierList = a_oUniformBufferNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( ShaderBufferNode ) )
   {
      ShaderBufferNode a_oShaderBufferNode = (ShaderBufferNode)a_oSelNode;
      a_oQualifierList = a_oShaderBufferNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( InterfaceBlockNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNode = (InterfaceBlockNode)a_oSelNode;
      a_oQualifierList = a_oInterfaceBlockNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( VariableNode ) )
   {
      VariableNode a_oVariableNode = (VariableNode)a_oSelNode;
      a_oQualifierList = a_oVariableNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
   {
      ListNode a_oListNode = (ListNode)a_oSelNode;
      for( int a_nNode = 0; a_nNode < a_oListNode.NodeList.GetCount(); ++a_nNode )
      {
         Node a_oListMem = (Node)a_oListNode.NodeList.Get( a_nNode );
         a_slTitles.Add( a_oListMem.Name );
         a_aiIndices.Add( a_nNode );
      }
   }

   if( a_oQualifierList )
   {
      auto List a_lQualifiers;
      auto GlslQualifierManager a_oGlslQualifierManager;
      a_oGlslQualifierManager.GetQualifierNodes(
         a_oQualifierList,
         a_lQualifiers );

      for( int a_nNode = 0; a_nNode < a_lQualifiers.GetCount(); ++a_nNode )
      {
         GlslQualifierNode a_oGlslQualifierNode =
            (GlslQualifierNode)a_lQualifiers.Get( a_nNode );
         int a_nCurrentQualifier =
            a_oGlslQualifierNode.Qualifier;
         string a_sQualifier =
            a_oGlslQualifierNode.GetQualifierName();
         a_slTitles.Add( a_sQualifier );
         a_aiIndices.Add( a_nNode );
         a_oItemTypes.Add( GlslQualifierNode );
      }
   }

   if( a_slTitles.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }
   else
   {
      a_oItemImages.Add( null );
      a_slTitles.Add( "No qualifiers to remove." );
      a_aiIndices.Add( 0 );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateAddQualifierItemMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto QualifierNode a_oQualifierNode;

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   Expression.CreateQualifierList(
      a_oSelNode,
      a_slTitles,
      a_aiIndices,
      a_oItemTypes );

   SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );

   if( !( a_slTitles.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slTitles.Add( "No qualifiers can be added!" );
      a_aiIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateRemoveQualifierItemMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto TypeArray a_oItemImages;
   auto TypeInfoArray a_oItemTypes;
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   QualifierList a_oQualifierList;

   if( a_oSelNode && a_oSelNode.IsDerived( UniformBufferNode ) )
   {
      UniformBufferNode a_oUniformBufferNode = (UniformBufferNode)a_oSelNode;
      a_oQualifierList = a_oUniformBufferNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( ShaderBufferNode ) )
   {
      ShaderBufferNode a_oShaderBufferNode = (ShaderBufferNode)a_oSelNode;
      a_oQualifierList = a_oShaderBufferNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( InterfaceBlockNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNode = (InterfaceBlockNode)a_oSelNode;
      a_oQualifierList = a_oInterfaceBlockNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( VariableNode ) )
   {
      VariableNode a_oVariableNode = (VariableNode)a_oSelNode;
      a_oQualifierList = a_oVariableNode.QualifierList;
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
   {
      ListNode a_oListNode = (ListNode)a_oSelNode;
      for( int a_nNode = 0; a_nNode < a_oListNode.NodeList.GetCount(); ++a_nNode )
      {
         Node a_oListMem = (Node)a_oListNode.NodeList.Get( a_nNode );
         a_slTitles.Add( a_oListMem.Name );
         a_aiIndices.Add( a_nNode );
      }
   }

   if( a_oQualifierList )
   {
      auto List a_lQualifiers;
      auto GlslQualifierManager a_oGlslQualifierManager;
      a_oGlslQualifierManager.GetQualifierNodes(
         a_oQualifierList,
         a_lQualifiers );

      for( int a_nNode = 0; a_nNode < a_lQualifiers.GetCount(); ++a_nNode )
      {
         GlslQualifierNode a_oGlslQualifierNode =
            (GlslQualifierNode)a_lQualifiers.Get( a_nNode );
         int a_nCurrentQualifier =
            a_oGlslQualifierNode.Qualifier;
         string a_sQualifier =
            a_oGlslQualifierNode.GetQualifierName();
         a_slTitles.Add( a_sQualifier );
         a_aiIndices.Add( a_nNode );
         a_oItemTypes.Add( GlslQualifierNode );
      }
   }

   if( a_slTitles.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }
   else
   {
      a_oItemImages.Add( null );
      a_slTitles.Add( "No qualifiers to remove." );
      a_aiIndices.Add( 0 );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateAddSubroutineItemMenu(

   CommandBar p_oMenu,
   string p_sCommandGuid,
   string p_sEventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;
   auto QualifierNode a_oQualifierNode;
   auto List a_lSubroutineObjects;

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   // Find the appropriate code generation root.
   bool p_bInFunctionDeclaration;
   Group a_oCodeGenerationRoot;
   VariableExpressionNode a_oCurrentFunctionDeclaration;

   GetCodeGenerationRoot(
      a_oSelNode,
      a_oSelNode,
      a_oCodeGenerationRoot,
      a_oCurrentFunctionDeclaration,
      p_bInFunctionDeclaration );

   // DEBUG
   //Console.Out( a_oCodeGenerationRoot.Name );

   if( !a_oCodeGenerationRoot )
   {
      CommandItem a_oCommandItem;
      string a_sNullGuid = "{00000000-0000-0000-0000-000000000000}";
      p_oMenu.InsertItem( 0, "This command is not applicable.",
         p_sCommandGuid, -1, false, false );
      return;
   }

   auto GlslQualifierManager a_oGlslQualifierManager;
   bool a_bTraverseInto = true;

   Expression.CreateSubroutineList(
      a_oCodeGenerationRoot,
      a_oSelNode,
      a_oGlslQualifierManager,
      a_bTraverseInto,
      a_lSubroutineObjects,
      a_slTitles,
      a_aiIndices,
      a_oItemTypes );

   if( !( a_lSubroutineObjects.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slTitles.Add( "No subroutine expressions found." );
      a_aiIndices.Add( 0 );
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }
   else
   {
      for( int i = 0; i < a_lSubroutineObjects.GetCount(); ++i )
      {
         Node a_oNode = (Node)a_lSubroutineObjects.Get( i );
         a_slTitles.Add( a_oNode.Name );
         a_oItemTypes.Add( a_oNode.GetType() );
         a_aiIndices.Add( i );
      }
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildVariableMenuFromIntArray(
      p_oMenu,
      0,
      p_sCommandGuid,
      Script,
      p_sEventHandler,
      a_slTitles,
      a_lSubroutineObjects,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateStringArrayMemberPropertiesMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto List a_lStringArrayNodes;
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( StringArrayNode ) )
   {
      StringArrayNode a_oStringArrayNode = (StringArrayNode)a_oSelNode;
      a_oItemTypes.Add( StringArrayNode );
      for( int a_nNode = 0; a_nNode < a_oStringArrayNode.Objects.GetCount(); ++a_nNode )
      {
         // Add a temporary StringNode so we can generate icons.
         StringNode a_oForIcon = new StringNode;
         a_lStringArrayNodes.Add( a_oForIcon );
         a_slTitles.Add( "[" + a_nNode + "]   " + a_oStringArrayNode.Objects.GetAt( a_nNode ) );
         a_aiIndices.Add( a_nNode );
      }
   }

   if( !( a_slTitles.GetCount() ) )
   {
      a_slTitles.Add( "This array has no members." );
      a_aiIndices.Add( 0 );
   }

   // Do image icons.
   auto TypeArray a_oItemImages;
   if( a_lStringArrayNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildMenuFromIntArray( menu, 0, commandGuid, Script, eventHandler,
      a_slTitles, a_aiIndices, a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateDataPackageInfo(

   Node p_oNode,
   StrList p_slDataCaptureObjects,
   IntArray p_aiIndices

   )
{
   auto TypeInfoArray a_oCaptureObjectTypes;
   int a_nConsumedSlots;

   if( p_oNode && p_oNode.IsDerived( VariableNode ) )
   {
      VariableNode a_oVariableNode = (VariableNode)p_oNode;
      a_nConsumedSlots = a_oVariableNode.Capture.GetConsumedSlotCount();
   }

   int a_nRemainingSlots = 0;

   // These tests determine if we can add any more data capture objects.
   // We can only add more data capture objects if a_nRemainingSlots > 0;

   if( p_oNode.IsDerived( NodeLink ) )
   {
      NodeLink a_oNodeLink = (NodeLink)p_oNode;
      if( !( a_oNodeLink.Capture.Objects.GetCount() ) )
      {
         SpaTypeUtil.GetNodeLinkDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( BooleanNode ) )
   {
      BooleanNode a_oBooleanNode = (BooleanNode)p_oNode;
      if( !a_nConsumedSlots )
      {
         SpaTypeUtil.GetBooleanDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( IntegerNode ) )
   {
      IntegerNode a_oIntegerNode = (IntegerNode)p_oNode;
      if( !a_nConsumedSlots )
      {
         SpaTypeUtil.GetIntegerDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( UnsignedIntegerNode ) )
   {
      UnsignedIntegerNode a_oUnsignedIntegerNode = (UnsignedIntegerNode)p_oNode;
      if( !a_nConsumedSlots )
      {
         SpaTypeUtil.GetUnsignedIntegerDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( FloatNode ) )
   {
      FloatNode a_oFloatNode = (FloatNode)p_oNode;
      if( !a_nConsumedSlots )
      {
         SpaTypeUtil.GetFloatDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( FloatArrayNode ) )
   {
      FloatArrayNode a_oFloatArrayNode = (FloatArrayNode)p_oNode;
      //if( !a_nConsumedSlots )
      {
         SpaTypeUtil.GetFloatDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( UnsignedIntegerVectorNode ) )
   {
      UnsignedIntegerVectorNode a_oUnsignedIntegerVectorNode = (UnsignedIntegerVectorNode)p_oNode;
      if( a_nConsumedSlots < a_oUnsignedIntegerVectorNode.Dimension )
      {
         a_nRemainingSlots = a_oUnsignedIntegerVectorNode.Dimension - a_nConsumedSlots;
      }

      if( a_nRemainingSlots > 0 )
      {
         SpaTypeUtil.GetUnsignedIntegerDataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots > Enum.GLSL_DataType_Vec3() )
      {
         // There are currently no UnsignedIntegerVectorDataCapture types.
      }
   }
   else
   if( p_oNode.IsDerived( IntegerVectorNode ) )
   {
      IntegerVectorNode a_oIntegerVectorNode = (IntegerVectorNode)p_oNode;
      if( a_nConsumedSlots < a_oIntegerVectorNode.Dimension )
      {
         a_nRemainingSlots = a_oIntegerVectorNode.Dimension - a_nConsumedSlots;
      }

      if( a_nRemainingSlots > 0 )
      {
         SpaTypeUtil.GetIntegerDataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots > Enum.GLSL_DataType_Vec3() )
      {
         // There are currently no IntegerVectorDataCapture types.
      }
   }
   else
   if( p_oNode.IsDerived( VectorNode ) )
   {
      VectorNode a_oVectorNode = (VectorNode)p_oNode;
      if( a_nConsumedSlots < a_oVectorNode.Dimension )
      {
         a_nRemainingSlots = a_oVectorNode.Dimension - a_nConsumedSlots;
      }

      if( a_nRemainingSlots > 0 )
      {
         SpaTypeUtil.GetFloatDataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots > Enum.GLSL_DataType_Vec3() )
      {
         SpaTypeUtil.GetVectorDataCaptureTypes( a_oCaptureObjectTypes );
         SpaTypeUtil.GetColorDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( ColorNode ) )
   {
      ColorNode a_oColorNode = (ColorNode)p_oNode;
      if( a_nConsumedSlots < Enum.GLSL_DataType_Vec4() )
      {
         SpaTypeUtil.GetColorDataCaptureTypes( a_oCaptureObjectTypes );
      }
   }
   else
   if( p_oNode.IsDerived( MatrixNode ) )
   {
      MatrixNode a_oMatrixNode = (MatrixNode)p_oNode;
      int a_nScalarDimension = a_oMatrixNode.Cols * a_oMatrixNode.Rows;
      a_nRemainingSlots = a_nScalarDimension - a_nConsumedSlots;

      if( a_nRemainingSlots >= Enum.GLSL_DataType_Float() )
      {
         SpaTypeUtil.GetFloatDataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots > Enum.GLSL_DataType_Vec3() )
      {
         SpaTypeUtil.GetVectorDataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots == Enum.GLSL_DataType_Mat3() )
      {
         SpaTypeUtil.GetMatrix3x3DataCaptureTypes( a_oCaptureObjectTypes );
      }

      if( a_nRemainingSlots == Enum.GLSL_DataType_Mat4() )
      {
         SpaTypeUtil.GetMatrix4x4DataCaptureTypes( a_oCaptureObjectTypes );
      }
   }

   // DEBUG
   //Console.Out( a_nRemainingSlots );
   for( int i = 0; i < a_oCaptureObjectTypes.Count; ++i )
   {
      TypeInformation a_oTypeInfo = (TypeInformation)a_oCaptureObjectTypes.Objects[ i ];
      if( a_oTypeInfo && a_oTypeInfo.IsDerived( DataCapture ) )
      {
         DataCapture a_oCreate = (DataCapture)a_oTypeInfo.CreateObject();
         p_slDataCaptureObjects.Add( a_oCreate.GetType().GetTypeName() );
         p_aiIndices.Add( i );
         delete a_oCreate;
      }
   }
}

function void CreateAddDataCaptureMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   auto TypeArray a_oItemImages;

   DataCapture a_oDataCapture;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( VariableNode ) )
   {
      VariableNode a_oVariableNode = (VariableNode)a_oSelNode;
      CreateDataPackageInfo( a_oVariableNode, a_slTitles, a_aiIndices );
      a_oDataCapture = (DataCapture)a_oVariableNode.Capture.GetFirstObject();
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( NodeLink ) )
   {
      NodeLink a_oNodeLink = (NodeLink)a_oSelNode;
      CreateDataPackageInfo( a_oNodeLink, a_slTitles, a_aiIndices );
      a_oDataCapture = (DataCapture)a_oNodeLink.Capture.GetFirstObject();
   }

   for( int i = 0; i < a_slTitles.GetCount(); ++i )
   {
      auto Type a_oType;
      auto TypeInformation a_oTypeInfo = a_oType.GetType().FindClassType( a_slTitles.Get( i ) );
      a_oItemTypes.Add( a_oTypeInfo );
   }

   if( !( a_slTitles.GetCount() ) )
   {
      a_oItemTypes.Add( null );
      a_slTitles.Add( "No data capture available." );
      a_aiIndices.Add( 0 );
   }
   else
   if( !( a_slTitles.GetCount() ) && a_oDataCapture )
   {
      a_oItemTypes.Add( null );
      a_slTitles.Add( "Data capture slots are full." );
      a_aiIndices.Add( 0 );
   }

   // Do image icons.
   if( a_slTitles.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateRemoveDataCaptureMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto List a_lStringArrayNodes;
   auto StrList a_slTitles;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( StringArrayNode ) )
   {
      StringArrayNode a_oStringArrayNode = (StringArrayNode)a_oSelNode;
      a_oItemTypes.Add( StringArrayNode );
      for( int a_nNode = 0; a_nNode < a_oStringArrayNode.Objects.GetCount(); ++a_nNode )
      {
         // Add a temporary StringNode so we can generate icons.
         StringNode a_oForIcon = new StringNode;
         a_lStringArrayNodes.Add( a_oForIcon );
         a_slTitles.Add( "[" + a_nNode + "]   " + a_oStringArrayNode.Objects.GetAt( a_nNode ) );
         a_aiIndices.Add( a_nNode );
      }
   }

   if( !( a_slTitles.GetCount() ) )
   {
      a_slTitles.Add( "This array has no members." );
      a_aiIndices.Add( 0 );
   }

   // Do image icons.
   auto TypeArray a_oItemImages;
   if( a_lStringArrayNodes.GetCount() )
   {
      SpaMenuUtil.GetIconImages( a_oItemTypes, a_oItemImages );
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slTitles,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void CreateIncludeFilesMenu(

   CommandBar menu,
   string commandGuid,
   string eventHandler

   )
{
   auto TypeArray a_oItemImages;
   auto StrList a_slFilenames;
   auto IntArray a_aiIndices;
   auto TypeInfoArray a_oItemTypes;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   if( a_oSelNode && a_oSelNode.IsDerived( ShaderDeclarationNode ) )
   {
      auto FilePath a_oIncludeFiles = new FilePath( Main.GetShaderIncludePath() );
      a_oIncludeFiles.FindFiles( a_slFilenames, "*.box", true, false );
   }

   if( !( a_slFilenames.GetCount() ) )
   {
      a_slFilenames.Add( "No files found!" );
      a_aiIndices.Add( 0 );
   }
   else
   {
      auto FilePath a_oImagePath;
      a_oImagePath.SetPath( Application.GetApplicationDataPath() + "Icons" );
      a_oImagePath.AppendPath( "create_file_node.bmp" );
      a_oItemImages.Count = a_slFilenames.GetCount();
      for( int i = 0; i < a_slFilenames.GetCount(); ++i )
      {
         a_aiIndices.Add( i );

         Image a_oFileImage = new Image;
         if( !( a_oFileImage.OpenFile( a_oImagePath.GetPath() ) ) )
         {
            delete a_oFileImage;
         }
         else
         {
            a_oItemImages.Objects[ i ] = a_oFileImage;
         }
      }
   }

   SpaMenuUtil.BuildMenuFromIntArray(
      menu,
      0,
      commandGuid,
      Script,
      eventHandler,
      a_slFilenames,
      a_aiIndices,
      a_oItemImages );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void ConfigurePopupItem( CommandItem p_oCommandItem, string p_sCommandItemName )
{
   p_oCommandItem.Text = p_sCommandItemName;
   p_oCommandItem.IsPopup = true;
   p_oCommandItem.ImageIndex = -1;
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void NodeSetParameterFromList_OnShowPopupMenu( CommandBarEvent event )
[HandleEvent="SPA.ShellUIEvents.ShowPopupMenu"]
{
   string a_sMasterMacroGUID = "{878475E4-8A17-4B12-A8D5-94B4869F91A6}";
   Node a_oSelNode;

   ////////////////////////////////////////////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////

   CommandItem a_oTextureSetRenderSize =
      event.Bar.GetItemByText( 0, "TextureNodeSetRenderSize" );

   string a_sTextureRenderSizeMenuName = "&Render Size";

   if( a_oTextureSetRenderSize )
   {
      ConfigurePopupItem( a_oTextureSetRenderSize, a_sTextureRenderSizeMenuName );
   }
   if( event.Bar.Title == a_sTextureRenderSizeMenuName )
   {
      event.Bar.RemoveAllItems();

      CreateRenderSizesPopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "TextureNodeHandleSetRenderSize" );
   }

   ////////////////////////////////////////////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////

   CommandItem a_oGeometryModifierSetTessellationDepth =
      event.Bar.GetItemByText( 0, "GeometryModifierSetTessellationDepth" );

   string a_sGeometryModifierSetTessellationDepthMenuName = "T&essellation";

   if( a_oGeometryModifierSetTessellationDepth )
   {
      ConfigurePopupItem( a_oGeometryModifierSetTessellationDepth,
         a_sGeometryModifierSetTessellationDepthMenuName );
   }
   if( event.Bar.Title == a_sGeometryModifierSetTessellationDepthMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateGeometryModifierTessellationPopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "GeometryModifierHandleSetTessellation" );
   }
   
   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oGeometryModifierSetSize =
      event.Bar.GetItemByText( 0, "GeometryModifierSetSize" );

   string a_sGeometryModifierSetSizeMenuName = "&Size";

   if( a_oGeometryModifierSetSize )
   {
      ConfigurePopupItem( a_oGeometryModifierSetSize,
         a_sGeometryModifierSetSizeMenuName );
   }
   if( event.Bar.Title == "&Size" )
   {
      event.Bar.RemoveAllItems();
      CreateGeometryModifierSizePopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "GeometryModifierHandleSetSize" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oProjectModifierAttributeChannelSelector =
      event.Bar.GetItemByText( 0, "ProjectionModifierAttributeChannelSelector" );

   string a_sProjectModifierAttributeChannelSelectorMenuName = "&Attribute Channel";

   if( a_oProjectModifierAttributeChannelSelector )
   {
      ConfigurePopupItem( a_oProjectModifierAttributeChannelSelector,
         a_sProjectModifierAttributeChannelSelectorMenuName );
   }
   if( event.Bar.Title == a_sProjectModifierAttributeChannelSelectorMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateAttributeChannelSelectorPopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "ProjectionModifierHandleAttributeChannelSelector" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oProjectionModifierTilingSelector =
      event.Bar.GetItemByText( 0, "ProjectionModifierTilingSelector" );

   string a_sProjectionModifierTilingSelectorMenuName = "Te&xture Tiling";

   if( a_oProjectionModifierTilingSelector )
   {
      ConfigurePopupItem( a_oProjectionModifierTilingSelector,
         a_sProjectionModifierTilingSelectorMenuName );
   }
   if( event.Bar.Title == a_sProjectionModifierTilingSelectorMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateTextureAttributeTilingSelectorPopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "ProjectionModifierHandleTilingSelector" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oInstallerDirectiveNodeSetParameter =
      event.Bar.GetItemByText( 0, "InstallerDirectiveNodeSetParameter" );
   bool a_bGenMenu;

   if( Model.GetSelectCount() )
   {
      a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
      InstallerDirectiveNode a_oInstallerDirectiveNode;
      if( a_oSelNode && a_oSelNode.IsDerived( InstallerDirectiveNode ) )
      {
         a_oInstallerDirectiveNode =
         (InstallerDirectiveNode)a_oSelNode;
      }

      if( a_oInstallerDirectiveNode )
      {
         int a_iInstallerSection = a_oInstallerDirectiveNode.GetSection();
         if( a_iInstallerSection == 13 || a_iInstallerSection == 8 )
         {
            a_bGenMenu = true;
         }
      }

      if( a_bGenMenu == false )
      {
         int a_iPlaceHolderIndex =
            event.Bar.GetItemIndex( a_oInstallerDirectiveNodeSetParameter );
         event.Bar.RemoveItem( a_iPlaceHolderIndex );
         event.Bar.RemoveItem( a_iPlaceHolderIndex );

         a_bGenMenu = false;
      }
      else
      {
         if( a_oInstallerDirectiveNodeSetParameter )
         {
            a_oInstallerDirectiveNodeSetParameter.Text = "&Setup Directives";
            a_oInstallerDirectiveNodeSetParameter.IsPopup = true;
            a_oInstallerDirectiveNodeSetParameter.ImageIndex = -1;
         }
         if( event.Bar.Title == "&Setup Directives" )
         {
            event.Bar.RemoveAllItems();
            CreateInstallerDirectiveMenu( event.Bar, a_sMasterMacroGUID,
               "InstallerDirectiveNodeSetParameter", a_oInstallerDirectiveNode );
         }
      }
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oSamplerNodeTypes = event.Bar.GetItemByText( 0, "DisplaySamplerTypes" );

   string a_sSamplerNodeTypesMenuName = "&Sampler Types";

   if( a_oSamplerNodeTypes )
   {
      ConfigurePopupItem( a_oSamplerNodeTypes,
         a_sSamplerNodeTypesMenuName );
   }
   if( event.Bar.Title == a_sSamplerNodeTypesMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateSamplerTypesPopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "HandleDisplaySamplerTypes" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oShaderPragmaDeclarations =
      event.Bar.GetItemByText( 0, "DisplayPragmaDeclarations" );

   string a_sShaderPragmaDeclarationsMenuName = "Pr&agmas";

   if( a_oShaderPragmaDeclarations )
   {
      ConfigurePopupItem( a_oShaderPragmaDeclarations,
         a_sShaderPragmaDeclarationsMenuName );
   }
   if( event.Bar.Title == a_sShaderPragmaDeclarationsMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateShaderPragmaDeclarations(
         event.Bar,
         a_sMasterMacroGUID,
         "HandleDisplayPragmaDeclarations" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oRenderTargetTextureCreate =
      event.Bar.GetItemByText( 0, "RenderTargetTextureCreate" );

   string a_sRenderTargetTextureCreateMenuName = "Add &Render Target Textures";

   if( a_oRenderTargetTextureCreate )
   {
      ConfigurePopupItem( a_oRenderTargetTextureCreate,
         a_sRenderTargetTextureCreateMenuName );
   }
   if( event.Bar.Title == a_sRenderTargetTextureCreateMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateRenderTargetTexturePopupMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "RenderTargetHandleTextureCreate" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oReadSampler = event.Bar.GetItemByText( 0, "ReadSampler" );

   string a_sSamplerMenuName = "Samplers";

   if( a_oReadSampler )
   {
      ConfigurePopupItem( a_oReadSampler, a_sSamplerMenuName );
   }
   if( event.Bar.Title == a_sSamplerMenuName )
   {
      event.Bar.RemoveAllItems();
      ReadSamplerMenu( event.Bar, a_sMasterMacroGUID, "ReadSampler" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oUniformBufferCreateNew =
      event.Bar.GetItemByText( 0, "UniformBufferNodeCreateNew" );

   string a_sBindUniformBufferMenuName = "&Bind Uniform Buffer";

   if( a_oUniformBufferCreateNew )
   {
      ConfigurePopupItem( a_oUniformBufferCreateNew, a_sBindUniformBufferMenuName );
   }
   if( event.Bar.Title == a_sBindUniformBufferMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateUniformBufferNodeMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "UniformBufferNodeHandleCreateNew" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateConstructor =
      event.Bar.GetItemByText( 0, "CreateConstructor" );

   string a_sAddMenuName = "&Constructor";

   if( a_oCreateConstructor )
   {
      ConfigurePopupItem( a_oCreateConstructor, a_sAddMenuName );
   }
   if( event.Bar.Title == a_sAddMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateConstructorMenu( event.Bar, a_sMasterMacroGUID, "CreateConstructor" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oUniformBufferBindNodeAddVariable =
      event.Bar.GetItemByText( 0, "UniformBufferBindNodeAddVariable" );

   string a_sUniformBufferBindNodeAddVariableMenuName = "&Add Member Variable";

   if( a_oUniformBufferBindNodeAddVariable )
   {
      ConfigurePopupItem( a_oUniformBufferBindNodeAddVariable,
         a_sUniformBufferBindNodeAddVariableMenuName );
   }
   if( event.Bar.Title == a_sUniformBufferBindNodeAddVariableMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateAddUniformBufferBindNodeVariableMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "AddUniformBufferBindNodeVariable" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindGlobalVariablesItem =
      event.Bar.GetItemByText( 0, "FindGlobalVariables" );

   string a_sFindGlobalVariablesItemMenuName = "&Global";

   if( a_oFindGlobalVariablesItem )
   {
      ConfigurePopupItem( a_oFindGlobalVariablesItem,
         a_sFindGlobalVariablesItemMenuName );
   }
   if( event.Bar.Title == a_sFindGlobalVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateGlobalDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindGlobalVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindUniformVariablesItem =
      event.Bar.GetItemByText( 0, "FindUniformVariables" );

   string a_sFindUniformVariablesItemMenuName = "&Uniform";

   if( a_oFindUniformVariablesItem )
   {
      ConfigurePopupItem( a_oFindUniformVariablesItem,
         a_sFindUniformVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindUniformVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateUniformDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindUniformVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindLocalVariablesItem =
      event.Bar.GetItemByText( 0, "FindLocalVariables" );

   string a_sFindLocalVariablesItemMenuName = "&Local";

   if( a_oFindLocalVariablesItem )
   {
      ConfigurePopupItem( a_oFindLocalVariablesItem,
         a_sFindLocalVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindLocalVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateLocalDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindLocalVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindInVariablesItem =
      event.Bar.GetItemByText( 0, "FindInVariables" );

   string a_sFindInVariablesItemMenuName = "&In";

   if( a_oFindInVariablesItem )
   {
      ConfigurePopupItem( a_oFindInVariablesItem,
         a_sFindInVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindInVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateInDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindInVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindOutVariablesItem =
      event.Bar.GetItemByText( 0, "FindOutVariables" );

   string a_sFindOutVariablesItemMenuName = "&Out";

   if( a_oFindOutVariablesItem )
   {
      ConfigurePopupItem( a_oFindOutVariablesItem,
         a_sFindOutVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindOutVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateOutDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindOutVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindConstVariablesItem =
      event.Bar.GetItemByText( 0, "FindConstVariables" );

   string a_sFindConstVariablesItemMenuName = "&Const";

   if( a_oFindConstVariablesItem )
   {
      ConfigurePopupItem( a_oFindConstVariablesItem,
         a_sFindConstVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindConstVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateConstDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindConstVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindMatrixColVariablesItem =
      event.Bar.GetItemByText( 0, "FindMatrixColVariables" );

   string a_sFindMatrixColVariablesItemMenuName = "&Matrix Column";

   if( a_oFindMatrixColVariablesItem )
   {
      ConfigurePopupItem( a_oFindMatrixColVariablesItem,
         a_sFindMatrixColVariablesItemMenuName );
   }

   if( event.Bar.Title == a_sFindMatrixColVariablesItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateMatrixColDataSourceMenu( event.Bar, a_sMasterMacroGUID, "FindMatrixColVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   string a_sStructMenuName = "Struct Variable";
   if( Model.GetSelectCount() )
   {
      a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( StructInstanceNode ) )
      {
         a_sStructMenuName = "&Select Struct Declaration";
      }
   }

   CommandItem a_oCreateStructInstanceVariableItem =
      event.Bar.GetItemByText( 0, "CreateStructInstanceVariable" );

   if( a_oCreateStructInstanceVariableItem )
   {
      ConfigurePopupItem( a_oCreateStructInstanceVariableItem,
         a_sStructMenuName );
   }
   if( event.Bar.Title == a_sStructMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructInstanceVariable" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateStructInstanceArrayVariableItem =
      event.Bar.GetItemByText( 0, "CreateStructInstanceArrayVariable" );

   string a_sStructInstanceArrayVariableMenuName = "StructArray Variable";

   if( a_oCreateStructInstanceArrayVariableItem )
   {
      ConfigurePopupItem( a_oCreateStructInstanceArrayVariableItem,
         a_sStructInstanceArrayVariableMenuName );
   }
   if( event.Bar.Title == a_sStructInstanceArrayVariableMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructInstanceArrayVariable" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateStructInstanceDeclarationItem =
      event.Bar.GetItemByText( 0, "CreateStructInstanceDeclaration" );

   string a_sCreateStructInstanceDeclarationName = "Struct";

   if( a_oCreateStructInstanceDeclarationItem )
   {
      ConfigurePopupItem( a_oCreateStructInstanceDeclarationItem,
         a_sCreateStructInstanceDeclarationName );
   }
   if( event.Bar.Title == a_sCreateStructInstanceDeclarationName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructInstanceDeclaration" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateStructInstanceArrayDeclarationItem =
      event.Bar.GetItemByText( 0, "CreateStructInstanceArrayDeclaration" );

   string a_sCreateStructInstanceArrayDeclarationName = "StructArray";

   if( a_oCreateStructInstanceArrayDeclarationItem )
   {
      ConfigurePopupItem( a_oCreateStructInstanceArrayDeclarationItem,
         a_sCreateStructInstanceArrayDeclarationName );
   }
   if( event.Bar.Title == a_sCreateStructInstanceArrayDeclarationName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructInstanceArrayDeclaration" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateStructFunctionDeclarationItem =
      event.Bar.GetItemByText( 0, "CreateStructFunctionDeclaration" );

   string a_sCreateStructFunctionDeclarationName = "Struct";

   if( a_oCreateStructFunctionDeclarationItem )
   {
      ConfigurePopupItem( a_oCreateStructFunctionDeclarationItem,
         a_sCreateStructFunctionDeclarationName );
   }
   if( event.Bar.Title == a_sCreateStructFunctionDeclarationName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructFunctionDeclaration" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateStructArrayFunctionDeclarationItem =
      event.Bar.GetItemByText( 0, "CreateStructArrayFunctionDeclaration" );

   string a_sCreateStructArrayFunctionDeclarationName = "StructArray";

   if( a_oCreateStructArrayFunctionDeclarationItem )
   {
      ConfigurePopupItem( a_oCreateStructArrayFunctionDeclarationItem,
         a_sCreateStructArrayFunctionDeclarationName );
   }
   if( event.Bar.Title == a_sCreateStructArrayFunctionDeclarationName )
   {
      event.Bar.RemoveAllItems();
      CreateStructDeclarationDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateStructArrayFunctionDeclaration" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindSamplerVariablesItem =
      event.Bar.GetItemByText( 0, "FindSamplerVariables" );

   string a_sFindSamplerVariablesMenuName = "&Sampler";

   if( a_oFindSamplerVariablesItem )
   {
      ConfigurePopupItem( a_oFindSamplerVariablesItem,
         a_sFindSamplerVariablesMenuName );
   }
   if( event.Bar.Title == a_sFindSamplerVariablesMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateSamplerDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "FindSamplerVariables" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCreateUniformBufferBindItem =
      event.Bar.GetItemByText( 0, "CreateUniformBufferBind" );

   string a_sCreateUniformBufferBindMenuName = "Bind Uniform Buffer";

   if( a_oCreateUniformBufferBindItem )
   {
      ConfigurePopupItem( a_oCreateUniformBufferBindItem,
         a_sCreateUniformBufferBindMenuName );
   }
   if( event.Bar.Title == a_sCreateUniformBufferBindMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateUniformBufferBindDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "CreateUniformBufferBind" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindIntegralVariablesItem =
      event.Bar.GetItemByText( 0, "FindIntegralTypes" );

   string a_sFindIntegralVariablesMenuName = "Array Access";

   if( a_oFindIntegralVariablesItem )
   {
      ConfigurePopupItem( a_oFindIntegralVariablesItem,
         a_sFindIntegralVariablesMenuName );
   }
   if( event.Bar.Title == a_sFindIntegralVariablesMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateIntegralTypeDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "FindIntegralTypes" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oFindConstIntegralVariablesItem =
      event.Bar.GetItemByText( 0, "FindConstIntegralTypes" );

   string a_sFindConstIntegralVariablesMenuName = "Array Sizing";

   if( a_oFindConstIntegralVariablesItem )
   {
      ConfigurePopupItem( a_oFindConstIntegralVariablesItem,
         a_sFindConstIntegralVariablesMenuName );
   }
   if( event.Bar.Title == a_sFindConstIntegralVariablesMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateConstIntegralTypeDataSourceMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "FindConstIntegralTypes" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oMatrixNodeSetDimension =
      event.Bar.GetItemByText( 0, "MatrixNodeSetDimension" );

   string a_sMatrixDimMenuName = "&Dimension";

   if( a_oMatrixNodeSetDimension )
   {
      ConfigurePopupItem( a_oMatrixNodeSetDimension, a_sMatrixDimMenuName );
   }
   if( event.Bar.Title == a_sMatrixDimMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateSetMatrixNodeDimensionMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "SetMatrixDimension" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oCommandRepNodeSetStatus =
      event.Bar.GetItemByText( 0, "SetCommandRepNodeStatus" );

   string a_sCommandRepStatusMenuName = "Command &Status";

   if( a_oCommandRepNodeSetStatus )
   {
      ConfigurePopupItem( a_oCommandRepNodeSetStatus, a_sCommandRepStatusMenuName );
   }
   if( event.Bar.Title == a_sCommandRepStatusMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateCommandRepNodeStatusMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "SetCommandRepNodeStatusItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oTypeRepNodeSetStatus =
      event.Bar.GetItemByText( 0, "SetTypeRepNodeStatus" );

   string a_sTypeRepStatusMenuName = "Type &Status";

   if( a_oTypeRepNodeSetStatus )
   {
      ConfigurePopupItem( a_oTypeRepNodeSetStatus, a_sTypeRepStatusMenuName );
   }
   if( event.Bar.Title == a_sTypeRepStatusMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateTypeRepNodeStatusMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "SetTypeRepNodeStatusItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oSetQualifierItem = event.Bar.GetItemByText( 0, "SetQualifier" );

   string a_sQualifierMenuName = "&Qualifier";

   if( a_oSetQualifierItem )
   {
      ConfigurePopupItem( a_oSetQualifierItem, a_sQualifierMenuName );
   }
   if( event.Bar.Title == a_sQualifierMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateQualifierMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "GlslQualifierNodeSetQualifier" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oAddQualifierItem =
      event.Bar.GetItemByText( 0, "AddQualifierItem" );

   string a_sAddQualifierItemMenuName = "Add &Qualifier";

   if( a_oAddQualifierItem )
   {
      ConfigurePopupItem( a_oAddQualifierItem, a_sAddQualifierItemMenuName );
   }
   if( event.Bar.Title == a_sAddQualifierItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateAddQualifierItemMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "AddQualifierItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oRemoveQualifierItem =
      event.Bar.GetItemByText( 0, "RemoveQualifierItem" );

   string a_sRemoveQualifierItemMenuName = "Remove Qualifier";

   if( a_oRemoveQualifierItem )
   {
      ConfigurePopupItem( a_oRemoveQualifierItem, a_sRemoveQualifierItemMenuName );
   }
   if( event.Bar.Title == a_sRemoveQualifierItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateRemoveQualifierItemMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "RemoveQualifierItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oAddSubroutineItem =
      event.Bar.GetItemByText( 0, "AddSubroutineItem" );

   string a_sAddSubroutineItemMenuName = "Add &Subroutine";

   if( a_oAddSubroutineItem )
   {
      ConfigurePopupItem(
         a_oAddSubroutineItem,
         a_sAddSubroutineItemMenuName );
   }
   if( event.Bar.Title == a_sAddSubroutineItemMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateAddSubroutineItemMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "AddSubroutineItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oSetPropertyItemType =
      event.Bar.GetItemByText( 0, "SetPropertyItemType" );

   string a_sPropertyItemTypeMenuName = "Property Item &Type";

   if( a_oSetPropertyItemType )
   {
      ConfigurePopupItem( a_oSetPropertyItemType, a_sPropertyItemTypeMenuName );
   }
   if( event.Bar.Title == a_sPropertyItemTypeMenuName )
   {
      event.Bar.RemoveAllItems();
      CreatePropertyItemTypeMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "DataMemberNodeSetPropertyItemType" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oArrayPropertyItem =
      event.Bar.GetItemByText( 0, "EnumerateArrayItems" );

   string a_sArrayPropertyItem = "&Array Item Properties...";

   if( a_oArrayPropertyItem )
   {
      ConfigurePopupItem( a_oArrayPropertyItem, a_sArrayPropertyItem );
   }
   if( event.Bar.Title == a_sArrayPropertyItem )
   {
      event.Bar.RemoveAllItems();
      CreateArrayMemberPropertiesMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "ArrayMemberDisplayProperties" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oArrayRemoveMemberPropertyItem =
      event.Bar.GetItemByText( 0, "RemoveArrayItem" );

   string a_sArrayRemovePropertyItem = "Remove Member";

   if( a_oArrayRemoveMemberPropertyItem )
   {
      ConfigurePopupItem( a_oArrayRemoveMemberPropertyItem,
         a_sArrayRemovePropertyItem );
   }
   if( event.Bar.Title == a_sArrayRemovePropertyItem )
   {
      event.Bar.RemoveAllItems();
      CreateArrayMemberPropertiesMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "ArrayMemberRemoveItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oStringArrayMemberRemoveItem =
      event.Bar.GetItemByText( 0, "RemoveStringArrayItem" );

   string a_sStringArrayMemberRemoveItem = "Remove String";

   if( a_oStringArrayMemberRemoveItem )
   {
      ConfigurePopupItem( a_oStringArrayMemberRemoveItem,
         a_sStringArrayMemberRemoveItem );
   }
   if( event.Bar.Title == a_sStringArrayMemberRemoveItem )
   {
      event.Bar.RemoveAllItems();
      CreateStringArrayMemberPropertiesMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "RemoveStringArrayItem" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oStringArrayInsertBefore =
      event.Bar.GetItemByText( 0, "StringArrayInsertBefore" );

   string a_sStringArrayInsertBeforeMenuName = "Insert Before";

   if( a_oStringArrayInsertBefore )
   {
      ConfigurePopupItem( a_oStringArrayInsertBefore,
         a_sStringArrayInsertBeforeMenuName );
   }
   if( event.Bar.Title == a_sStringArrayInsertBeforeMenuName )
   {
      event.Bar.RemoveAllItems();
      CreateStringArrayMemberPropertiesMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "StringArrayInsertBefore" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oStringArrayInsertAfter =
      event.Bar.GetItemByText( 0, "StringArrayInsertAfter" );

   string a_sStringArrayInsertAfter = "Insert After";

   if( a_oStringArrayInsertAfter )
   {
      ConfigurePopupItem( a_oStringArrayInsertAfter, a_sStringArrayInsertAfter );
   }
   if( event.Bar.Title == a_sStringArrayInsertAfter )
   {
      event.Bar.RemoveAllItems();
      CreateStringArrayMemberPropertiesMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "StringArrayInsertAfter" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oAddDataCaptureObject =
      event.Bar.GetItemByText( 0, "AddDataCaptureObject" );

   string a_sAddDataCaptureObject = "Add Data Capture";

   if( a_oAddDataCaptureObject )
   {
      ConfigurePopupItem( a_oAddDataCaptureObject, a_sAddDataCaptureObject );
   }
   if( event.Bar.Title == a_sAddDataCaptureObject )
   {
      event.Bar.RemoveAllItems();
      CreateAddDataCaptureMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "AddDataCaptureObject" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oRemoveDataCaptureObject =
      event.Bar.GetItemByText( 0, "RemoveDataCaptureObject" );

   string a_sRemoveDataCaptureObject = "Insert After";

   if( a_oRemoveDataCaptureObject )
   {
      ConfigurePopupItem( a_oRemoveDataCaptureObject, a_sRemoveDataCaptureObject );
   }
   if( event.Bar.Title == a_sRemoveDataCaptureObject )
   {
      event.Bar.RemoveAllItems();
      CreateRemoveDataCaptureMenu(
         event.Bar,
         a_sMasterMacroGUID,
         "RemoveDataCaptureObject" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oListIncludeFiles =
      event.Bar.GetItemByText( 0, "ListIncludeFiles" );

   string a_sListIncludeFiles = "Include";

   if( a_oListIncludeFiles )
   {
      ConfigurePopupItem( a_oListIncludeFiles, a_sListIncludeFiles );
   }
   if( event.Bar.Title == a_sListIncludeFiles )
   {
      event.Bar.RemoveAllItems();
      CreateIncludeFilesMenu( event.Bar, a_sMasterMacroGUID, "ListIncludeFiles" );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   auto List a_lLayoutQualifiers;
   auto StrList a_slItemNames;
   CommandItem a_oQualifierValue0 =
      event.Bar.GetItemByText( 0, "SetQualifierValue0" );

   if( a_oQualifierValue0 )
   {
      int a_nBaseQualifierIndex = event.Bar.GetItemIndex( a_oQualifierValue0 );
      event.Bar.RemoveItem( a_nBaseQualifierIndex );
      auto StrList a_slQualifierNames;

      if( Model.GetSelectCount() )
      {
         a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
      }

      string a_sQualifierName;
      auto GlslQualifierManager a_oGlslQualifierManager;
      QualifierList a_oQualifierList;
      a_oQualifierList = a_oGlslQualifierManager.GetQualifierList( a_oSelNode );

      if( a_oQualifierList )
      {
         a_oGlslQualifierManager.GetLayoutQualifiers(
            a_oQualifierList,
            a_lLayoutQualifiers );
      }

      bool a_bQualifierHasUserDefinedValue;
      for( int f = 0; f < a_lLayoutQualifiers.GetCount(); ++f )
      {
         GlslQualifierNode a_oGlslQualifierNode =
            (GlslQualifierNode)a_lLayoutQualifiers.Get( f );
         int a_nCurrentQualifier = a_oGlslQualifierNode.Qualifier;
         if( a_oGlslQualifierNode.HasIntegerValue() )
         {
            a_bQualifierHasUserDefinedValue = true;
         }
      }

      if( !( a_lLayoutQualifiers.GetCount() ) || !a_bQualifierHasUserDefinedValue )
      {
         event.Bar.RemoveItem( a_nBaseQualifierIndex );
      }
      else
      {
         int a_iAddedItem;
         for( int d = 0; d < a_lLayoutQualifiers.GetCount(); ++d )
         {
            GlslQualifierNode a_oGlslQualifierNode =
               (GlslQualifierNode)a_lLayoutQualifiers.Get( d );
            int a_nCurrentQualifier = a_oGlslQualifierNode.Qualifier;
            if( a_oGlslQualifierNode.HasIntegerValue() )
            {
               CommandItem a_oItem = event.Bar.Items[ ( a_nBaseQualifierIndex - 1 ) + d ];
               a_slItemNames.Add( a_oGlslQualifierNode.GetQualifierName() );
               if( !( a_oItem.IsSeparator ) )
               {
                  ++a_iAddedItem;
               }
            }
         }

         int a_nAddItemCount = a_lLayoutQualifiers.GetCount() - a_iAddedItem;
         for( int i = 0; i < a_nAddItemCount; ++i )
         {
            GlslQualifierNode a_oGlslQualifierNode =
               (GlslQualifierNode)a_lLayoutQualifiers.Get( i );
            int a_nCurrentQualifier = a_oGlslQualifierNode.Qualifier;
            if( a_oGlslQualifierNode.HasIntegerValue() )
            {
               a_sQualifierName = a_oGlslQualifierNode.GetQualifierName();

               // Insert an item for the popup then insert the placeholder item *on* the popup.
               event.Bar.InsertPopup( a_nBaseQualifierIndex + i, a_sQualifierName, -1 );
               CommandItem a_oInputPopup = event.Bar.Items[ a_nBaseQualifierIndex + i ];
               a_oInputPopup.PopupBar.InsertItem( 0, a_sQualifierName, a_sMasterMacroGUID, -1, true, false );
            }
         }
      }
   }

   if( event.Bar.Items.Length == 1 )
   {
      if( Model.GetSelectCount() )
      {
         a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
      }

      auto GlslQualifierManager a_oGlslQualifierManager;
      QualifierList a_oQualifierList;
      a_oQualifierList = a_oGlslQualifierManager.GetQualifierList( a_oSelNode );

      if( a_oQualifierList )
      {
         a_oGlslQualifierManager.GetLayoutQualifiers(
            a_oQualifierList,
            a_lLayoutQualifiers );
      }

      CommandItem a_oItem = event.Bar.Items[0];

      for( int d = 0; d < a_lLayoutQualifiers.GetCount(); ++d )
      {
         GlslQualifierNode a_oGlslQualifierNode = (GlslQualifierNode)a_lLayoutQualifiers.Get( d );
         int a_nCurrentQualifier = a_oGlslQualifierNode.Qualifier;
         if( a_oGlslQualifierNode.HasIntegerValue() )
         {
            if( a_oItem.Text == a_oGlslQualifierNode.GetQualifierName() )
            {
               event.Bar.RemoveAllItems();
               CreateConstIntegralTypeDataSourceMenu(
                  event.Bar,
                  a_sMasterMacroGUID,
                  "SetQualifierValue" + d );
               event.Bar.InsertItem( 0, "None", "{E3BB04A8-44A7-4EDA-9C41-C71D067F5599}", -1, true, false );
            }
         }
      }
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem a_oExpressionArrayIndex0 =
      event.Bar.GetItemByText( 0, "SetExpressionArrayIndex0" );
   int a_nArrayPlaceHolderIndex0 = event.Bar.GetItemIndex( a_oExpressionArrayIndex0 );

   bool a_bRemovedAll = false;
   bool a_bRemovedItem0 = false;
   bool a_bHasArrayVariable;
   auto List a_lLinkNodes;
   auto IntArray a_aiArraySizes;
   auto IntArray a_aiArrayElements;
   auto StrList a_slCodeObjectNames;

   if( a_oSelNode && a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oVariableExpressionNode =
         (VariableExpressionNode)a_oSelNode;

      a_oVariableExpressionNode.NodeSelector.GetInfo(
         a_lLinkNodes,
         a_aiArraySizes,
         a_aiArrayElements,
         a_slCodeObjectNames );

      if( !( a_oVariableExpressionNode.IsAnyArrayExpressionType() ) )
      {
         for( int a_nIndex = 0; a_nIndex < a_aiArraySizes.Count; ++a_nIndex )
         {
            if( a_aiArraySizes.Objects[ a_nIndex ] != 0 )
            {
               a_bHasArrayVariable = true;
            }
         }

         if( !a_bHasArrayVariable )
         {
            event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         }

      }
      else
      {
         event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         //event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         //event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         //event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         a_bRemovedAll = true;
      }
   }

   string a_sVariableName0;
   a_bRemovedItem0 = false;
   if( a_oSelNode && a_oSelNode.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oVariableExpressionNode =
         (VariableExpressionNode)a_oSelNode;

      if( a_oVariableExpressionNode.GetLinkCount() )
      {
         if( a_aiArraySizes.Objects[ 0 ] != 0 )
         {
            a_sVariableName0 = a_slCodeObjectNames.GetAt( 0 ) + "[]";
         }
         else
         {
            event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
            a_bRemovedItem0 = true;
         }
      }
      else
      {
         event.Bar.RemoveItem( a_nArrayPlaceHolderIndex0 );
         a_bRemovedItem0 = true;
      }
   }

   if( a_oExpressionArrayIndex0 && !a_bRemovedItem0 && !a_bRemovedAll && a_bHasArrayVariable )
   {
      ConfigurePopupItem( a_oExpressionArrayIndex0, a_sVariableName0 );
   }

   if( event.Bar.Title == a_sVariableName0 && !a_bRemovedItem0 && !a_bRemovedAll && a_bHasArrayVariable )
   {
      event.Bar.RemoveAllItems();
      CreateIntegralTypeDataSourceMenu( event.Bar, a_sMasterMacroGUID, "SetArrayIndex0" );
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void TextureNodeHandleSetRenderSize(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Graph.TextureSetRenderingSize( Math.Pow( 2, index + 1 ) );
}

function void TextureNodeHandleSetRenderSize_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Texture,
      "Set the texture rendering size" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierHandleSetTessellation(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Graph.GeometryModifierSetTessellation( index );
}

function void GeometryModifierHandleSetTessellation_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Modifier,
      "Set the modifier tessellation to " + index );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void GeometryModifierHandleSetSize(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Graph.GeometryModifierSetSize( index );
}

function void GeometryModifierHandleSetSize_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Modifier,
      "Set the modifier size to " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ProjectionModifierHandleAttributeChannelSelector(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Graph.ProjectionModifierSetActiveChannel( index );
}

function void ProjectionModifierHandleAttributeChannelSelector_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Modifier,
      "Set the projection modifier to use attribute channel " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ProjectionModifierHandleTilingSelector(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode(i).GetNode();
      if( a_oNode.IsDerived( PlanarProjectTextureModifier ) )
      {
         PlanarProjectTextureModifier ppt =
            (PlanarProjectTextureModifier)Model.EditNode( a_oNode );
         Graph.PlanarProjectTextureModifierSetTiling( "set", 0, 0, 0, index,
            0, 0, 0, index, 0, ppt );
      }
   }
}

function void ProjectionModifierHandleTilingSelector_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Modifier,
      "Tiles the texture coordinate attributes every " + index + " units " );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void InstallerDirectiveNodeSetParameter(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   InstallerDirectiveNode a_oInstallerDirectiveNode =
      (InstallerDirectiveNode)Model.GetFirstSelectedNode().GetNode();
   int a_iInstallerSection = a_oInstallerDirectiveNode.GetSection();
   a_oInstallerDirectiveNode =
      (InstallerDirectiveNode)Model.EditNode( a_oInstallerDirectiveNode );
   a_oInstallerDirectiveNode.Name = title;

   if( a_iInstallerSection == 13 )
   {
      a_oInstallerDirectiveNode.Setup.Directive = title;
      // Make sure we clear the value in case this
      // command is applied to an existing node.
      a_oInstallerDirectiveNode.Setup.DirectiveValue = "";
   }
   else
   if( a_iInstallerSection == 8 )
   {
      a_oInstallerDirectiveNode.LangOptions.Directive = title;
      a_oInstallerDirectiveNode.LangOptions.DirectiveValue = "";
   }
}

function void InstallerDirectiveNodeSetParameter_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, InstallerDirectiveNode,
      "Sets the parameter to " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void HandleDisplaySamplerTypes(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   SpaVariableUtil.SetSelectedSamplerNodeTypes( index );
}

function void HandleDisplaySamplerTypes_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, SamplerNode,
      "Sets the type to " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void HandleDisplayPragmaDeclarations(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   for( int sel = 0; sel < Model.GetSelectCount(); ++sel )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( sel ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( ShaderPragmaNode ) )
      {
         ShaderPragmaNode a_oShaderPragmaNode = (ShaderPragmaNode)Model.EditNode( a_oSelNode );
         a_oShaderPragmaNode.Pragma = index;
         a_oShaderPragmaNode.Name = a_oShaderPragmaNode.GetDeclarationString();
      }
   }
}

function void HandleDisplayPragmaDeclarations_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, ShaderPragmaNode,
      "Sets the pragma to " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void RenderTargetHandleTextureCreate(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Graph.CreateRenderTargetTexture( 3, index, 1024, 1024, title );
}

function void RenderTargetHandleTextureCreate_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Modifier,
      "Creates a render target texture: " + title );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void UniformBufferNodeHandleCreateNew(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string p_sNodeName,
   int index

   )
{
   Program a_oProgram = (Program)Model.FirstGetSelectedNode().GetNode();
   auto List a_lUniformBufferNodes;
   Graph.GetNodesFromDatabase( Model, a_lUniformBufferNodes, UniformBufferNode );
   Graph.GetLinkNodesFromDatabase( Model, a_lUniformBufferNodes, UniformBufferNode );

   for( int children = 0; children < a_lUniformBufferNodes.GetCount(); ++children )
   {
      Node a_oIsTarget = (Node)a_lUniformBufferNodes.Get( children );
      if( a_oIsTarget.Name == p_sNodeName )
      {
         UniformBufferBindNode a_oUniformBufferBindNode = new UniformBufferBindNode;
         a_oUniformBufferBindNode.Name = p_sNodeName;
         a_oUniformBufferBindNode.BufferLink = a_oIsTarget;

         auto List a_lUniformBufferBindNodes;
         Graph.GetNodesFromDatabase( a_oProgram, a_lUniformBufferBindNodes,
            UniformBufferBindNode );
            
         for( int slot = 0; slot < a_lUniformBufferBindNodes.GetCount(); ++slot )
         {
            UniformBufferBindNode a_oRenumberUniformBufferBind =
               (UniformBufferBindNode)a_lUniformBufferBindNodes.Get( slot );
            a_oRenumberUniformBufferBind.SlotIndex = slot;
         }

         a_oUniformBufferBindNode.SlotIndex = a_lUniformBufferBindNodes.GetCount();
         Model.AddNode( a_oUniformBufferBindNode, a_oProgram, -1 );
      }
   }
}

function void UniformBufferNodeHandleCreateNew_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, Program,
      "Creates a new UniformBufferBindNode that references an existing UniformBufferNode" );
   if( Model.GetSelectCount() > 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single Program" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ReadSampler(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( node.IsDerived( SamplerNode ) ) )
   {
      return;
   }

   MainFunctionNode a_oMainFunctionNode =
      (MainFunctionNode)Model.GetFirstSelectedNode().GetNode();

   if( !a_oMainFunctionNode )
   {
      return;
   }

   bool a_bNewVariable;
   string a_sCreateInfo = "Would you like to declare this expression with a new variable? " +
      "If you choose yes, you will be prompted to enter the variable name.";
   string a_sNewName;
   if( Application.MessageBox( 1, a_sCreateInfo, "INFO" ) )
   {
      a_bNewVariable = true;
   }

   if( a_bNewVariable )
   {
      a_sNewName = "albedo";
   }

   DynamicSamplerNode a_oDynamicSamplerNode = (DynamicSamplerNode)node;
   DeclarationNode a_oDeclarationNode = new DeclarationNode;
   a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Sampler();

   Create.CreateDeclarationForSampler(
      a_oDeclarationNode,
      a_oDynamicSamplerNode,
      a_bNewVariable,
      a_sNewName );

   string a_sSamplerExpressionName;
   if( a_oDynamicSamplerNode.SamplerType == Enum.Sampler2D() )
   {
      a_sSamplerExpressionName = "Sampler2D Expression";
   }
   else
   if( a_oDynamicSamplerNode.SamplerType == Enum.Sampler2DArray() )
   {
      a_sSamplerExpressionName = "Sampler2DArray Expression";
   }
   else
   if( a_oDynamicSamplerNode.SamplerType == Enum.SamplerCube() )
   {
      a_sSamplerExpressionName = "SamplerCube Expression";
   }
   else
   if( a_oDynamicSamplerNode.SamplerType == Enum.Sampler3D() )
   {
      a_sSamplerExpressionName = "Sampler3D Expression";
   }

   a_oDeclarationNode.Name = a_sSamplerExpressionName;
   if( !( Model.AddNode( a_oDeclarationNode, a_oMainFunctionNode, -1 ) ) )
   {
      delete a_oDeclarationNode;
   }
}

function void ReadSampler_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, MainFunctionNode,
      "Samples textures that have been bound to SamplerNode declared above." );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateConstructor_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, VariableExpressionNode,
      "Creates constructor expressions" );

   string a_sConstructorAvailableRight =
      "Constructor expressions only available on the right side";
   string a_sAlreadyHasSubExpression =
      "This expression already has a sub-expression or constructor expression";
   string a_sConstructorNotAvailable =
      "You cannot create a constructor for a function prototype";
   string a_sLeftExpressionMustBeStruct =
      "The left expression must exist and must be a StructInstanceNode";
   string a_sLeftExpressionRequiresStruct =
      "The left expression must have a data source of type StructNode " +
      "before you can create a constructor";

   CommandPresentationModuleInfo commandInfo = event.Info;
   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node" );
   }

   VariableExpressionNode a_oSelectedNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();

   if( a_oSelectedNode.IsAssignmentOperand() && a_oSelectedNode.IsLeftOperand() )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( a_sConstructorAvailableRight );
   }
   else
   if( a_oSelectedNode.ChildCount > 0 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( a_sAlreadyHasSubExpression );
   }
   else
   if(   a_oSelectedNode.IsFunctionDeclaration() ||
         a_oSelectedNode.IsFunctionPrototype() )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( a_sConstructorNotAvailable );
      return;
   }
   else
   if( a_oSelectedNode.IsDerived( StructExpressionNode ) )
   {
      StructExpressionNode a_oStructExpressionNode =
         (StructExpressionNode)a_oSelectedNode;

      if( a_oStructExpressionNode.IsExpression() )
      {
         Node a_oNode = (Node)a_oStructExpressionNode.GetOppositeExpression();
         if( !a_oNode || !( a_oNode.IsDerived( StructInstanceNode ) ) )
         {
            commandInfo.SetEnabled( false );
            commandInfo.Status.SetHint( a_sLeftExpressionMustBeStruct );
            return;
         }

         StructInstanceNode a_oStructInstanceNode = (StructInstanceNode)a_oNode;
         if( !( a_oStructInstanceNode.FindStructDeclaration() ) )
         {
            commandInfo.SetEnabled( false );
            commandInfo.Status.SetHint( a_sLeftExpressionRequiresStruct );
         }
      }
   }
}

function void CreateConstructor(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title, int type

   )
{
   Group a_oSelNode = (Group)Model.GetFirstSelectedNode().GetNode();
   auto StrList a_slParamNames;
   auto TypeInfoArray a_aoTypeInfoArray;
   auto IntArray a_aiColDim;
   auto IntArray a_aiRowDim;
   auto IntArray a_aiArrayDim;
   int a_nStructInstanceArrayDim = 0;

   if( title == "New Bool Array Constructor" )
   {
      BooleanArrayExpressionNode a_oBooleanArrayExpressionNode =
         (BooleanArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oBooleanArrayExpressionNode.Count;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      }
   }
   else
   if( title == "bvec2( bool, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "bvec3( bool, bool, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "bvec3( bvec2, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "bvec2" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "bvec4( bvec2, bool, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "bvec2" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "bvec4( bvec2, bvec2 )" )
   {
      a_aoTypeInfoArray.Add( BooleanVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "bvec2" );
      a_aoTypeInfoArray.Add( BooleanVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "bvec2" );
   }
   else
   if( title == "bvec4( bvec3, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanVectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "bvec3" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "bvec4( bool, bool, bool, bool )" )
   {
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
      a_aoTypeInfoArray.Add( BooleanExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "bool" );
   }
   else
   if( title == "New Bool Vector Array Constructor" )
   {
      BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
         (BooleanVectorArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oBooleanVectorArrayExpressionNode.Count;
      int a_nVectorDimension = a_oBooleanVectorArrayExpressionNode.Dimension;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( BooleanVectorExpressionNode );
         a_aiColDim.Add( a_nVectorDimension );
         a_slParamNames.Add( "bvec" + a_nVectorDimension );
      }
   }
   else
   if( title == "New Int Array Constructor" )
   {
      IntegerArrayExpressionNode a_oIntegerArrayExpressionNode =
         (IntegerArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oIntegerArrayExpressionNode.Count;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( IntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "int" );
      }
   }
   else
   if( title == "New Int Vector Array Constructor" )
   {
      IntegerVectorArrayExpressionNode a_oIntegerVectorArrayExpressionNode =
         (IntegerVectorArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oIntegerVectorArrayExpressionNode.Count;
      int a_nVectorDimension = a_oIntegerVectorArrayExpressionNode.Dimension;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( IntegerVectorExpressionNode );
         a_aiColDim.Add( a_nVectorDimension );
         a_slParamNames.Add( "ivec" + a_nVectorDimension );
      }
   }
   else
   if( title == "ivec2( int, int )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( IntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "int" );
      }
   }
   else
   if( title == "ivec3( int, int, int )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( IntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "int" );
      }
   }
   else
   if( title == "ivec3( ivec2, int )" )
   {
      a_aoTypeInfoArray.Add( IntegerVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "ivec2" );
      a_aoTypeInfoArray.Add( IntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "int" );
   }
   else
   if( title == "ivec4( ivec2, int, int )" )
   {
      a_aoTypeInfoArray.Add( IntegerVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "ivec2" );
      a_aoTypeInfoArray.Add( IntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "int" );
      a_aoTypeInfoArray.Add( IntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "int" );
   }
   else
   if( title == "ivec4( ivec2, ivec2 )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( IntegerVectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "ivec2" );
      }
   }
   else
   if( title == "ivec4( ivec3, int )" )
   {
      a_aoTypeInfoArray.Add( IntegerVectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "ivec3" );
      a_aoTypeInfoArray.Add( IntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "int" );
   }
   else
   if( title == "ivec4( int, int, int, int )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( IntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "int" );
      }
   }

   else
   if( title == "New Uint Array Constructor" )
   {
      UnsignedIntegerArrayExpressionNode a_oUnsignedIntegerArrayExpressionNode =
         (UnsignedIntegerArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oUnsignedIntegerArrayExpressionNode.Count;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "uint" );
      }
   }
   else
   if( title == "uvec2( uint, uint )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "uint" );
      }
   }
   else
   if( title == "uvec3( uint, uint, uint )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "uint" );
      }
   }
   else
   if( title == "uvec3( uvec2, uint )" )
   {
      a_aoTypeInfoArray.Add( UnsignedIntegerVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "uvec2" );
      a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "uint" );
   }
   else
   if( title == "uvec4( uvec2, uint, uint )" )
   {
      a_aoTypeInfoArray.Add( UnsignedIntegerVectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "uvec2" );
      a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "uint" );
      a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "uint" );
   }
   else
   if( title == "uvec4( uvec2, uvec2 )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerVectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "uvec2" );
      }
   }
   else
   if( title == "uvec4( uvec3, uint )" )
   {
      a_aoTypeInfoArray.Add( UnsignedIntegerVectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "uvec3" );
      a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "uint" );
   }
   else
   if( title == "uvec4( uint, uint, uint, uint )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "uint" );
      }
   }
   else
   if( title == "New Uint Vector Array Constructor" )
   {
      UnsignedIntegerVectorArrayExpressionNode a_oUnsignedIntegerVectorArrayExpressionNode =
         (UnsignedIntegerVectorArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oUnsignedIntegerVectorArrayExpressionNode.Count;
      int a_nVectorDimension = a_oUnsignedIntegerVectorArrayExpressionNode.Dimension;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( UnsignedIntegerVectorExpressionNode );
         a_aiColDim.Add( a_nVectorDimension );
         a_slParamNames.Add( "uvec" + a_nVectorDimension );
      }
   }
   else
   if( title == "New Float Array Constructor" )
   {
      FloatArrayExpressionNode a_oFloatArrayExpressionNode =
         (FloatArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oFloatArrayExpressionNode.Count;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "vec2( float, float )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
   }
   else
   if( title == "vec3( float, float, float )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "vec3( vec2, float )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
   }
   else
   if( title == "vec4( vec2, float, float )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
   }
   else
   if( title == "vec4( vec2, vec2 )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "vec2" );
      }
   }
   else
   if( title == "vec4( vec3, float )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
   }
   else
   if( title == "vec4( float, float, float, float )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "New Float Vector Array Constructor" )
   {
      VectorArrayExpressionNode a_oVectorArrayExpressionNode =
         (VectorArrayExpressionNode)a_oSelNode;
      int a_nDimension = a_oVectorArrayExpressionNode.Count;
      int a_nVectorDimension = a_oVectorArrayExpressionNode.Dimension;
      for( int a_nCount = 0; a_nCount < a_nDimension; ++a_nCount )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( a_nVectorDimension );
         a_slParamNames.Add( "vec" + a_nVectorDimension );
      }
   }
   else
   if( title == "mat2x2( float, float, float, float )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "mat2x2( vec2, vec2 )" )
   {
      for( int a = 0; a < 2; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      }
   }
   else
   if( title == "mat2x2( vec3, float )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
   }
   else
   if( title == "mat2x3( float, float, float, float, float, float )" )
   {
      for( int a = 0; a < 6; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "mat2x3( float, float, float, float, vec2 )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x3( float, float, float, vec3 )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat2x3( float, float, vec4 )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat2x3( float, vec2, vec3 )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat2x3( vec2, vec2, vec2 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x3( vec2, vec4 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat2x3( vec3, vec3 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat2x4( float, float, float, float, float, float, float, float )" )
   {
      for( int a = 0; a < 8; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "mat2x4( float, float, float, float, float, float, vec2 )" )
   {
      for( int a = 0; a < 6; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x4( float, float, float, float, float, vec3 )" )
   {
      for( int a = 0; a < 5; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat2x4( float, float, float, float, vec4 )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat2x4( float, float, float, vec2, vec3 )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat2x4( float, float, vec2, vec2, vec2 )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x4( vec2, vec2, vec2, vec2 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x4( float, vec3, vec4 )" )
   {
      a_aoTypeInfoArray.Add( FloatExpressionNode ); a_aiColDim.Add( 1 ); a_slParamNames.Add( "float" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat2x4( vec3, vec3, vec2 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat2x4( vec4, vec4 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat3x2( float, float, float, float, float, float )" )
   {
      for( int a = 0; a < 6; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "mat3x2( vec2, vec2, vec2 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat3x2( vec3, vec3 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat3x2( vec4, vec2 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
   }
   else
   if( title == "mat3x3( vec3, vec3, vec3 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 3 ); a_slParamNames.Add( "vec3" );
   }
   else
   if( title == "mat3x4( vec2, vec2, vec2, vec2, vec2, vec2 )" )
   {
      for( int a = 0; a < 6; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "vec2" );
      }
   }
   else
   if( title == "mat3x4( vec3, vec3, vec3, vec3 )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 3 );
         a_slParamNames.Add( "vec3" );
      }
   }
   else
   if( title == "mat3x4( vec4, vec4, vec4 )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 4 );
         a_slParamNames.Add( "vec4" );
      }
   }
   else
   if( title == "mat4x2( float, float, float, float, float, float, float, float )" )
   {
      for( int a = 0; a < 8; ++a )
      {
         a_aoTypeInfoArray.Add( FloatExpressionNode );
         a_aiColDim.Add( 1 );
         a_slParamNames.Add( "float" );
      }
   }
   else
   if( title == "mat4x2( vec2, vec2, vec2, vec2 )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "vec2" );
      }
   }
   else
   if( title == "mat4x2( vec2, vec2, vec4 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 2 ); a_slParamNames.Add( "vec2" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat4x2( vec4, vec4 )" )
   {
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
      a_aoTypeInfoArray.Add( VectorExpressionNode ); a_aiColDim.Add( 4 ); a_slParamNames.Add( "vec4" );
   }
   else
   if( title == "mat4x2( vec2, vec2, vec2, vec2, vec2, vec2 )" )
   {
      for( int a = 0; a < 6; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "vec2" );
      }
   }
   else
   if( title == "mat4x2( vec3, vec3, vec3, vec3 )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 3 );
         a_slParamNames.Add( "vec3" );
      }
   }
   else
   if( title == "mat4x2( vec4, vec4, vec4 )" )
   {
      for( int a = 0; a < 3; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 4 );
         a_slParamNames.Add( "vec4" );
      }
   }
   else
   if( title == "mat4x4( vec4, vec4, vec4, vec4 )" )
   {
      for( int a = 0; a < 4; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 4 );
         a_slParamNames.Add( "vec4" );
      }
   }
   else
   if( title == "mat4x4( vec2, vec2, vec2, vec2, vec2, vec2, vec2, vec2 )" )
   {
      for( int a = 0; a < 8; ++a )
      {
         a_aoTypeInfoArray.Add( VectorExpressionNode );
         a_aiColDim.Add( 2 );
         a_slParamNames.Add( "vec2" );
      }
   }

   // Create the new nodes and add them to the model.
   if( a_aoTypeInfoArray.Count == a_aiColDim.Count )
   {
      auto List a_lNewNodes;
      for( int a_nIndex = 0; a_nIndex < a_aoTypeInfoArray.Count; ++a_nIndex )
      {
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( BooleanExpressionNode ) )
         {
            BooleanExpressionNode a_oBooleanExpressionNode =
               Create.CreateBooleanExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oBooleanExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oBooleanExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( BooleanArrayExpressionNode ) )
         {
            BooleanArrayExpressionNode a_oBooleanArrayExpressionNode =
               Create.CreateBooleanArrayExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oBooleanArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oBooleanArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oBooleanArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( BooleanVectorExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            if( a_nDimension < Enum.GLSL_DataType_Vec2() )
            {
               a_nDimension = Enum.GLSL_DataType_Vec4();
            }
            string a_sBooleanVectorExpressionName = a_slParamNames.GetAt( a_nIndex );

            BooleanVectorExpressionNode a_oBooleanVectorExpressionNode =
               Create.CreateBooleanVectorExpressionNode( a_sBooleanVectorExpressionName, Enum.ExpressionSide_None(), a_nDimension );
            a_oBooleanVectorExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oBooleanVectorExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( BooleanVectorArrayExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            string a_sBooleanVectorArrayExpressionName = a_slParamNames.GetAt( a_nIndex );

            BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
               Create.CreateBooleanVectorArrayExpressionNode( a_sBooleanVectorArrayExpressionName,
                  Enum.ExpressionSide_None(), a_aiArrayDim.Objects[ a_nIndex ], a_nDimension );
            a_oBooleanVectorArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oBooleanVectorArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oBooleanVectorArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( IntegerExpressionNode ) )
         {
            IntegerExpressionNode a_oIntegerExpressionNode =
               Create.CreateIntegerExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oIntegerExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oIntegerExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( IntegerArrayExpressionNode ) )
         {
            IntegerArrayExpressionNode a_oIntegerArrayExpressionNode =
               Create.CreateIntegerArrayExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oIntegerArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oIntegerArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oIntegerArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( IntegerVectorExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            if( a_nDimension < Enum.GLSL_DataType_Vec2() )
            {
               a_nDimension = Enum.GLSL_DataType_Vec4();
            }
            string a_sIntegerVectorExpressionName = a_slParamNames.GetAt( a_nIndex );

            IntegerVectorExpressionNode a_oIntegerVectorExpressionNode =
               Create.CreateIntegerVectorExpressionNode( a_sIntegerVectorExpressionName, Enum.ExpressionSide_None(), a_nDimension );
            a_oIntegerVectorExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oIntegerVectorExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( IntegerVectorArrayExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            string a_sIntegerVectorArrayExpressionName = a_slParamNames.GetAt( a_nIndex );

            IntegerVectorArrayExpressionNode a_oIntegerVectorArrayExpressionNode =
               Create.CreateIntegerVectorArrayExpressionNode( a_sIntegerVectorArrayExpressionName,
                  Enum.ExpressionSide_None(), a_aiArrayDim.Objects[ a_nIndex ], a_nDimension );
            a_oIntegerVectorArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oIntegerVectorArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oIntegerVectorArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( UnsignedIntegerExpressionNode ) )
         {
            UnsignedIntegerExpressionNode a_oUnsignedIntegerExpressionNode =
               Create.CreateUnsignedIntegerExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oUnsignedIntegerExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oUnsignedIntegerExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( UnsignedIntegerArrayExpressionNode ) )
         {
            UnsignedIntegerArrayExpressionNode a_oUnsignedIntegerArrayExpressionNode =
               Create.CreateUnsignedIntegerArrayExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oUnsignedIntegerArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oUnsignedIntegerArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oUnsignedIntegerArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( UnsignedIntegerVectorExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            if( a_nDimension < Enum.GLSL_DataType_Vec2() )
            {
               a_nDimension = Enum.GLSL_DataType_Vec4();
            }
            string a_sUnsignedIntegerVectorExpressionName = a_slParamNames.GetAt( a_nIndex );

            UnsignedIntegerVectorExpressionNode a_oUnsignedIntegerVectorExpressionNode =
               Create.CreateUnsignedIntegerVectorExpressionNode( a_sUnsignedIntegerVectorExpressionName,
                  Enum.ExpressionSide_None(), a_nDimension );
            a_oUnsignedIntegerVectorExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oUnsignedIntegerVectorExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( UnsignedIntegerVectorArrayExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            string a_sUnsignedIntegerVectorArrayExpressionName = a_slParamNames.GetAt( a_nIndex );

            UnsignedIntegerVectorArrayExpressionNode a_oUnsignedIntegerVectorArrayExpressionNode =
               Create.CreateUnsignedIntegerVectorArrayExpressionNode( a_sUnsignedIntegerVectorArrayExpressionName,
                  Enum.ExpressionSide_None(), a_aiArrayDim.Objects[ a_nIndex ], a_nDimension );
            a_oUnsignedIntegerVectorArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oUnsignedIntegerVectorArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oUnsignedIntegerVectorArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( FloatExpressionNode ) )
         {
            FloatExpressionNode a_oFloatExpressionNode =
               Create.CreateFloatExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oFloatExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oFloatExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( FloatArrayExpressionNode ) )
         {
            FloatArrayExpressionNode a_oFloatArrayExpressionNode =
               Create.CreateFloatArrayExpressionNode( a_slParamNames.GetAt( a_nIndex ), Enum.ExpressionSide_None() );
            a_oFloatArrayExpressionNode.MakeConstructorParameter();
            a_oFloatArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_lNewNodes.AddRef( a_oFloatArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( VectorExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            if( a_nDimension < Enum.GLSL_DataType_Vec2() )
            {
               a_nDimension = Enum.GLSL_DataType_Vec4();
            }
            string a_sVectorExpressionName = a_slParamNames.GetAt( a_nIndex );

            VectorExpressionNode a_oVectorExpressionNode =
               Create.CreateVectorExpressionNode( a_sVectorExpressionName, Enum.ExpressionSide_None(), a_nDimension );
            a_oVectorExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oVectorExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( VectorArrayExpressionNode ) )
         {
            int a_nDimension = a_aiColDim.Objects[ a_nIndex ];
            string a_sVectorArrayExpressionName = a_slParamNames.GetAt( a_nIndex );

            VectorArrayExpressionNode a_oVectorArrayExpressionNode =
               Create.CreateVectorArrayExpressionNode( a_sVectorArrayExpressionName,
                  Enum.ExpressionSide_None(), a_aiArrayDim.Objects[ a_nIndex ], a_nDimension );
            a_oVectorArrayExpressionNode.Count = a_aiArrayDim.Objects[ a_nIndex ];
            a_oVectorArrayExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oVectorArrayExpressionNode );
         }
         else
         if( a_aoTypeInfoArray.Objects[ a_nIndex ].IsDerived( MatrixExpressionNode ) )
         {
            int a_nCol = a_aiColDim.Objects[ a_nIndex ];
            int a_nRow = a_aiRowDim.Objects[ a_nIndex ];
            string a_sMatrixExpressionName = a_slParamNames.GetAt( a_nIndex );
            MatrixExpressionNode a_oMatrixExpressionNode =
               Create.CreateMatrixExpressionNode( a_sMatrixExpressionName, Enum.ExpressionSide_None(), a_nCol, a_nRow );
            a_oMatrixExpressionNode.MakeConstructorParameter();
            a_lNewNodes.AddRef( a_oMatrixExpressionNode);
         }
      }

      // Add the nodes to the document.
      //Console.Out( a_lNewNodes.GetCount() );
      if( a_lNewNodes.GetCount() == 0 )
      {
         return;
      }

      // Make sure we add enough StructExpressionNodes for an array constructor.
      auto List a_lStructExpressionNodes;
      VariableExpressionNode a_oVariableExpressionNode = (VariableExpressionNode)a_oSelNode;

      if( a_nStructInstanceArrayDim > 0 && a_oVariableExpressionNode.IsDerived( StructExpressionNode ) )
      {
         // Clone the expression so we can have a new constructor expression for each array element.
         StructExpressionNode a_oToClone = (StructExpressionNode)a_oSelNode;
         StructExpressionNode a_oArrayConstructor = (StructExpressionNode)a_oToClone.Clone();
         a_oArrayConstructor.SetParent( null );
         a_oArrayConstructor.Name = a_oToClone.StructTypeName;
         // Clear the expression and set its expression type to 'Constructor'.
         a_oArrayConstructor.Clear();
         a_oArrayConstructor.ArrayDimension = 0;
         a_oArrayConstructor.MakeConstructor();

         // Add the new constructor parameters to the cloned expression.
         for( int a_nNode = 0; a_nNode < a_lNewNodes.GetCount(); ++a_nNode )
         {
            Node a_oNode = (Node)a_lNewNodes.Get( a_nNode );
            a_oArrayConstructor.AddChild( a_oNode );
         }
         // Add the cloned constructor to the list.
         a_lStructExpressionNodes.AddRef( a_oArrayConstructor );

         // Clone n - 1 copies of the new constructor. ( Since we already added 1 above. )
         for( int a_nArray = 0; a_nArray < a_nStructInstanceArrayDim - 1; ++a_nArray )
         {
            StructExpressionNode a_oNewArrayConstructor = (StructExpressionNode)a_oArrayConstructor.Clone();
            a_lStructExpressionNodes.AddRef( a_oNewArrayConstructor );
         }

         // Add the new nodes to the model.
         for( int a_nConstructor = 0; a_nConstructor < a_lStructExpressionNodes.GetCount(); ++a_nConstructor )
         {
            Node a_oNode = (Node)a_lStructExpressionNodes.Get( a_nConstructor );
            Model.AddNode( a_oNode, a_oSelNode, -1 );
         }
      }
      else
      {
         for( int a_nNode = 0; a_nNode < a_lNewNodes.GetCount(); ++a_nNode )
         {
            Node a_oNode = (Node)a_lNewNodes.Get( a_nNode );
            Model.AddNode( a_oNode, a_oSelNode, -1 );
         }
      }
   }
   else
   {
      return;
   }

   // Configure the selected expression.
   VariableExpressionNode a_oVariableExpressionNode = (VariableExpressionNode)Model.EditNode( a_oSelNode );
   if( a_oVariableExpressionNode.MustBeWriteable() )
   {
      return;
   }

   //Console.Out( a_aoTypeInfoArray.Count + "   " + a_aiColDim.Count );

   a_oVariableExpressionNode.Clear();
   a_oVariableExpressionNode.MakeConstructor();
   a_oVariableExpressionNode.NodeSelector.Clear();

   if( a_oVariableExpressionNode.IsDerived( VectorExpressionNode ) )
   {
      VectorExpressionNode a_oVectorExpressionNode = (VectorExpressionNode)a_oVariableExpressionNode;
      int a_nDimension = a_oVectorExpressionNode.Dimension;
      a_oVectorExpressionNode.Clear();
      a_oVectorExpressionNode.Dimension = a_nDimension;
   }

   a_oVariableExpressionNode.Expression = "";
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void AddUniformBufferBindNodeVariable(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      return;
   }

   Node a_oSelectedNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelectedNode || a_oSelectedNode.IsDerived( UniformBufferBindNode ) == false )
   {
      return;
   }

   UniformBufferBindNode a_oUniformBufferBindNode =
      (UniformBufferBindNode)a_oSelectedNode;
   // We're setting the data source for the new VariableNode<T> to
   // its parent UniformBufferBindNode. It will use this node to
   // do validation and binding.
   Node a_oDataSource = (Node)a_oUniformBufferBindNode;

   if( !node || !( node.IsDerived( VariableNode ) ) || !a_oDataSource )
   {
      return;
   }

   // Clone the node and set its parent to null.
   // Then we can re-parent the node in the current database.
   // NOTE: Clone() is the same as calling 'new'.
   VariableNode a_oVariableNode = (VariableNode)node.Clone();
   a_oVariableNode.SetParent( null );
   a_oVariableNode.QualifierList.Qualifiers.Clear();
   if( a_oVariableNode.IsDerived( VariableArrayNode ) )
   {
      VariableArrayNode a_oVariableArrayNode = (VariableArrayNode)a_oVariableNode;
      Node a_oNode = (Node)a_oVariableArrayNode.NodeSelector.GetVariable();
      if( a_oNode && a_oNode.IsDerived( VariableNode ) )
      {
         VariableNode a_oSizeDataSource = (VariableNode)a_oNode;
         string a_sVariableName;
         a_sVariableName += a_oSizeDataSource.NamePrefix;
         a_sVariableName += a_oSizeDataSource.Variable;
         a_sVariableName += a_oSizeDataSource.NameSuffix;
         a_oVariableArrayNode.NodeSelector.Clear();
         a_oVariableArrayNode.NodeSelector.SetContainer( Model );
         a_oVariableArrayNode.NodeSelector.AddNode( Model, a_oSizeDataSource );
      }
   }

   // Reseat the DataCapture object in the current document.
   // This clears the NodeSelector object's pointers ( because
   // those nodes probably are not in the current document )
   // and sets the DataCapture and NodeSelector's container
   // object pointer to the current document.
   a_oVariableNode.Capture.ChangeModel( Model );

   // Connect the VariableNode the UniformBufferBindNode
   // so we can do lookups and validation.
   a_oVariableNode.LocalDataSource = a_oUniformBufferBindNode;

   a_oVariableNode.MakeUniform();
   // ** FIX ME TEMP CODE FOR SYSTEM CONVERSION
   a_oVariableNode.QualifierList.ModifyQualifier( true, Enum.GLSL_Qualifier_Uniform() );
   a_oVariableNode.Variable = memberName;

   // DEBUG
   // Enumerate ALL data capture objects.
   /*
   auto List a_lPackedObjects;
   a_oVariableNode.Capture.GetDataCaptureObjects( a_lPackedObjects );

   for( int i = 0; i < a_lPackedObjects.GetCount(); ++i )
   {
      DataCapture a_oDataCapture = (DataCapture)a_lPackedObjects.Get( i );
      Console.Out( a_oDataCapture.GetType().GetTypeName() );
   }
   */

   a_oVariableNode.UpdateName();
   Model.AddNode( a_oVariableNode, a_oUniformBufferBindNode, -1 );
}

function void AddUniformBufferBindNodeVariable_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single UniformBufferBindNode" );
   }
   else
   {
      string a_sType = node.GetType().GetTypeName();
      ValidateNodeCommandContext.TestContext( event.Info, UniformBufferBindNode,
         "Adds a member variable to the UniformBufferBindNode" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetMatrixDimension(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type

   )
{
   auto List a_lSelectedNodes;
   SpaSelectUtil.GetSelectedNodes( a_lSelectedNodes );

   for( int count = 0; count < a_lSelectedNodes.GetCount(); ++count )
   {
      auto ExpressionInfo a_oExpressionInfo;
      VariableNode a_oVariableNode = (VariableNode)a_lSelectedNodes.Get( count );
      a_oVariableNode.GetParams( a_oExpressionInfo );
      a_oVariableNode = (VariableNode)Model.EditNode( a_oVariableNode );
      a_oExpressionInfo.Cols = SpaMathUtil.GetDimensionXFromComposite( type );
      a_oExpressionInfo.Rows = SpaMathUtil.GetDimensionYFromComposite( type );
      a_oVariableNode.SetParams( a_oExpressionInfo );
      a_oVariableNode.UpdateName();
   }
}

function void SetMatrixDimension_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   auto TypeInfoArray types;
   types.Add( MatrixNode );
   types.Add( MatrixArrayNode );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   event.Info.SetEnabled( a_bEnabled );

   if( !a_bEnabled )
   {
      event.Info.Status.SetHint( "Select a node of type MatrixNode or MatrixArrayNode" );
      return;
   }
   else
   {
      event.Info.Status.SetHint( "Sets the underlying Matrix object to the indicated dimension" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetCommandRepNodeStatusItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string status,
   int index

   )
{
   auto List a_lSelectedNodes;
   SpaSelectUtil.GetSelectedNodes( a_lSelectedNodes );

   for( int count = 0; count < a_lSelectedNodes.GetCount(); ++count )
   {
      CommandRepNode a_oCommandRepNode =
         (CommandRepNode)a_lSelectedNodes.Get( count );
      a_oCommandRepNode.CommandStatus = index;
   }

   // Update any InterfaceElementNode of type 'contextmenu'.
   auto List a_lInterfaceElementNodes;
   Graph.GetNodesFromDatabase( Model, a_lInterfaceElementNodes, InterfaceElementNode );

   for( int item = 0; item < a_lInterfaceElementNodes.GetCount(); ++item )
   {
      InterfaceElementNode a_oInterfaceElementNode =
         (InterfaceElementNode)a_lInterfaceElementNodes.Get( item );
      a_oInterfaceElementNode =
         (InterfaceElementNode)Model.EditNode( a_oInterfaceElementNode );

      if(   a_oInterfaceElementNode &&
            a_oInterfaceElementNode.Element == Enum.InterfaceElements_Item() )
      {
         for( int command = 0; command < a_lSelectedNodes.GetCount(); ++command )
         {
            CommandRepNode a_oCommandRepNode =
               (CommandRepNode)a_lSelectedNodes.Get( command );

            if( a_oInterfaceElementNode.GuidString == a_oCommandRepNode.Guid().Value )
            {
               a_oInterfaceElementNode.GetCommandStatus( a_oCommandRepNode );
            }
         }
      }
   }
}

function void SetCommandRepNodeStatusItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string status,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, CommandRepNode,
      "Sets the CommandRepNode status to: " + status );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetTypeRepNodeStatusItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string status,
   int index

   )
{
   auto List a_lSelectedNodes;
   SpaSelectUtil.GetSelectedNodes( a_lSelectedNodes );
   for( int count = 0; count < a_lSelectedNodes.GetCount(); ++count )
   {
      TypeRepNode a_oTypeRepNode = (TypeRepNode)a_lSelectedNodes.Get( count );
      a_oTypeRepNode = (TypeRepNode)Model.EditNode( a_oTypeRepNode );
      a_oTypeRepNode.TypeStatus = index;
   }

   // Update any InterfaceElementNode of type 'contextmenu'.
   auto List a_lInterfaceElementNodes;
   Graph.GetNodesFromDatabase(
      Model,
      a_lInterfaceElementNodes,
      InterfaceElementNode );

   for( int item = 0; item < a_lInterfaceElementNodes.GetCount(); ++item )
   {
      InterfaceElementNode a_oInterfaceElementNode =
         (InterfaceElementNode)a_lInterfaceElementNodes.Get( item );

      if(   a_oInterfaceElementNode &&
            a_oInterfaceElementNode.Element == Enum.InterfaceElements_ContextMenu() )
      {
         for( int command = 0; command < a_lSelectedNodes.GetCount(); ++command )
         {
            TypeRepNode a_oTypeRepNode = (TypeRepNode)a_lSelectedNodes.Get( command );
            string a_sType = a_oTypeRepNode.GetType();
            if( a_oInterfaceElementNode.ClassString == a_oTypeRepNode.Type )
            {
               a_oInterfaceElementNode.GetTypeStatus( a_oTypeRepNode );
            }
         }
      }
   }
}

function void SetTypeRepNodeStatusItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string status,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, TypeRepNode,
      "Sets the TypeRepNode status to: " + status );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ValidateFindVariable(

   CommandPresentationModuleInfo commandInfo,
   string p_sStorageQualifier

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      SpaSelectUtil.SelectSingletonByType(
         commandInfo,
         VariableExpressionNode );
      return;
   }

   VariableExpressionNode a_oVariableExpressionNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();

   if( a_oVariableExpressionNode.MustBeWriteable() )
   {
      if( p_sStorageQualifier == "uniform" || p_sStorageQualifier == "in" )
      {
         string a_sHint = "Command unavailable because '" +
            p_sStorageQualifier + "' variables are not writeable";
         commandInfo.SetEnabled( false );
         commandInfo.Status.SetHint( a_sHint );
         return;
      }
   }
   else
   if(   !( a_oVariableExpressionNode.IsExpression() ) &&
         !( a_oVariableExpressionNode.IsConstructorParameter() ) &&
         !( a_oVariableExpressionNode.IsFunctionParameter() ) &&
         !( a_oVariableExpressionNode.IsReturn() ) )
   {
      string a_sHint = "Command only available for 'expression', " +
         "'constructor parameter', or 'function parameter'";
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( a_sHint );
      return;
   }
   else
   if( a_oVariableExpressionNode.ChildCount )
   {
      string a_sHint = "Command unavailable because 'constructor' " +
         "expressions cannot have data sources";
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( a_sHint );
      return;
   }

   string a_sValidInfo = "Connects the VariableExpressionNode to a variable with binding type '" +
      p_sStorageQualifier + "'";

   ValidateNodeCommandContext.TestContext(
      commandInfo,
      VariableExpressionNode,
      a_sValidInfo );
}

function void FindUniformVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindUniformVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "uniform" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindGlobalVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals = true;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindGlobalVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "global" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindLocalVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindLocalVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "local or none" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindInVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindInVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "in" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindOutVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindOutVariables_OnUpdate( 

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "out" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindConstVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindConstVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "const" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindMatrixColVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   Console.Out( node.Name + " " + node.GetModel().Filename );
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   SpaListUtil.Out( a_oMemberSequence.NodeList );
   //Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindMatrixColVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   ValidateFindVariable( event.Info, "MatrixCol" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateStructInstanceVariable(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Create.CreateStructInstanceVariable( false, node );
}

function void CreateStructInstanceVariable_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      return SpaSelectUtil.SelectSingleton( event.Info );
   }

   auto TypeInfoArray types;
   types.Add( Group );
   types.Add( StructInstanceNode );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   event.Info.SetEnabled( a_bEnabled );

   if( !a_bEnabled )
   {
      event.Info.Status.SetHint( "Select a node of type Group or StructInstanceNode" );
      return;
   }

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( StructInstanceNode ) )
   {
      StructInstanceNode a_oStructInstanceNode =
         (StructInstanceNode)a_oSelNode;
      if( a_oStructInstanceNode.FindStructDeclaration() == null )
      {
         string a_sInfo = "Creates a StructInstanceNode that " +
            "references a StructNode or connects a " +
            "StructInstanceNode to a StructNode declaration";
         event.Info.Status.SetHint( a_sInfo );
      }
      else
      {
         string a_sInfo =
            "This StructInstanceNode already has a declaration";
         event.Info.Status.SetHint( a_sInfo );
         event.Info.SetEnabled( false );
      }
   }
}

function void CreateStructInstanceArrayVariable(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Create.CreateStructInstanceVariable( true, node );
}

function void CreateStructInstanceArrayVariable_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      return SpaSelectUtil.SelectSingleton( event.Info );
   }

   auto TypeInfoArray types;
   types.Add( Group );
   types.Add( StructInstanceNode );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   event.Info.SetEnabled( a_bEnabled );

   if( !a_bEnabled )
   {
      event.Info.Status.SetHint( "Select a node of type Group or StructInstanceNode" );
      return;
   }

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( StructInstanceNode ) )
   {
      StructInstanceNode a_oStructInstanceNode =
         (StructInstanceNode)a_oSelNode;
      if( a_oStructInstanceNode.FindStructDeclaration() == null )
      {
         string a_sInfo = "Creates a StructInstanceNode that " +
            "references a StructNode or connects a " +
            "StructInstanceNode to a StructNode declaration";
         event.Info.Status.SetHint( a_sInfo );
      }
      else
      {
         string a_sInfo =
            "This StructInstanceNode already has a declaration";
         event.Info.Status.SetHint( a_sInfo );
         event.Info.SetEnabled( false );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateStructInstanceDeclaration(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   bool a_bIsArray = false;
   if( !( Create.CreateStructInstanceDeclarationExpression( a_bIsArray, node ) ) )
   {
      return;
   }
}

function void CreateStructInstanceDeclaration_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   ValidateNodeCreateContext.TestContext( event.Info, "Group" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateStructInstanceArrayDeclaration(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   bool a_bIsArray = true;
   if( !( Create.CreateStructInstanceDeclarationExpression( a_bIsArray, node ) ) )
   {
      return;
   }
}

function void CreateStructInstanceArrayDeclaration_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   ValidateNodeCreateContext.TestContext( event.Info, "Group" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateStructFunctionDeclaration(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   bool a_bIsArray = false;
   if( !( Create.CreateStructFunctionDeclarationExpression( a_bIsArray, node ) ) )
   {
      return;
   }
}

function void CreateStructFunctionDeclaration_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   ValidateNodeCreateContext.TestContext( event.Info, "Group" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateStructArrayFunctionDeclaration(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node, 
   string memberName

   )
{
   bool a_bIsArray = true;
   if( !( Create.CreateStructFunctionDeclarationExpression( a_bIsArray, node ) ) )
   {
      return;
   }
}

function void CreateStructArrayFunctionDeclaration_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   ValidateNodeCreateContext.TestContext( event.Info, "Group" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindSamplerVariables(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
}

function void FindSamplerVariables_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
      return;
   }
   string a_sHint = "Connects the VariableExpressionNode to a sampler variable " +
      "that matches the sampler expression type";

   ValidateNodeCommandContext.TestContext(
      event.Info,
      VariableExpressionNode,
      a_sHint );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferBind(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( node.IsDerived( UniformBufferNode ) ) )
   {
      string a_sMessage =
         "The function CreateUniformBufferBind() expected 'node' " +
         "to be of type <UniformBufferNode>";
      Console.Assert( a_sMessage );
      return;
   }

   UniformBufferNode a_oUniformBufferNode = (UniformBufferNode)node;
   Console.Out( a_oUniformBufferNode.Name );

   bool a_bRemoteDataSource;
   if( node.GetModel().Filename != Model.Filename )
   {
      a_bRemoteDataSource = true;
   }

   UniformBufferBindNode a_oUniformBufferBindNode = new UniformBufferBindNode;
   a_oUniformBufferBindNode.Name = a_oUniformBufferNode.Block.BlockName;

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelNode || !( a_oSelNode.IsDerived( Program ) ) )
   {
      return;
   }

   Program a_oProgram = (Program)a_oSelNode;
   auto List a_lUniformBufferBindNodes;
   Graph.GetNodesFromDatabase(
      a_oProgram,
      a_lUniformBufferBindNodes,
      UniformBufferBindNode );
      
   for( int slot = 0; slot < a_lUniformBufferBindNodes.GetCount(); ++slot )
   {
      UniformBufferBindNode a_oRenumberUniformBufferBind =
         (UniformBufferBindNode)a_lUniformBufferBindNodes.Get( slot );
      a_oRenumberUniformBufferBind.SlotIndex = slot;
   }

   a_oUniformBufferBindNode.SlotIndex = a_lUniformBufferBindNodes.GetCount();
   NodeLink a_oBufferLink;
      
   if( !a_bRemoteDataSource )
   {
      a_oUniformBufferBindNode.BufferLink = a_oUniformBufferNode;   
   }
   else
   {
      a_oUniformBufferBindNode.NodeSelector.SetContainer( Model );
      a_oUniformBufferBindNode.NodeSelector.AddNode( Model, a_oUniformBufferNode );
   }

   Model.AddNode( a_oUniformBufferBindNode, a_oProgram, -1 );
   if( a_oBufferLink )
   {
      a_oBufferLink.Load( 1 );
   }
}

function void CreateUniformBufferBind_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   string a_sHint = "Creates a UniformBufferBindNode that binds the " +
      "specified UniformBufferNode when the Program is rendered";
   ValidateNodeCommandContext.TestContext( event.Info, Program, a_sHint );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindIntegralTypes(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   //Expression.SetVariable( node, memberName );
}

function void FindIntegralTypes_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
      return;
   }

   // There should be several messages, but they're almost
   // impossible to disambiguate. **FIX ME
   /*
   ValidateNodeCommandContext.TestContext( event.Info, VariableExpressionNode,
      "Connects the VariableExpressionNode to an integral variable that sets the array subscript." );
   */
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void FindConstIntegralTypes(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Expression.SetArraySizeDataSource( node, memberName );
}

function void FindConstIntegralTypes_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   CommandPresentationModuleInfo commandInfo = event.Info;

   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node" );
      return;
   }

   auto TypeInfoArray types;
   SpaTypeUtil.AddArraySizeableTypes( types );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );

   if( a_bEnabled )
   {
      string a_sHint = "Connects the node to a const integral " +
         "expression that sets the array size";
      commandInfo.Status.SetHint( a_sHint );
   }
   else
   {
      string a_sHint = "This node cannot use an array size declaration";
      commandInfo.Status.SetHint( a_sHint );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetQualifierValue0(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Expression.SetQualifierDataSource( node, memberName, 0 );
}

function void SetQualifierValue0_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( SpaSelectUtil.ValidateQualifierContext( event.Info ) ) )
   {
      return;
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetQualifierValue1(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Expression.SetQualifierDataSource( node, memberName, 1 );
}

function void SetQualifierValue1_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( SpaSelectUtil.ValidateQualifierContext( event.Info ) ) )
   {
      return;
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetQualifierValue2(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Expression.SetQualifierDataSource( node, memberName, 2 );
}

function void SetQualifierValue2_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( SpaSelectUtil.ValidateQualifierContext( event.Info ) ) )
   {
      return;
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetQualifierValue3(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   Expression.SetQualifierDataSource( node, memberName, 3 );
}

function void SetQualifierValue3_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   if( !( SpaSelectUtil.ValidateQualifierContext( event.Info ) ) )
   {
      return;
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void SetArrayIndex0(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   Expression.SetArrayIndexDataSource( node, memberName, 0 );
   return;

   // To debug, comment out the 'return' statement immediately above this line.
   // DEBUG
   VariableExpressionNode a_oVariableExpressionNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();

   int a_nCount = a_oVariableExpressionNode.NodeSelector.NamespaceLinks.GetCount();

   for( int i = 0; i < a_nCount; ++i )
   {
      Node a_oNode = (Node)a_oVariableExpressionNode.NodeSelector.NamespaceLinks.Get( i );

      if( a_oNode && a_oNode.IsDerived( NodeLink ) )
      {
         NodeLink a_oLink = (NodeLink)a_oNode;
         Console.Out( a_oLink.Name );
         if( a_oLink.ChildCount )
         {
            for( int j = 0; j < a_oLink.ChildCount; ++j )
            {
               Node a_oChild = (Node)a_oLink.Children[ j ];
            }
         }
      }
   }
}

function void SetArrayIndex0_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type,
   Node node,
   string memberName

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, VariableExpressionNode,
      "Sets the array subscript to the indicated variable" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void GlslQualifierNodeSetQualifier(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type

   )
{
   GlslQualifierNode a_oGlslQualifierNode =
      (GlslQualifierNode)Model.EditNode( Model.GetFirstSelectedNode().GetNode() );
   a_oGlslQualifierNode.Qualifier = type;
   a_oGlslQualifierNode.UpdateName();
}

function void GlslQualifierNodeSetQualifier_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, GlslQualifierNode,
      "Sets the QualifierNode 'qualifier' to the listed option" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void DataMemberNodeSetPropertyItemType(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type

   )
{
   DataMemberNode a_oDataMemberNode =
      (DataMemberNode)Model.EditNode( Model.GetFirstSelectedNode().GetNode() );
   a_oDataMemberNode.PropertyItemType = type;
}

function void DataMemberNodeSetPropertyItemType_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, DataMemberNode,
      "Sets the DataMemberNode 'Property Item Type' to the listed option" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ArrayMemberDisplayProperties(
   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type
   )
{
   ListNode a_oListNode = (ListNode)Model.GetFirstSelectedNode().GetNode();

   auto NodeSelect select;
   Node a_oNode = (Node)a_oListNode.NodeList.Get( type );
   select.SetNode( a_oNode );
   Model.SelectNS( (NodeSelect)select.Clone() );
   Application.ExecuteCommand( "Edit Commands", "EditDisplayProperties" );
}

function void ArrayMemberDisplayProperties_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, ListNode,
      "Displays properties for the selected array member" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ArrayMemberRemoveItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   ListNode a_oListNode = (ListNode)Model.GetFirstSelectedNode().GetNode();
   a_oListNode.NodeList.Del( (Node)a_oListNode.NodeList.Get( index ) );
}

function void ArrayMemberRemoveItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
      return;
   }

   ValidateNodeCommandContext.TestContext( event.Info, ListNode,
      "Removes the selected member from the array" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void AddQualifierItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int type

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelNode )
   {
      return;
   }

   Expression.ModifyQualifier( a_oSelNode, true, title );
}

function void AddQualifierItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int type

   )
{
   CommandPresentationModuleInfo commandInfo = event.Info;
   auto TypeInfoArray types;
   SpaTypeUtil.AddQualifiableTypes( types );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );

   if( a_bEnabled )
   {
      string a_sHint = "Adds the indicated qualifier to " +
         "the selected node's qualifier list object";
      commandInfo.Status.SetHint( a_sHint );
   }
   else
   {
      commandInfo.Status.SetHint( "Select a node that can be qualified" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void RemoveQualifierItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelNode )
   {
      return;
   }

   Expression.ModifyQualifier( a_oSelNode, false, title );
}

function void RemoveQualifierItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   CommandPresentationModuleInfo commandInfo = event.Info;
   auto TypeInfoArray types;
   SpaTypeUtil.AddQualifiableTypes( types );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );

   if( a_bEnabled )
   {
      string a_sHint = "Removes the indicated qualifier from the " +
         "selected node's qualifier list object";
      event.Info.Status.SetHint( a_sHint );
   }
   else
   {
      event.Info.Status.SetHint( "Select a node that can be qualified" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void AddSubroutineItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   Console.Out( node.Name + " " + node.GetModel().Filename );
   /*
   bool a_bFilterGlobals;
   auto ListNode a_oMemberSequence;
   FindVariable( node, a_oMemberSequence, globalIndex, a_bFilterGlobals );
   Expression.CreateExpression( node, a_oMemberSequence );
   */
}

function void AddSubroutineItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int globalIndex,
   Node node,
   string memberName

   )
{
   //ValidateFindVariable( event.Info, "in" );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void RemoveStringArrayItem(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   StringArrayNode a_oStringArrayNode =
      (StringArrayNode)Model.GetFirstSelectedNode().GetNode();
   a_oStringArrayNode = (StringArrayNode)Model.EditNode( a_oStringArrayNode );
   a_oStringArrayNode.Objects.RemoveAt( index );
   a_oStringArrayNode.Name = a_oStringArrayNode.UpdateName();
}

function void RemoveStringArrayItem_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, StringArrayNode,
      "Removes the selected member from the array" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void StringArrayInsertBefore(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   StringArrayNode a_oStringArrayNode =
      (StringArrayNode)Model.GetFirstSelectedNode().GetNode();
   a_oStringArrayNode =
      (StringArrayNode)Model.EditNode( a_oStringArrayNode );
   Graph.InsertString( a_oStringArrayNode, index );
   a_oStringArrayNode.Name = a_oStringArrayNode.UpdateName();
}

function void StringArrayInsertBefore_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, StringArrayNode,
      "Inserts a new member before the selected item" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void StringArrayInsertAfter(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   StringArrayNode a_oStringArrayNode = (StringArrayNode)Model.GetFirstSelectedNode().GetNode();
   a_oStringArrayNode = (StringArrayNode)Model.EditNode( a_oStringArrayNode );
   Graph.InsertString( a_oStringArrayNode, index + 1 );
   a_oStringArrayNode.Name = a_oStringArrayNode.UpdateName();
}

function void StringArrayInsertAfter_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, StringArrayNode,
      "Inserts a new member after the selected item" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void AddDataCaptureObject(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelNode || !a_oSelNode.IsDerived( VariableNode ) )
   {
      return;
   }

   VariableNode a_oVariableNode = (VariableNode)a_oSelNode;

   DataCapture a_oCreate;
   auto Type a_oType;
   auto TypeInformation a_oTypeInfo = a_oType.GetType().FindClassType( title );
   if( a_oTypeInfo && a_oTypeInfo.IsDerived( DataCapture ) )
   {
      a_oCreate = (DataCapture)a_oTypeInfo.CreateObject();
      if( !a_oCreate )
      {
         return;
      }
   }

   // Set the DataCapture container pointer to the selected VariableNode.
   a_oCreate.SetContainer( a_oVariableNode );

   // Get a data source, if applicable.
   Dialog.SelectDataCaptureDataSource( Model, a_oCreate );

   bool a_bVariableIsPacked;
   bool a_bDeleteDataCaptureObject;

   if( a_oVariableNode.IsDerived( BooleanNode ) )
   {
      BooleanNode a_oBooleanNode = (BooleanNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( BooleanDataCapture ) )
      {
         a_oBooleanNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( IntegerNode ) )
   {
      IntegerNode a_oIntegerNode = (IntegerNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( IntegerDataCapture ) )
      {
         a_oIntegerNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( UnsignedIntegerNode ) )
   {
      UnsignedIntegerNode a_oUnsignedIntegerNode =
         (UnsignedIntegerNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( UnsignedIntegerDataCapture ) )
      {
         a_oUnsignedIntegerNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( FloatNode ) )
   {
      FloatNode a_oFloatNode = (FloatNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( FloatDataCapture ) )
      {
         a_oFloatNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( FloatArrayNode ) )
   {
      FloatArrayNode a_oFloatArrayNode =
         (FloatArrayNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( FloatDataCapture ) )
      {
         a_oFloatArrayNode.Capture.AddObject( a_oCreate );
         a_bVariableIsPacked = true;
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( IntegerVectorNode ) )
   {
      IntegerVectorNode a_oIntegerVectorNode =
         (IntegerVectorNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( IntegerDataCapture ) )
      {
         DataCapture a_oDataCapture =
            (DataCapture)a_oIntegerVectorNode.Capture.GetFirstObject();
         if( a_oDataCapture && a_oDataCapture.IsDerived( IntegerVectorDataCapturePackage ) )
         {
            a_bVariableIsPacked = true;
            IntegerVectorDataCapturePackage a_oIntegerVectorDataCapturePackage =
               (IntegerVectorDataCapturePackage)a_oDataCapture;
            a_oIntegerVectorDataCapturePackage.Component.AddObject( a_oCreate );
         }
         else
         {
            a_oIntegerVectorNode.Capture.Clear();
            IntegerVectorDataCapturePackage a_oIntegerVectorDataCapturePackage =
               new IntegerVectorDataCapturePackage;
            a_bVariableIsPacked = true;
            a_oIntegerVectorDataCapturePackage.Component.AddObject( a_oCreate );
            a_oIntegerVectorNode.Capture.AddObject( a_oIntegerVectorDataCapturePackage );
         }
      }
      else
      if( a_oCreate.IsDerived( IntegerVectorDataCapture ) )
      {
         a_oIntegerVectorNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( UnsignedIntegerVectorNode ) )
   {
      UnsignedIntegerVectorNode a_oUnsignedIntegerVectorNode =
         (UnsignedIntegerVectorNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( UnsignedIntegerDataCapture ) )
      {
         DataCapture a_oDataCapture =
            (DataCapture)a_oUnsignedIntegerVectorNode.Capture.GetFirstObject();
         if( a_oDataCapture && a_oDataCapture.IsDerived( UnsignedIntegerVectorDataCapturePackage ) )
         {
            a_bVariableIsPacked = true;
            UnsignedIntegerVectorDataCapturePackage a_oUnsignedIntegerVectorDataCapturePackage =
               (UnsignedIntegerVectorDataCapturePackage)a_oDataCapture;
            a_oUnsignedIntegerVectorDataCapturePackage.Component.AddObject( a_oCreate );
         }
         else
         {
            a_oUnsignedIntegerVectorNode.Capture.Clear();
            UnsignedIntegerVectorDataCapturePackage a_oUnsignedIntegerVectorDataCapturePackage =
               new UnsignedIntegerVectorDataCapturePackage;
            a_bVariableIsPacked = true;
            a_oUnsignedIntegerVectorDataCapturePackage.Component.AddObject( a_oCreate );
            a_oUnsignedIntegerVectorNode.Capture.AddObject( a_oUnsignedIntegerVectorDataCapturePackage );
         }
      }
      else
      if( a_oCreate.IsDerived( UnsignedIntegerVectorDataCapture ) )
      {
         a_oUnsignedIntegerVectorNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( VectorNode ) )
   {
      VectorNode a_oVectorNode = (VectorNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( FloatDataCapture ) )
      {
         DataCapture a_oDataCapture = (DataCapture)a_oVectorNode.Capture.GetFirstObject();
         if( a_oDataCapture && a_oDataCapture.IsDerived( VectorDataCapturePackage ) )
         {
            a_bVariableIsPacked = true;
            VectorDataCapturePackage a_oVectorDataCapturePackage =
               (VectorDataCapturePackage)a_oDataCapture;
            a_oVectorDataCapturePackage.Component.AddObject( a_oCreate );
         }
         else
         {
            a_oVectorNode.Capture.Clear();
            VectorDataCapturePackage a_oVectorDataCapturePackage =
               new VectorDataCapturePackage;
            a_bVariableIsPacked = true;
            a_oVectorDataCapturePackage.Component.AddObject( a_oCreate );
            a_oVectorNode.Capture.AddObject( a_oVectorDataCapturePackage );
         }
      }
      else
      if( a_oCreate.IsDerived( VectorDataCapture ) )
      {
         a_oVectorNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( ColorNode ) )
   {
      ColorNode a_oColorNode = (ColorNode)Model.EditNode( a_oSelNode );
      if( a_oCreate.IsDerived( ColorDataCapture ) )
      {
         a_oColorNode.Capture.AddObject( a_oCreate );
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }
   else
   if( a_oVariableNode.IsDerived( MatrixNode ) )
   {
      MatrixNode a_oMatrixNode = (MatrixNode)Model.EditNode( a_oSelNode );
      DataCapture a_oDataCapture = (DataCapture)a_oMatrixNode.Capture.GetFirstObject();
      MatrixDataCapturePackage a_oMatrixDataCapturePackage;

      if( a_oDataCapture && a_oDataCapture.IsDerived( MatrixDataCapturePackage ) )
      {
         a_oMatrixDataCapturePackage = (MatrixDataCapturePackage)a_oDataCapture;
      }
      
      if( a_oCreate.IsDerived( FloatDataCapture ) || a_oCreate.IsDerived( VectorDataCapture ) )
      {
         if( a_oDataCapture && !( a_oDataCapture.IsDerived( MatrixDataCapturePackage ) ) )
         {
            a_oMatrixNode.Capture.Clear();
            a_oDataCapture = null;
         }

         if( !a_oDataCapture )
         {
            a_oMatrixDataCapturePackage = new MatrixDataCapturePackage;
            a_oMatrixNode.Capture.AddObject( a_oMatrixDataCapturePackage );
            a_oDataCapture = a_oMatrixDataCapturePackage;
         }
      }

      if( a_oCreate.IsDerived( FloatDataCapture ) )
      {
         // Try to find a VectorDataCapturePackage object with an open slot.
         bool a_bFoundSlot;
         int a_nVectorCapturePackageCount;
         for( int i = 0; i < a_oMatrixDataCapturePackage.Component.Objects.GetCount(); ++i )
         {
            DataCapture a_oIsVectorDataCapturePackage =
               (DataCapture)a_oMatrixDataCapturePackage.Component.Objects.Get( i );

            if( a_oIsVectorDataCapturePackage && a_oIsVectorDataCapturePackage.IsDerived( VectorDataCapturePackage ) )
            {
               VectorDataCapturePackage a_oVectorDataCapturePackage =
                  (VectorDataCapturePackage)a_oIsVectorDataCapturePackage;
               ++a_nVectorCapturePackageCount;

               if( a_oVectorDataCapturePackage.GetDimension() < Enum.GLSL_DataType_Vec4() )
               {
                  a_oVectorDataCapturePackage.Component.AddObject( a_oCreate );
                  a_bFoundSlot = true;
                  a_bVariableIsPacked = true;
               }
            }
         }

         if( !a_bFoundSlot && a_nVectorCapturePackageCount < Enum.GLSL_DataType_Vec4() )
         {
            VectorDataCapturePackage a_oVectorDataCapturePackage = new VectorDataCapturePackage;
            a_oVectorDataCapturePackage.Component.AddObject( a_oCreate );
            a_oMatrixDataCapturePackage.Component.AddObject( a_oVectorDataCapturePackage );
            a_bVariableIsPacked = true;
            a_bFoundSlot = true;
         }

         // The MatrixNode data capture slots are full.
         if( !a_bFoundSlot )
         {
            a_bDeleteDataCaptureObject = true; 
         }

         if( a_oCreate && a_bDeleteDataCaptureObject )
         {
            delete a_oCreate;
         }
      }
      else
      if( a_oCreate.IsDerived( VectorDataCapture ) )
      {
         // Add the object if there's a slot for it.
         if( a_oDataCapture && a_oDataCapture.IsDerived( MatrixDataCapturePackage ) )
         {
            a_oMatrixDataCapturePackage = (MatrixDataCapturePackage)a_oDataCapture;
            int a_nVectorCapturePackageCount;

            for( int i = 0; i < a_oMatrixDataCapturePackage.Component.Objects.GetCount(); ++i )
            {
               DataCapture a_oIsVectorDataCaptureType =
                  (DataCapture)a_oMatrixDataCapturePackage.Component.Objects.Get( i );

               if(   a_oIsVectorDataCaptureType && a_oIsVectorDataCaptureType.IsDerived( VectorDataCapturePackage ) ||
                     a_oIsVectorDataCaptureType && a_oIsVectorDataCaptureType.IsDerived( VectorDataCapture ) )
               {
                  ++a_nVectorCapturePackageCount;
               }
            }

            if( a_nVectorCapturePackageCount < Enum.GLSL_DataType_Vec4() )
            {
               a_oMatrixDataCapturePackage.Component.AddObject( a_oCreate );
               a_bVariableIsPacked = true;
            }
         }
      }
      else
      if( a_oCreate.IsDerived( MatrixDataCapture ) )
      {
         // Add the object.
         a_oMatrixNode.Capture.AddObject( a_oCreate );
         if( a_oCreate.GetDimension() == Enum.GLSL_DataType_Mat3() )
         {
            int a_nDim = Enum.GLSL_DataType_Vec3();
            a_oMatrixNode.Cols = a_nDim;
            a_oMatrixNode.Rows = a_nDim;
         }
      }
      else
      {
         a_bDeleteDataCaptureObject = true;
      }
   }

   if( a_oCreate && a_bDeleteDataCaptureObject )
   {
      delete a_oCreate;
   }

   // If we're not packing floats into a vector
   // or vectors into a matrix, then we want to
   // update the variable name so that all our
   // data capture variable names are consistent.
   // We don't do this when packing because a packed
   // variable would have multiple names.
   if( !a_bVariableIsPacked )
   {
      a_oVariableNode = (VariableNode)Model.EditNode( a_oSelNode );
      a_oVariableNode.NamePrefix = "";
      a_oVariableNode.Variable = a_oCreate.GetDestinationName();
      a_oVariableNode.NamePrefix = "";
      a_oVariableNode.Name = a_oVariableNode.UpdateName();
   }
}

function void AddDataCaptureObject_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, VariableNode,
      "Adds a DataCapture object to the selected VariableNode" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void RemoveDataCaptureObject(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string title,
   int index

   )
{
   // This implementation intentionally left blank.
}

function void RemoveDataCaptureObject_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, VariableNode,
      "Inserts a new member after the selected item" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single node" );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

function void ListIncludeFiles(

   ApplicationEventSource source,
   CommandExecutionEvent event,
   string filePath,
   int index

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
   {
      Group a_oGroup = (Group)a_oSelNode;
      NodeLink a_oInclude = new NodeLink;
      auto FilePath a_oIncludeName = new FilePath( filePath );
      a_oIncludeName.RemoveFilePath();
      a_oIncludeName.RemoveFileExtension();
      string a_sFilename = a_oIncludeName.GetPath() + ".glsl";
      a_oInclude.Name = "#include <" + a_sFilename + ">";
      auto Model3D a_oIncludeDocument;
      if( a_oIncludeDocument.OpenFile( filePath ) )
      {
         auto List a_lShaderSourceNodes;
         Graph.GetNodesFromDatabase( a_oIncludeDocument,
            a_lShaderSourceNodes, ShaderSourceNode );
         if( a_lShaderSourceNodes.GetCount() )
         {
            // Just get the first ShaderSourceNode
            // from the document.
            auto FilePath a_oNodeLinkPath =
               new FilePath( filePath );
            a_oNodeLinkPath.MakeRelativeToModel( a_oSelNode );
            Node a_oGenerator = (Node)a_lShaderSourceNodes.Get( 0 );
            a_oInclude.PathToNode = a_oGenerator.GetPathToNode();
            a_oInclude.PathToFile = a_oNodeLinkPath.GetPath();
         }
      }
      Model.AddNode( a_oInclude, a_oGroup, -1 );
   }
}

function void ListIncludeFiles_OnUpdate(

   ApplicationEventSource source,
   CommandUpdateEvent event,
   string title,
   int index

   )
{
   ValidateNodeCommandContext.TestContext( event.Info, ShaderDeclarationNode,
      "Lists available include files" );
   if( Model.GetSelectCount() != 1 )
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a single ShaderDeclarationNode" );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro NodeSetParameterFromList( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{878475E4-8A17-4B12-A8D5-94B4869F91A6}", Image=".\\icons\\generic_script_icon.bmp"]
{
   // Dummy command to reserve the GUID and associate the image.
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void SwitchTargetNode_OnShowPopupMenu( CommandBarEvent event )
[HandleEvent="SPA.ShellUIEvents.ShowPopupMenu"]
{
   CommandItem nodeLinkPopup = event.Bar.GetItemByText( 0, "NodeLinkSwitchTargetNode" );

   if( nodeLinkPopup )
   {
      // Transform the placeholder item into a popup.
      nodeLinkPopup.Text = "Switch Target &Node";
      nodeLinkPopup.IsPopup = true;
      nodeLinkPopup.ShowImage = false;
      nodeLinkPopup.ImageIndex = -1;
   }

   if( event.Bar.Title == "Switch Target &Node" )
   {
      // The newly transformed popup menu has been
      // selected so populate it.
      event.Bar.RemoveAllItems();
      Node a_oNode = (Node)Model.GetSelectedNode( 0 ).GetNode();

      // Get the node type.
      TypeInformation linkType;
      Model3D model;
      if( a_oNode.IsDerived( NodeLink ) )
      {
         NodeLink a_oGetLinkType = (NodeLink)a_oNode;
         linkType = a_oGetLinkType.LinkType;

         // Enumerate nodes in the external model if the
         // NodeLink is attached to an external model.
         // Otherwise we will enumerate them from the local
         // model by default.
         if( a_oGetLinkType.PathToNode != "" )
         {
            model = a_oGetLinkType.GetModel();
         }
      }

      if( !model )
      {
         model = Model;
      }

      bool a_bIncludeTypename;
      SpaMenuUtil.BuildMenuFromNodeSet( event.Bar,
                                        "{7A3B1C10-B614-4D30-96D3-4E8171967BCF}",
                                        Script,
                                        "NodeLinkSwitchTargetNodeCallback",
                                        model,
                                        linkType,
                                        "",
                                        a_bIncludeTypename );
   }

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////

   CommandItem nodeSelectorPopup = event.Bar.GetItemByText( 0, "NodeLinkSelector" );

   if( nodeSelectorPopup )
   {
      // Transform the placeholder item into a popup.
      nodeSelectorPopup.Text = "Include In &This Document";
      nodeSelectorPopup.IsPopup = true;
      nodeSelectorPopup.ShowImage = false;
      nodeSelectorPopup.ImageIndex = -1;
   }

   if( event.Bar.Title == "Include In &This Document" )
   {
      event.Bar.RemoveAllItems();
      Node a_oNode = (Node)Model.GetSelectedNode( 0 ).GetNode();

      // Get the node type.
      auto Model3D a_oModel3D;
      if( a_oNode.IsDerived( FileNode ) )
      {
         FileNode a_oFileNode = (FileNode)a_oNode;
         auto FilePath a_oDocumentPath = new FilePath( a_oFileNode.FilePath );
         if( Application.GetFileExtension( a_oDocumentPath.GetPath() ) == "box" )
         {
            a_oDocumentPath.ResolveToModel( a_oNode );
            a_oDocumentPath.Canonicalize();
            a_oModel3D.OpenFile( a_oDocumentPath.GetPath() );
         }
         else
         {
            a_oModel3D = null;
         }
      }

      if( a_oModel3D )
      {
         bool a_bIncludeTypename = true;
         SpaMenuUtil.BuildMenuFromNodeSet(
            event.Bar,
            "{7A3B1C10-B614-4D30-96D3-4E8171967BCF}",
            Script,
            "NodeSelectorCallback",
            a_oModel3D,
            Node,
            "",
            a_bIncludeTypename );
      }
      else
      {
         auto StrList a_slTitles;
         auto IntArray a_aiIndices;
         a_slTitles.Add( "This file does not reference a BOX document!" );
         a_aiIndices.Add( 0 );
         SpaMenuUtil.BuildMenuFromIntArray(
            event.Bar,
            0,
            "{7A3B1C10-B614-4D30-96D3-4E8171967BCF}",
            Script,
            "NodeSelectorCallback",
            a_slTitles,
            a_aiIndices,
            null );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void NodeLinkSwitchTargetNodeCallback(

   ApplicationEventSource sender,
   CommandExecutionEvent event,
   string nodePath

   )
{
   //Form a link between the selected link node and a node of the same type in the same database.
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();
      if( selNode.IsDerived( NodeLink ) )
      {
         NodeLink selLink = (NodeLink)selNode;
         NodeLink editLink = (NodeLink)Model.EditNode( selLink );
         string nodeName = Application.GetFileName( nodePath );
         //Log.DebugString( "Editing node link with path " + selLink.PathToNode + " --> " + nodeName + "\n" );
         if( selLink.PathToNode != "" )
         {
            // The NodeLink is external so set the external node path.
            editLink.PathToNode = nodePath;
         }
         else
         {
            // Set the internal node ptr.
            editLink.Node = Model.GetNodeByPath( nodePath );
         }
         editLink.Name = nodeName;
      }
   }
}

function void NodeLinkSwitchTargetNodeCallback_OnUpdate(

   ApplicationEventSource sender,
   CommandUpdateEvent event,
   string nodePath

   )
{
   // If there is only one selected NodeLink lets set the check
   // state of the UI item if the selected NodeLink's path matches
   // the UI item node path.
   if( Model.GetSelectCount() )
   {
      Node selNode = Model.GetSelectedNode( 0 ).GetNode();
      if( selNode && selNode.IsDerived( NodeLink ) )
      {
         NodeLink selLink = (NodeLink)selNode;
         if( selLink.PathToNode != "" && selLink.PathToNode == nodePath ||
             selLink.Node == Model.GetNodeByPath( nodePath ) )
         {
            event.Info.SetCheck( true );
         }
      }
   }
   ValidateNodeCommandContext.TestContext( event.Info, NodeLink,
   "Displays a list of nodes of the same type referenced by the link" );
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void NodeSelectorCallback(

   ApplicationEventSource sender,
   CommandExecutionEvent event,
   string nodePath

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !( a_oSelNode ) || a_oSelNode.IsDerived( FileNode ) == false )
   {
      return;
   }
   FileNode a_oSelFileNode = (FileNode)a_oSelNode;
   auto Model3D a_oIncludeDocument;
   auto FilePath a_oDocumentPath = new FilePath( a_oSelFileNode.FilePath );
   a_oDocumentPath.ResolveToModel( a_oSelFileNode );
   a_oIncludeDocument.OpenFile( a_oDocumentPath.GetPath() );
   if( !( a_oIncludeDocument ) )
   {
      return;
   }

   // Instantiate the remote node.
   Node a_oRemoteNode = (Node)a_oIncludeDocument.GetTypedNodeByPath( nodePath, Node );
   if( !( a_oRemoteNode ) )
   {
      return;
   }

   // Create and configure a new NodeLink.
   NodeLink a_oLink = new NodeLink;
   a_oLink.Name = a_oRemoteNode.Name;
   a_oLink.PathToFile = a_oSelFileNode.FilePath;
   a_oLink.PathToNode = nodePath;
   a_oLink.LinkType = a_oRemoteNode.GetType();

   // Add the node to the document.
   bool a_bAdded = Model.AddNode( a_oLink, a_oSelFileNode, -1 );

   // Delete if add fails.
   if( !( a_bAdded ) )
   {
      string a_sMessage = "Add failed in NodeSelectorCallback()";
      Console.Error( a_sMessage );
      delete a_oLink;
   }
}

function void NodeSelectorCallback_OnUpdate(

   ApplicationEventSource sender,
   CommandUpdateEvent event, string nodePath

   )
{
   if( Model.GetSelectCount() )
   {
      event.Info.SetEnabled( true );
      event.Info.Status.SetHint( "Creates a NodeLink that references a node in the included document" );
   }
   else
   {
      event.Info.SetEnabled( false );
      event.Info.Status.SetHint( "Please select a FileNode" );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro NodeLinkSwitchTargetNode( CommandPresentationModuleInfo commandInfo )
[Category="Link Commands", Guid="{7A3B1C10-B614-4D30-96D3-4E8171967BCF}", Image=".\\icons\\new_texture.bmp"]
{
   // Stub to reserve the GUID and associate the image.
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void SwitchTargetFile_OnShowPopupMenu( CommandBarEvent event )
[HandleEvent="SPA.ShellUIEvents.ShowPopupMenu"]
{
   //Log.DebugString( "SwitchDatabase_OnShowPopupMenu - " + event.Bar.Title + "\n" );

   CommandItem newPaletteDatabasePopup = event.Bar.GetItemByText( 0, "NodeLinkSwitchTargetFile" );
   if( newPaletteDatabasePopup )
   {
      // Transform the placeholder item into a popup.
      newPaletteDatabasePopup.Text = "Switch Target &File";
      newPaletteDatabasePopup.IsPopup = true;
   }
   else
   if( event.Bar.Title == "Switch Target &File" )
   {
      // The newly transformed popup menu has been
      // selected so populate it.
      event.Bar.RemoveAllItems();

      if( Model.GetSelectCount() &&
            Model.GetSelectedNode( 0 ).GetNode().IsDerived( NodeLink ) &&
            ((NodeLink)Model.GetSelectedNode( 0 ).GetNode()).PathToFile != "" )
      {
         auto FilePath a_oFolderPath = new FilePath( ((NodeLink)Model.GetFirstSelectedNode().GetNode()).PathToFile );
         a_oFolderPath.ResolveToModel( Model );
         a_oFolderPath.RemoveFileName();

         string a_sCommandGuid = "{9E54BB2A-652C-45C5-93D4-A86007DA2BAA}";
         string a_sFunctionCallback = "NodeLinkSwitchTargetFileCallback";
         string a_sFileType = "*.box";

         SpaMenuUtil.BuildContextMenuFromDirectoryContents(
            event.Bar,
            a_sCommandGuid,
            a_oFolderPath.GetPath(),
            Script,
            a_sFunctionCallback,
            a_sFileType );
      }
      else
      {
         event.Bar.InsertItem(
            0,
            "No External Files Found", "{00000000-0000-0000-0000-000000000000}",
            -1,
            false,
            true );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void NodeLinkSwitchTargetFileCallback(

   ApplicationEventSource sender,
   CommandExecutionEvent event,
   string fileName

   )
{
   for( int i = 0; i < Model.GetSelectCount(); ++ i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oNode.IsDerived( NodeLink ) )
      {
         NodeLink a_oNodeLink = (NodeLink)Model.EditNode(a_oNode);
         string a_sRelativePath = Application.MakeRelativePath( fileName, Model.Filename );
         a_oNodeLink.PathToFile = a_sRelativePath;
      }
   }
}

function void NodeLinkSwitchTargetFileCallback_OnUpdate(

   ApplicationEventSource sender,
   CommandUpdateEvent event,
   string fileName

   )
{
   // ifthere is only one selected NodeLink lets set the check
   // state of the UI item if the selected NodeLink's file path matches
   // the UI item file path.
   if( Model.GetSelectCount() )
   {
      Node selNode = Model.GetSelectedNode( 0 ).GetNode();
      if( selNode && selNode.IsDerived( NodeLink ) )
      {
         NodeLink selLink = (NodeLink)selNode;
         auto FilePath origPath = new FilePath( fileName );
         auto FilePath testPath = new FilePath( selLink.PathToFile );
         testPath.ResolveToModel( Model );
         origPath.Canonicalize();
         testPath.Canonicalize();
         //Log.DebugString( "NodeLink paths\n   " + origPath.GetPath() + "\n   " + testPath.GetPath() + "\n" );
         if( origPath.GetPath() == testPath.GetPath() )
         {
            event.Info.SetCheck( true );
         }
      }
   }

   ValidateNodeCommandContext.TestContext( event.Info, NodeLink,
      "Switches the palette file referenced by a link node that points at a material" );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro NodeLinkSwitchTargetFile( CommandPresentationModuleInfo commandInfo )
[Category="Expression Commands", Guid="{9E54BB2A-652C-45C5-93D4-A86007DA2BAA}", Image=".\\icons\\box_document.bmp"]
{
   // Stub to reserve the GUID and associate the image.
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void OpenProjectFolder_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node,
      "Opens the containing folder for any underlying file parameters" );
}

macro OpenProjectFolder( CommandPresentationModuleInfo commandInfo )
[Category="Expression Commands", Guid="{3343D36F-F825-42AC-AD36-F7EDA39179CD}", Image=".\\icons\\generic_script_icon.bmp"]
{
   string a_sContainingFolder;
   Node a_oNode;

   if( !( Model.GetSelectCount() ) )
   {
      a_sContainingFolder = Application.GetFilePath( Model.Filename );
   }

   a_oNode = (Node)Model.GetFirstSelectedNode().GetNode();

   if( a_oNode )
   {
      if( a_oNode.IsDerived( FileNode ) )
      {
         FileNode a_oFileNode = (FileNode)a_oNode;
         a_sContainingFolder = Application.GetFilePath(
            Application.ResolveModelRelativePath( a_oFileNode.FilePath ) );
      }
      if( a_oNode.IsDerived( Program ) )
      {
         Program a_oProgram = (Program)a_oNode;
         a_sContainingFolder = Application.GetFilePath(
            Application.ResolveModelRelativePath( a_oProgram.GetVertexFile() ) );
      }
      else
      if( a_oNode.IsDerived( ScriptNode ) )
      {
         ScriptNode a_oScriptNode = (ScriptNode)a_oNode;
         a_sContainingFolder = Application.GetFilePath(
            Application.ResolveModelRelativePath( a_oScriptNode.ScriptFile ) );
      }
      else
      if( a_oNode.IsDerived( Texture ) )
      {
         Texture a_oTexture = (Texture)a_oNode;
         a_sContainingFolder = Application.GetFilePath(
            Application.ResolveModelRelativePath( a_oTexture.PathToFile ) );
      }
      else
      if( a_oNode.IsDerived( NodeLink ) )
      {
         NodeLink a_oNodeLink = (NodeLink)a_oNode;
         if( a_oNodeLink.IsExternal() )
         {
            a_sContainingFolder = Application.GetFilePath(
               Application.ResolveModelRelativePath( a_oNodeLink.PathToFile ) );
         }
      }
      else
      if( a_oNode.IsDerived( ConfigNode ) )
      {
         ConfigNode a_oConfigNode = (ConfigNode)a_oNode;
         a_sContainingFolder = a_oConfigNode.GetAbsolutePath();
      }
      else
      if( a_oNode.IsDerived( AppScaffoldNode ) )
      {
         AppScaffoldNode a_oAppScaffoldNode = (AppScaffoldNode)a_oNode;
         auto FilePath a_oAppFolder = new FilePath( a_oAppScaffoldNode.AppXMLPath );
         a_oAppFolder.ResolveToModel( Model );
         a_oAppFolder.RemoveFileName();
         a_sContainingFolder = a_oAppFolder.GetPath();
      }
      else
      if( a_oNode.IsDerived( CommandRepNode ) )
      {
         CommandRepNode a_oCommandRepNode = (CommandRepNode)a_oNode;
         auto FilePath a_oExtendedDoc = new FilePath( a_oCommandRepNode.GetDocFilePathComplete() );
         a_oExtendedDoc.ResolveToModel( Model );
         a_oExtendedDoc.RemoveFileName();
         a_sContainingFolder = a_oExtendedDoc.GetPath();
      }
   }

   Application.ShellExec( a_sContainingFolder ); 
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CreateDisplaceModifierFromBitmap_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   if( Model.Filename == "" )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "This command is disabled when the file is not saved" );
      return;   
   }

   ValidateNodeCommandContext.TestContext(
      commandInfo,
      Node,
      "Creates a DisplaceModifier from a .BMP or .PNG image" );
}

macro CreateDisplaceModifierFromBitmap()
[Category="Mesh Commands", Guid="{150437DA-9CB0-4CF8-A9B8-18126C9F8604}", Image=".\\icons\\generic_script_icon.bmp"]
{
   if( !( SpaFileUtil.ValidateCurrentFileState( "" ) ) || !( Model.GetSelectCount() ) )
   {
      return;
   }

   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();

      if( selNode.IsDerived( Mesh ) || selNode.IsDerived( RectangleGeometryModifier ) )
      {
         ParametricMesh a_oParentNode;
         int a_iInsertIndex;

         if( selNode.IsDerived( ParametricMesh ) )
         {
            a_oParentNode = (ParametricMesh)selNode;
            a_iInsertIndex = -1;
         }
         else
         if( selNode.IsDerived( RectangleGeometryModifier ) )
         {
            a_oParentNode = (ParametricMesh)selNode.Parent();
            a_iInsertIndex = a_oParentNode.GetChildIndex( selNode ) + 1;
         }

         string a_sFilter = "All Imagery Files (*.bmp; *.png; *.tga; *.tif; *.tiff )|*.bmp;*.png;*.tga;*.tif;*.tiff|All Files (*.*)|*.*||";
         string a_sTitle = "Select an imagery file";
         StrList files = new StrList;
         Application.BrowseFileOpen( 3, 1, a_sFilter, "", a_sTitle, files );

         string a_sFile       = files.Get( 0 );
         string a_sPath       = Application.GetFilePath( a_sFile );
         string a_sName       = Application.GetFileName( a_sFile );
         string a_sExtension  = Application.GetFileExtension( a_sFile );

         if( a_sExtension == "tif" || a_sExtension == "tiff" )
         {
            SpaTerrainUtil.CreateGeographicTerrain( a_oParentNode, files, a_iInsertIndex );
         }
         else
         {
            for( int file = 0; file < files.GetCount(); ++file )
            {
               if( a_sFile == "" )
               {
                  continue;
               }
               SpaTerrainUtil.GenerateDisplaceModifier( a_sFile, a_oParentNode, a_iInsertIndex );
            }
         }

         delete files;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////////////

function void MeshInvalidateAndRegenerate_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Mesh,
      "Invalidates and regenerates the selected mesh" );
}
 
macro MeshInvalidateAndRegenerate()
[Category="Hierarchy Commands", Guid="{61004374-0FFB-482B-B623-CF2F0E9471CD}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();

      if( selNode.IsDerived( Mesh ) || selNode.IsDerived( RectangleGeometryModifier ) )
      {
         ParametricMesh a_oParametricMesh = (ParametricMesh)Model.GetSelectedNode(0).GetNode();
         a_oParametricMesh.InvalidateMesh();
         a_oParametricMesh.GenerateMesh();
      }
   }
}

///////////////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////////////

function void NodeEnumerateGuid_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node,
      "Enumerates the node's GUID in the output window" );
}

macro NodeEnumerateGuid()
[Category="Hierarchy Commands", Guid="{8EE12D2D-A0CA-424B-B339-8AEF72DBACFE}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oNode = (Node)Model.GetSelectedNode(i).GetNode();
      Console.Message( "GUID: " + a_oNode.GetGuid().Value );
   }
}

///////////////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////////////

function void LightCameraStateNodeEnumerateDataSource_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Mesh,
      "Enumerates the LightCameraStateNode's data source name in the output window" );
}

macro LightCameraStateNodeEnumerateDataSource()
[Category="Expression Commands", Guid="{2C47A52E-CE43-4587-9D8A-3AF1C398F1A2}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      LightCameraStateNode a_oLightCameraStateNode = (LightCameraStateNode)Model.GetSelectedNode(i).GetNode();
      Node a_oNode = (Node)a_oLightCameraStateNode.DataSourceLink;
      Console.Message( a_oNode.Name );
   }
}

///////////////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////////////

function void EnumerateNodeClassAndID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   commandInfo.Status.SetHint( "Enumerate the CLASS and ID parameters for all nodes in the database" );
}

macro EnumerateNodeClassAndID()
[Category="Expression Commands", Guid="{FFA48C20-1B71-450B-A1AB-0C189BC28ABE}", Image=".\\icons\\generic_script_icon.bmp"]
{
   string a_sNodeClassAndID;
   auto List a_lGraphNodes;
   Graph.GetNodesFromDatabase( Model, a_lGraphNodes, Node );

   for( int items = 0; items < a_lGraphNodes.GetCount(); ++items )
   {
      Node a_oNode = (Node)a_lGraphNodes.Get(items);
      string a_sNodeClass = "NONE";
      string a_sNodeID = "NONE";
            
      if( a_oNode.Class != "" )
      {
         a_sNodeClass = a_oNode.Class;
      }
      if( a_oNode.ID != "" )
      {
         a_sNodeID = a_oNode.ID;
      }
      
      a_sNodeClassAndID += "NAME = " +
                           a_oNode.Name +
                           " CLASS = " +
                           a_sNodeClass +
                           " ID = " +
                           a_sNodeID +
                           " GUID = " +
                           a_oNode.GetGuid().Value +
                           " DATABASE PATH = " +
                           a_oNode.GetPathToNode() +
                           "\n";
   }

   Console.Info( a_sNodeClassAndID );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EnumerateLightStackSupportedParameters_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LightStackNode,
      "Enumerates the current set of light source and destination parameters" );
}

macro EnumerateLightStackSupportedParameters()
[Category="Node Commands", Guid="{3DCA2197-C704-4DE9-BF39-2E8E425723D9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   int a_iSelectCount = Model.GetSelectCount();
   for( int nodes = 0; nodes < a_iSelectCount; ++nodes )
   {
      Node a_oSelectedNode = (Node)Model.GetSelectedNode(nodes).GetNode();
      if( a_oSelectedNode && a_oSelectedNode.IsDerived( LightStackNode ) )
      {
         LightStackNode a_oLightStackNode = (LightStackNode)a_oSelectedNode;
         string a_sMessage;
         a_sMessage += "\n";
         a_sMessage += "Valid source and destination members for light parameters are listed below.\n";
         a_sMessage += "The variable name must be set to the first parameter and the variable class must be set to the second parameter.\n";
         int a_iLightSourceMembers = a_oLightStackNode.GetLightSourceMemberCount();
         
         for( int members = 0; members < a_iLightSourceMembers; ++ members )
         {
            a_sMessage += a_oLightStackNode.GetSourceIdentifier( members ) +
               ", " + a_oLightStackNode.GetDestinationIdentifier( members ) + "\n";
         }

         Console.Message( a_sMessage );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void StructNodeSetNameFromIdentifier_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, StructNode, "Sets the StructNode name from its declaration" );
}

macro StructNodeSetNameFromIdentifier()
[Category="Node Commands", Guid="{F527DF91-EB78-4337-9D26-44D9DA70D97F}", Image=".\\icons\\generic_script_icon.bmp"]
{
   int a_iSelectCount = Model.GetSelectCount();

   for( int nodes = 0; nodes < a_iSelectCount; ++nodes )
   {
      Node a_oSelectedNode = (Node)Model.GetSelectedNode(nodes).GetNode();

      if( a_oSelectedNode && a_oSelectedNode.IsDerived( StructNode ) )
      {
         StructNode a_oStructNode = (StructNode)Model.EditNode( a_oSelectedNode );

         Node a_oIsDeclarationDataSource = (Node)a_oStructNode.DeclarationDataSource;
         if( a_oIsDeclarationDataSource && a_oIsDeclarationDataSource.IsDerived( StructNode ) )
         {
            StructNode a_oDeclarationDataSource = (StructNode)a_oIsDeclarationDataSource;
            string a_sTypeDeclarator = a_oDeclarationDataSource.Block.BlockName;
            string a_sStructInstanceName = a_oStructNode.Block.BlockName;
            a_oStructNode.Name = a_sTypeDeclarator + " " + a_sStructInstanceName;
         }
         else
         {
            string a_sStructDeclaration;
            a_sStructDeclaration += "struct ";
            a_sStructDeclaration += a_oStructNode.Block.BlockName;
            a_oStructNode.Name = a_sStructDeclaration;
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function void MeshToggleEdgeDisplay_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh edge display" );
}

macro MeshToggleEdgeDisplay()
[Category="Mesh Commands", Guid="{1F91F926-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\mesh_edge_display.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.DisplayEdges = !mesh.DisplayEdges;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshToggleHiddenEdgeDisplay_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh hidden edge display" );
}

macro MeshToggleHiddenEdgeDisplay()
[Category="Mesh Commands", Guid="{1F91F922-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\mesh_hidden_edge_display.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.DisplayHiddenEdges = !mesh.DisplayHiddenEdges;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshToggleVertexDisplay_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh vertex display" );
}

macro MeshToggleVertexDisplay()
[Category="Mesh Commands", Guid="{1F91F923-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\mesh_vertex_display.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.DisplayVertices = !mesh.DisplayVertices;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshToggleVertexNormalDisplay_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh vertex normal display" );
}

macro MeshToggleVertexNormalDisplay()
[Category="Mesh Commands", Guid="{1F91F924-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\mesh_vertex_normal_display.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.DisplayVertexNormals = !mesh.DisplayVertexNormals;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshToggleFaceNormalDisplay_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh face normal display" );
}

macro MeshToggleFaceNormalDisplay()
[Category="Mesh Commands", Guid="{1F91F925-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\mesh_face_normal_display.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.DisplayFaceNormals = !mesh.DisplayFaceNormals;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshRegenerate_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Toggle mesh face normal display" );
}

macro MeshRegenerate()
[Category="Mesh Commands", Guid="{CA93E748-F081-4183-8D88-B5DB9664973F}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node node = Model.GetSelectedNode( i ).GetNode();
      
      if( node.IsDerived( ParametricMesh ) )
      {
         ParametricMesh mesh = (ParametricMesh)Model.EditNode( node );
         mesh.InvalidateMesh();
         mesh.GenerateMesh();
      }
   }
}


///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshCreateChannelModifierSet_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Adds the minimum a set of channel modifiers" );
}

macro MeshCreateChannelModifierSet()
[Category="Mesh Commands", Guid="{3081AD70-6E60-4BE5-8423-8A11209149C4}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();
      if( selNode.IsDerived( Mesh ) )
      {
         AddChannelModifier tchannel_modifier = new AddChannelModifier;
         tchannel_modifier.Name = "TextureAttributesChannelModifier";
         tchannel_modifier.Attribute = 3;
         tchannel_modifier.Dimension = 2;

         AddChannelModifier nchannel_modifier = new AddChannelModifier;
         nchannel_modifier.Name = "NormalAttributesChannelModifier";
         nchannel_modifier.Attribute = 1;
         nchannel_modifier.Dimension = 3;

         AddChannelModifier cchannel_modifier = new AddChannelModifier;
         cchannel_modifier.Name = "ColorAttributesChannelModifier";
         cchannel_modifier.Attribute = 2;
         cchannel_modifier.Dimension = 4;

         SpaNodeUtil.AddModifier( cchannel_modifier, i );
         SpaNodeUtil.AddModifier( nchannel_modifier, i );
         SpaNodeUtil.AddModifier( tchannel_modifier, i );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MeshConfigureTangentSpaceNormals_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ParametricMesh, "Configures the mesh for tangent space normal mapping" );
}

macro MeshConfigureTangentSpaceNormals()
[Category="Mesh Commands", Guid="{7C2C050C-9C9B-4252-8B04-2E52BB5C57A5}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();
      if( selNode.IsDerived( ParametricMesh ) )
      {   
         ParametricMesh a_oParametricMesh = (ParametricMesh)selNode;
         Graph.ConfigureMeshAttributesForTangentSpaceNormals( a_oParametricMesh );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeGetGraphIndex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Returns the graph index of the selected node" );
}

macro NodeGetGraphIndex()
[Category="Node Commands", Guid="{AB52A5AB-9614-4F10-81EA-1F5988286EAC}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node selNode = Model.GetSelectedNode( i ).GetNode();
      Console.Message( selNode.GetDistanceFromRoot( Model ) );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeGetDistancesForSelection_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Returns the distance between two or more selected nodes" );
}

macro NodeGetDistancesForSelection()
[Category="Node Commands", Guid="{FEF5838D-F055-4119-B566-63B323F99A81}", Image=".\\icons\\generic_script_icon.bmp"]
{
   string a_sMessage;
   auto List a_lSelectedNodes;
   SpaSelectUtil.GetSelectedNodes( a_lSelectedNodes );
   for( int i = 0; i < a_lSelectedNodes.GetCount() - 1; ++i )
   {
      Node a_oNodeA = (Node)a_lSelectedNodes.Get( i );
      if( i < a_lSelectedNodes.GetCount() - 1 )
      {
         Node a_oNodeB = (Node)a_lSelectedNodes.Get( i + 1 );
         int a_iDistance = SpaMathUtil.GetDistanceBetweenNodes( Model, a_oNodeA, a_oNodeB );

         a_sMessage += "\nDistance from \"" + a_oNodeA.Name + "\" to \"" + a_oNodeB.Name + "\" = " + a_iDistance;
      }
   }

   Console.Info( a_sMessage );

}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeCompareScope_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node, "Returns the graph index of the selected node" );
   if( Model.GetSelectCount() != 2 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select 2 nodes" );
   }
}

macro NodeCompareScope()
[Category="Node Commands", Guid="{868057B4-7576-4F2F-9D94-5E89E40162A0}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Node selNode0 = Model.GetSelectedNode( 0 ).GetNode();
   Node selNode1 = Model.GetSelectedNode( 1 ).GetNode();
   Console.Message( selNode0.IsInScopeOf( selNode1 ) );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void AppScaffoldNodeRun_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, AppScaffoldNode,
      "Runs the selected application" );
}

macro AppScaffoldNodeRun()
[Category="Node Commands", Guid="{DBB487AB-C3F5-403F-A301-9D0A3A52A644}", Image=".\\icons\\generic_script_icon.bmp"]
{
   AppScaffoldNode a_oAppScaffoldNode =
      (AppScaffoldNode)Model.GetSelectedNode(0).GetNode();
   string a_sExecPath =
      Application.ResolveModelRelativePath( a_oAppScaffoldNode.AppFilePath );
   Application.ShellExec( a_sExecPath );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void IsInterfaceTypeItem( CommandPresentationModuleInfo commandInfo )
{
   if( Model.GetSelectCount() )
   {
      InterfaceElementNode a_oIsCommandItem =
         (InterfaceElementNode)Model.GetSelectedNode(0).GetNode();
      if( a_oIsCommandItem.Element != Enum.InterfaceElements_Item() )
      {
         commandInfo.SetEnabled( false );
         commandInfo.Status.SetHint( "You can only invoke this command for InteraceElementNodes of element type 'Item'" );
      }
   }
}

function void InterfaceElementSyncLocalInterfaceName_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, InterfaceElementNode,
      "Synchronizes the command's interface name for all interface elements ( in the same interface ) with the same GUID" );
   IsInterfaceTypeItem( commandInfo );
}

macro InterfaceElementSyncLocalInterfaceName()
[Category="Node Commands", Guid="{D2F559B7-7B9C-4C64-A542-4027B57CFA35}", Image=".\\icons\\generic_script_icon.bmp"]
{
   InterfaceElementNode a_oSourceInterfaceElementNode =
      (InterfaceElementNode)Model.GetSelectedNode(0).GetNode();
   Node a_oParent = (Node)a_oSourceInterfaceElementNode.Parent();
   Graph.SyncInterfaceElement( a_oSourceInterfaceElementNode, a_oParent, false );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeShellExecByType_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Node,
      "Loads external content ( such as textures ) in their editing application" );
}

macro NodeShellExecByType()
[Category="Node Commands", Guid="{5EC7742E-540A-42A3-AD6E-E8ADB8242961}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Node a_oNode = (Node)Model.GetSelectedNode(0).GetNode();
   auto FilePath a_oExternalContentPath;
   if( a_oNode && a_oNode.IsDerived( Texture ) )
   {
      Texture a_oTexture = (Texture)a_oNode;
      a_oExternalContentPath.SetPath( a_oTexture.PathToFile );
   }
   else
   if( a_oNode && a_oNode.IsDerived( FileNode ) )
   {
      FileNode a_oFileNode = (FileNode)a_oNode;
      a_oExternalContentPath.SetPath( a_oFileNode.FilePath );
   }
   else
   if( a_oNode && a_oNode.IsDerived( ScriptNode ) )
   {
      ScriptNode a_oScriptNode = (ScriptNode)a_oNode;
      a_oExternalContentPath.SetPath( a_oScriptNode.ScriptFile );
   }
   else
   if( a_oNode && a_oNode.IsDerived( InstallerConfigNode ) )
   {
      InstallerConfigNode a_oInstallerConfigNode = (InstallerConfigNode)a_oNode;
      a_oExternalContentPath.SetPath( a_oInstallerConfigNode.PathToFile );
   }
   else
   if( a_oNode && a_oNode.IsDerived( AppScaffoldNode ) )
   {
      AppScaffoldNode a_oAppScaffoldNode = (AppScaffoldNode)a_oNode;
      a_oExternalContentPath.SetPath( a_oAppScaffoldNode.AppXMLPath );
   }
   else
   if( a_oNode && a_oNode.IsDerived( HelpConfigNode ) )
   {
      HelpConfigNode a_oHelpConfigNode = (HelpConfigNode)a_oNode;
      auto FilePath a_oServerRoot = new FilePath( a_oHelpConfigNode.ServerRoot );

      if( a_oServerRoot.IsRelative() )
      {
         a_oServerRoot.ResolveToPath( Application.GetFilePath( Model.Filename ) );
         a_oServerRoot.Canonicalize();
         //Console.Out( a_oServerRoot.GetPath() );
      }

      auto FilePath a_oHelpAddress = new FilePath( a_oHelpConfigNode.HelpAddress );
      if( a_oHelpAddress.IsRelative() )
      {
         a_oHelpAddress.ResolveToPath( a_oServerRoot.GetPath() );
         //Console.Out( a_oHelpAddress.GetPath() );
      }

      a_oExternalContentPath.SetPath( a_oHelpAddress.GetPath() );
   }

   a_oExternalContentPath.ResolveToModel( a_oNode );
      Application.ShellExec( a_oExternalContentPath.GetPath() );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

macro GetAllFilesFromDatabase( CommandPresentationModuleInfo commandInfo )
[Category="Node Commands", Guid="{796BCE13-82DD-448E-8BFB-018752762FA4}", Image=".\\icons\\generic_script_icon.bmp"]
{
   auto StrList a_slFilenames;
   auto StrList a_slBoxFiles;
   SpaValidationUtil.GetAllReferencedFiles(
      Model,
      a_slFilenames,
      a_slBoxFiles,
      true,
      commandInfo );

   // DEBUG
   SpaStrListUtil.Out( a_slFilenames );
   Console.Out( a_slBoxFiles.GetCount() );
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ValidateGenericDocumentFile_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   SpaSelectUtil.ValidateXmlDocumentCommandContext( commandInfo, "", "", true );
}

macro ValidateGenericDocumentFile()
[Category="Hierarchy Commands", Guid="{9FD4D02E-E3B2-4D98-BA8A-91F5BF959308}", Image=".\\icons\\generic_script_icon.bmp"]
{
   // Accumulate FileConfigNodes into a list. Either add all the
   // FileConfigNode children of a FolderConfigNode or just add
   // any selected FileConfigNodes.
   auto List a_lFileConfigNodes;
   Graph.GetDocumentsFromSelection( a_lFileConfigNodes );

   // Iterate the list of FileConfigNodes and validate each file by its type.
   for( int a_nNode = 0; a_nNode < a_lFileConfigNodes.GetCount(); ++a_nNode )
   {
      FileConfigNode a_oFileConfigNode = (FileConfigNode)a_lFileConfigNodes.Get( a_nNode );
      auto FilePath a_oAbsPath = new FilePath( a_oFileConfigNode.GetAbsolutePath() );
      if( a_oAbsPath.FileExists() == false )
      {
         string a_sMessage = "File does not exist: " + a_oAbsPath.GetPath();
         Console.Out( a_sMessage );
         continue;
      }
      a_oAbsPath.Canonicalize();

      if( a_oAbsPath.GetFileExtension() == "box" )
      {
         auto Model3D a_oRemoteDatabase;
         a_oRemoteDatabase.OpenFile( a_oFileConfigNode.GetAbsolutePath() );
         if( a_oRemoteDatabase )
         {
            SpaValidationUtil.ValidateGraph( a_oRemoteDatabase, false );
         }
      }
      else
      if( SpaFileUtil.IsXmlDocument( a_oAbsPath.GetFileExtension() ) )
      {
         if( !( SpaValidationUtil.ValidateXmlDocument( a_oAbsPath ) ) )
         {
            // Break out of the loop so we can address problems.
            break;
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ValidateInterfaceDefinitionFile_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, InterfaceElementNode, "Validates the XML interface definition file" );
}

macro ValidateInterfaceDefinitionFile()
[Category="Hierarchy Commands", Guid="{C2C7AC75-3FCA-4AAB-8559-5DBA912CA537}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( InterfaceElementNode ) )
      {
         InterfaceElementNode a_oInterfaceElementNode =
            (InterfaceElementNode)a_oSelNode;
         auto FilePath a_oAbsPath =
            new FilePath( a_oInterfaceElementNode.ShellOverload );
         a_oAbsPath.ResolveToModel( Model );

         if( SpaFileUtil.IsXmlDocument( a_oAbsPath.GetFileExtension() ) )
         {
            if( !( SpaValidationUtil.ValidateXmlDocument( a_oAbsPath ) ) )
            {
               // Break out of the loop so we can address problems.
               break;
            }
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CreateAppPaths( string p_sAppFilePath, StrList p_slAppFiles )
{
   auto StrList a_slAppFileExtensions;
   a_slAppFileExtensions.Add( "scenomeapp" );
   a_slAppFileExtensions.Add( "xml" );
   a_slAppFileExtensions.Add( "ico" );
   a_slAppFileExtensions.Add( "bmp" );
   a_slAppFileExtensions.Add( "box" );

   for( int ext = 0; ext < a_slAppFileExtensions.GetCount(); ++ext )
   {
      auto FilePath a_oAppPath = new FilePath( p_sAppFilePath + "." + a_slAppFileExtensions.GetAt( ext ) );
      string a_sPath = p_sAppFilePath + "." + a_slAppFileExtensions.GetAt( ext );
      if( ext > 0 )
      {
         // Canonicalize the paths except the app filename.
         a_oAppPath.Canonicalize();
      }
      p_slAppFiles.Add( a_oAppPath.GetPath() );
   }
}

function void CopyAppFiles( StrList p_slAppSourceFiles, StrList p_slAppDestinationFiles )
{
   for( int src = 0; src < p_slAppSourceFiles.GetCount(); ++src )
   {
      Application.CopyFile( p_slAppSourceFiles.GetAt( src ),
         p_slAppDestinationFiles.GetAt( src ) );
   }
}

function void CreateAppDefinitionFromTemplate( ApplicationConfigNode p_oParent )
{
   string a_sAppDocs = Application.GetApplicationDocumentsPath();
   string a_sSrcPath = a_sAppDocs + "Applications";
   string a_sOutputPath = Application.BrowseFileSave( 3, "", a_sSrcPath,
      "Enter the name of your new application directory or filename:" );

   if( a_sOutputPath == "" )
   {
      // Return and do nothing if the user does not specify a value. This might happen
      // if the user hits ESC to exit the dialog and does not send in a string value.
      return;
   }

   // Create a string for the file path and file name components.
   // Use the file path component ( such as MyNewProject ) as the filename,
   // and make sure we strip file any extension.
   auto FilePath a_oFilePath = new FilePath( a_sOutputPath );
   auto FilePath a_oAppFileName = new FilePath( a_sOutputPath );
   a_oAppFileName.RemoveFileExtension();
   a_oAppFileName.RemoveFilePath();
   Application.CreateDirectory( a_sOutputPath );

   // Now we're going to copy the basic application data.
   auto StrList a_slAppSourceFiles;
   auto StrList a_slAppDestinationFiles;
   string a_sAppSourceSubs = "Templates\\Types\\Application\\";
   CreateAppPaths( a_sAppDocs + a_sAppSourceSubs + "application", a_slAppSourceFiles );
   //SpaStrListUtil.Out( a_slAppSourceFiles );
   CreateAppPaths( a_sOutputPath + "\\" + a_oAppFileName.GetPath(), a_slAppDestinationFiles );
   //SpaStrListUtil.Out( a_slAppDestinationFiles );
   CopyAppFiles( a_slAppSourceFiles, a_slAppDestinationFiles );

   AppScaffoldNode a_oAppScaffoldNode = new AppScaffoldNode;
   a_oAppScaffoldNode.Name = a_oAppFileName.GetPath();
   for( int add = 0; add < a_slAppDestinationFiles.GetCount(); ++add )
   {
      auto FilePath a_oAppContent = new FilePath( a_slAppDestinationFiles.GetAt( add ) );
      a_oAppContent.Canonicalize();
      a_oAppContent.MakeRelativeToModel( p_oParent );
      a_oAppScaffoldNode.SetFilePath( add, a_oAppContent.GetPath() );
   }

   // Add the InterfaceElementNode tree.
   Graph.AddInterfaceTemplate( Model, a_oAppScaffoldNode );

   // Add all the new nodes to the model.
   Model.AddNode( a_oAppScaffoldNode, p_oParent, -1 );
}

function void CreateApplication_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ApplicationConfigNode,
      "Creates a new application from the application template" );
}

macro CreateApplication()
[Category="Application Commands", Guid="{40D23A75-D3A5-4134-B1A1-AFA3A625836C}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int sel = 0; sel < Model.GetSelectCount(); ++sel )
   {
      ApplicationConfigNode a_oApplicationConfigNode = (ApplicationConfigNode)Model.GetSelectedNode( sel ).GetNode();
      // Create the AppScaffoldNode.
      CreateAppDefinitionFromTemplate( a_oApplicationConfigNode );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CanonicalizePaths_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Model3D,
      "Canonicalizes all file paths in the document" );
}

macro CanonicalizePaths()
[Category="Hierarchy Commands", Guid="{48A4B2E3-5FA7-4643-BBF2-25490A23A1E0}", Image=".\\icons\\generic_script_icon.bmp"]
{
   auto List a_lNodes;
   Graph.GetNodesFromDatabase( Model, a_lNodes, Node );
   for( int node = 0; node < a_lNodes.GetCount(); ++node )
   {
      Node a_oNode = (Node)a_lNodes.Get( node );
      if( a_oNode && a_oNode.IsDerived( ConfigNode ) )
      {
         ConfigNode a_oConfigNode = (ConfigNode)a_oNode;
         a_oConfigNode.Visible = true;
         auto FilePath a_oFilePath = new FilePath( a_oConfigNode.BasePath );
         a_oFilePath.Canonicalize();
         a_oConfigNode.BasePath = a_oFilePath.GetPath();
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void FolderConfigNodeCreateDirectory_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, FolderConfigNode,
      "Creates the directory specified by the FolderConfigNode" );
}

macro FolderConfigNodeCreateDirectory()
[Category="Hierarchy Commands", Guid="{AEDEEF93-F3D7-47F0-BC2E-257DD66BC40E}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int node = 0; node < Model.GetSelectCount(); ++node )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( node ).GetNode();
      if( a_oNode && a_oNode.IsDerived( FolderConfigNode ) )
      {
         ConfigNode a_oConfigNode = (ConfigNode)a_oNode;
         if( a_oConfigNode.BasePath != "" )
         {
            SpaFileUtil.CreateDirectory( a_oConfigNode.GetAbsolutePath() );
         }
         else
         {
            auto Str a_oNewDirectory = new Str( "New Directory Name" );
            auto EnterTextDialog a_oDirectoryDialog;

            if( a_oDirectoryDialog.Show( a_oNewDirectory, "Type Directory Name Here", true, a_oNewDirectory ) )
            {
               a_oConfigNode.BasePath = a_oNewDirectory.Value;
               SpaFileUtil.CreateDirectory( a_oConfigNode.GetAbsolutePath() );
            }
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void InterfaceElementNodeSyncToCommand_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, InterfaceElementNode,
      "Sets the <item> COMMAND NAME STRING parameter to match the command name" );
}

macro InterfaceElementNodeSyncToCommand( CommandPresentationModuleInfo commandInfo )
[Category="Hierarchy Commands", Guid="{C283EC28-8C25-4E3D-ACE4-2E44F025D20F}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int node = 0; node < Model.GetSelectCount(); ++node )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( node ).GetNode();
      if( a_oNode && a_oNode.IsDerived( InterfaceElementNode ) )
      {
         InterfaceElementNode a_oInterfaceElementNode = (InterfaceElementNode)a_oNode;
         auto StrList a_slMessages;
         SpaBuildUtil.RefreshInterfaceElement(
            a_oInterfaceElementNode,
            a_slMessages,
            0,
            1,
            commandInfo );
         SpaBuildUtil.Error( a_slMessages );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void CommandRepNodeClearExtendedDocumentation_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, CommandRepNode,
      "Clears the extended document file parameter" );
}

macro CommandRepNodeClearExtendedDocumentation()
[Category="Hierarchy Commands", Guid="{F4B3AE0D-1215-44D5-ADF5-E62C46C6E847}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int node = 0; node < Model.GetSelectCount(); ++node )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( node ).GetNode();
      if( a_oNode && a_oNode.IsDerived( CommandRepNode ) )
      {
         CommandRepNode a_oCommandRepNode = (CommandRepNode)a_oNode;
         a_oCommandRepNode.DocumentationFilePath = "";
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ConfigNodeEnumerateAbsolutePath_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, FileConfigNode,
      "Clears the extended document file parameter" );
}

macro ConfigNodeEnumerateAbsolutePath()
[Category="Hierarchy Commands", Guid="{4112F8A1-AF3C-41F7-B127-97DE342CB7F9}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int node = 0; node < Model.GetSelectCount(); ++node )
   {
      Node a_oNode = (Node)Model.GetSelectedNode( node ).GetNode();
      if( a_oNode && a_oNode.IsDerived( ConfigNode ) )
      {
         ConfigNode a_oConfigNode = (ConfigNode)a_oNode;
         Console.Out( a_oConfigNode.GetAbsolutePath() );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EnumerateCommandRepNodeInstances_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, CommandRepNode,
      "Enumerates all references to the CommandRepNode in any local interface tree" );
}

macro EnumerateCommandRepNodeInstances()
[Category="Hierarchy Commands", Guid="{AECF3B77-68B5-41BC-8EE2-6BC289864258}", Image=".\\icons\\generic_script_icon.bmp"]
{
   CommandRepNode a_oCommandRepNode =
      (CommandRepNode)Model.GetFirstSelectedNode().GetNode();
   auto List a_lInterfaceElementNodes;
   Graph.GetNodesFromDatabase( Model, a_lInterfaceElementNodes, InterfaceElementNode );

   auto StrList a_slReferenceAddresses;
   SpaBuildUtil.GenerateCommandHeader( "EnumerateCommandRepNodeInstances", a_slReferenceAddresses );

   a_slReferenceAddresses.Add( "Finding references for the following command: " + a_oCommandRepNode.Name );
   a_slReferenceAddresses.Add( "" );
   bool a_bFoundReference = false;
   for( int node = 0; node < a_lInterfaceElementNodes.GetCount(); ++node )
   {
      Node a_oNode = (Node)a_lInterfaceElementNodes.Get( node );
      if( a_oNode && a_oNode.IsDerived( InterfaceElementNode ) )
      {
         InterfaceElementNode a_oInterfaceElementNode = (InterfaceElementNode)a_oNode;
         if( a_oInterfaceElementNode.GuidString == a_oCommandRepNode.Guid().Value )
         {
            a_bFoundReference = true;
            a_slReferenceAddresses.Add( "This command is referenced by: " + a_oInterfaceElementNode.GetPathToNode() );
         }
      }
   }
   if( a_bFoundReference )
   {
      SpaBuildUtil.Out( a_slReferenceAddresses );
   }
   else
   {
      string a_sMessage = "Unable to find any references for the following command: " + a_oCommandRepNode.Name +
         ". This command is unused.";
      Console.Info( a_sMessage );
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ListNodeCompact_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ListNode,
      "Adds any child items to the ListNode" );
   SpaSelectUtil.ListNodeHasChildItems( commandInfo );
}

macro ListNodeCompact()
[Category="Node Commands", Guid="{3A96B43A-66D7-47E4-A65A-4912ADF91669}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
      {
         ListNode a_oListNode = (ListNode)a_oSelNode;

         for( int a_nNode = 0; a_nNode < a_oListNode.ChildCount; ++a_nNode )
         {
            Node a_oNode = (Node)a_oListNode.Children[ a_nNode ].Clone();
            a_oListNode.NodeList.Add( a_oNode );
         }

         for( int a_nDelete = 0; a_nDelete < a_oListNode.ChildCount; ++a_nDelete )
         {
            Node a_oNode = (Node)a_oListNode.Children[ a_nDelete ];
            Model.DeleteNode( a_oNode );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ListNodeExtract_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ListNode,
      "Extracts ListNode items and parents them as children of the ListNode" );
   SpaSelectUtil.ListNodeHasCount( commandInfo );
}

macro ListNodeExtract()
[Category="Node Commands", Guid="{90B42EF6-15E5-4FD6-8F75-1E8FDAA12C14}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
      {
         ListNode a_oListNode = (ListNode)a_oSelNode;
         for( int a_nNode = 0; a_nNode < a_oListNode.NodeList.GetCount(); ++a_nNode )
         {
            Node a_oListMem = (Node)a_oListNode.NodeList.Get( a_nNode );
            Node a_oNew = (Node)a_oListMem.Clone();
            Model.AddNode( a_oNew, a_oListNode, -1 );
         }
         a_oListNode.NodeList.Clear();
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ListNodePopulate_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ListNode,
      "Adds items to the ListNode" );
}

macro ListNodePopulate()
[Category="Node Commands", Guid="{CA80570F-E8F8-4365-BACD-6D991AEED588}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
      {
         ListNode a_oListNode = (ListNode)a_oSelNode;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void ListNodeEnumerate_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ListNode, "Enumerates ListNode items" );
   SpaSelectUtil.ListNodeHasCount( commandInfo );
}

macro ListNodeEnumerate()
[Category="Node Commands", Guid="{512F4F15-87E7-42D8-BC86-53CF75E878E4}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( ListNode ) )
      {
         ListNode a_oListNode = (ListNode)a_oSelNode;
         for( int a_nNode = 0; a_nNode < a_oListNode.NodeList.GetCount(); ++a_nNode )
         {
            Node a_oListMem = (Node)a_oListNode.NodeList.Get( a_nNode );
            Console.Out( "<" + a_oListMem.GetType().GetTypeName() + "> " + a_oListMem.Name );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void LightArrayNodeAddNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, LightArrayNode, "Adds a Light to the LightArrayNode" );
}

macro LightArrayNodeAddNode()
[Category="Node Commands", Guid="{643B53BD-2050-4EA7-B315-575F681BB6BF}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( LightArrayNode ) )
      {
         LightArrayNode a_oLightArrayNode = (LightArrayNode)a_oSelNode;
         int a_nIndex = a_oLightArrayNode.NodeList.GetCount();
         Light a_oLight = new Light;
         a_oLight.Name = "Light" + a_nIndex;
         a_oLightArrayNode.NodeList.Add( a_oLight );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void MaterialArrayNodeAddNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, MaterialArrayNode, "Adds a Material to the MaterialArrayNode" );
}

macro MaterialArrayNodeAddNode()
[Category="Node Commands", Guid="{DCFCDCD3-CC47-418E-A979-AEB502475025}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( MaterialArrayNode ) )
      {
         MaterialArrayNode a_oMaterialArrayNode = (MaterialArrayNode)a_oSelNode;
         int a_nIndex = a_oMaterialArrayNode.NodeList.GetCount();
         Material a_oMaterial = new Material;
         a_oMaterial.Name = "Material" + a_nIndex;
         a_oMaterialArrayNode.NodeList.Add( a_oMaterial );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureArrayNodeAddNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, TextureArrayNode, "Adds a Texture to the TextureArrayNode" );
}

macro TextureArrayNodeAddNode()
[Category="Node Commands", Guid="{5F5B343B-21BC-4406-BB58-F42823B9A93B}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( TextureArrayNode ) )
      {
         TextureArrayNode a_oTextureArrayNode = (TextureArrayNode)a_oSelNode;
         int a_nIndex = a_oTextureArrayNode.NodeList.GetCount();
         Texture a_oTexture = new Texture;
         a_oTexture.Name = "Texture" + a_nIndex;
         a_oTextureArrayNode.NodeList.Add( a_oTexture );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TypeAggregatorNodeAddMembers_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, TypeAggregatorNode, "Validates the TypeAggregatorNode via unit tests" );
}

macro TypeAggregatorNodeAddMembers()
[Category="Node Commands", Guid="{025D3FAE-4F53-4A2A-A729-01AD65EDA88D}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( TypeAggregatorNode ) )
      {
         TypeAggregatorNode a_oVariableSearchObject = (TypeAggregatorNode)a_oSelNode;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TypeAggregatorNodeEnumerateMembers_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, TypeAggregatorNode, "Enumerates the TypeAggregatorNode members" );

   if( Model.GetSelectCount() > 1 )
   {
      commandInfo.Status.SetHint( "Please select a single TypeAggregatorNode" );
      commandInfo.SetEnabled( false );
   }
   else
   {
      TypeAggregatorNode a_oTypeAggregatorNode =
         (TypeAggregatorNode)Model.GetFirstSelectedNode().GetNode();
      if( !( a_oTypeAggregatorNode.NodeList.GetCount() ) )
      {
         commandInfo.Status.SetHint( "This TypeAggregatorNode is empty" );
         commandInfo.SetEnabled( false );
      }
   }
}

macro TypeAggregatorNodeEnumerateMembers()
[Category="Node Commands", Guid="{38FA3EE8-D7E0-4C23-B261-A501DCC23A71}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( TypeAggregatorNode ) )
      {
         TypeAggregatorNode a_oTypeAggregatorNode = (TypeAggregatorNode)a_oSelNode;
         for( int a_nCount = 0; a_nCount < a_oTypeAggregatorNode.NodeList.GetCount(); ++a_nCount )
         {
            Node a_oNode = (Node)a_oTypeAggregatorNode.NodeList.Get( a_nCount );
            Node a_oMember = (Node)a_oNode.Clone();
            Model.AddNode( a_oMember, a_oTypeAggregatorNode, -1 );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void StringArrayNodeAddMember_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, StringArrayNode, "Adds a string to the StringArrayNode" );
}

macro StringArrayNodeAddMember()
[Category="Node Commands", Guid="{A0BCC174-D6A9-4D64-8EE9-DC09778BC89D}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( StringArrayNode ) )
      {
         StringArrayNode a_oStringArrayNode = (StringArrayNode)Model.EditNode( a_oSelNode );
         auto Str a_oNewArrayMember = new Str( "new array member" );
         auto EnterTextDialog a_oStringMemberDialog;

         while( a_oNewArrayMember.Value != "" )
         {
            if( a_oStringMemberDialog.Show( "New String Member", "Enter text:", true, a_oNewArrayMember ) )
            {
               if( a_oNewArrayMember.Value == "" )
               {
                  break;
               }
               else
               {
                  a_oStringArrayNode.Objects.Add( a_oNewArrayMember.Value );
               }
            }
         }
         a_oStringArrayNode.Name = a_oStringArrayNode.UpdateName();
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void StringArrayNodeEnumerateMembers_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   SpaSelectUtil.ValidateStringArrayNodeContext( commandInfo, "Enumerates the StringArrayNode members" );
}

macro StringArrayNodeEnumerateMembers()
[Category="Node Commands", Guid="{E3E8D756-D4C0-4159-BCA7-2B8C09B27A9A}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( StringArrayNode ) )
      {
         StringArrayNode a_oStringArrayNode = (StringArrayNode)a_oSelNode;
         for( int a_nCount = 0; a_nCount < a_oStringArrayNode.Objects.GetCount(); ++a_nCount )
         {
            Console.Out( a_oStringArrayNode.Objects.Get( a_nCount ) );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void StringArrayNodeReplaceMembers_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   SpaSelectUtil.ValidateStringArrayNodeContext( commandInfo, "Replaces the StringArrayNode members" );
}

macro StringArrayNodeReplaceMembers()
[Category="Node Commands", Guid="{F8E935D6-DA08-444F-B42D-1314163F081D}", Image=".\\icons\\generic_script_icon.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oSelNode || !( a_oSelNode.IsDerived( StringArrayNode ) ) )
   {
      return;
   }

   StringArrayNode a_oStringArrayNode = (StringArrayNode)a_oSelNode;
   for( int a_nCount = 0; a_nCount < a_oStringArrayNode.Objects.GetCount(); ++a_nCount )
   {
      auto Str a_oNewArrayMember = new Str( a_oStringArrayNode.Objects.GetAt( a_nCount ) );
      auto EnterTextDialog a_oStringMemberDialog;

      if( a_oStringMemberDialog.Show( "Replace String Member", "Current member name:", true, a_oNewArrayMember ) )
      {
         if( a_oNewArrayMember.Value == "" )
         {
            break;
         }
         else
         {
            a_oStringArrayNode.Objects.Insert( a_oNewArrayMember.Value, a_nCount );
            a_oStringArrayNode.Objects.RemoveAt( a_nCount + 1 );
         }
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EnumerateChildCount_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Group, "Enumerates the node's child count" );
}

macro EnumerateChildCount()
[Category="Node Commands", Guid="{E7B4AD53-D530-437E-9104-1C2DC8B818AC}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Console.Info( ( ( Group )a_oSelNode ).ChildCount );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void GroupSortAlphabetically_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Group, "Sorts the group's child nodes by alphabetical order" );
}

function int ScriptSortByName( Node a, Node b )
{
   return a.Name < b.Name;
}

macro GroupSortAlphabetically()
[Category="Node Commands", Guid="{CA6944B3-D7F8-4437-AAC6-2C5B311F38AD}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelGroup = (Group)Model.GetSelectedNode( i ).GetNode();
         auto ScriptSortCallback a_oCallback = new ScriptSortCallback( Script, "ScriptSortByName" );
         auto MergeSort a_oSortAlgorithm;
         a_oSelGroup.SortChildren( a_oCallback, a_oSortAlgorithm, Model.GetOpenAction() );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void EnumerateNamespaceInfoLinks_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   string a_sHint = "Enumerates VariableExpressionNode<T> 'NamespaceLinks' state information";
   ValidateNodeCommandContext.TestContext( commandInfo, Group, a_sHint );
}

macro EnumerateNamespaceInfoLinks()
[Category="Node Commands", Guid="{E9B6569F-55BC-4C80-ACF4-6A8315EEBF55}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( VariableExpressionNode ) )
      {
         VariableExpressionNode a_oExpression = (VariableExpressionNode)a_oSelNode;
         auto List a_lNodes;
         auto IntArray a_aiArraySizes;
         auto IntArray a_aiArrayElements;
         auto StrList a_slNames;
         a_oExpression.NodeSelector.GetInfo(
            a_lNodes, 
            a_aiArraySizes,
            a_aiArrayElements,
            a_slNames );
         SpaListUtil.Out( a_lNodes );
         SpaIntArrayUtil.Out( a_aiArraySizes );
         SpaIntArrayUtil.Out( a_aiArrayElements );
         SpaStrListUtil.Out( a_slNames );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void TextureAddBoxImageProcessor_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, Texture, "Adds a BoxImageProcessor to the Texture's image processor list" );
}

macro TextureAddBoxImageProcessor()
[Category="Node Commands", Guid="{B5937F2D-A37F-406C-9B77-CA0DA8AC35EE}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Texture ) )
      {
         Texture a_oTexture = (Texture)a_oSelNode;
         BoxImageProcessor a_oBoxImageProcessor = new BoxImageProcessor;
         a_oTexture.ImageProcessorList.AddObject( a_oBoxImageProcessor );
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// macro
///////////////////////////////////////////////////////////////////////////////

function void NodeLinkSetTargetNodeFromList_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, NodeLink, "Allows you to choose the target Node from a list" );
}

macro NodeLinkSetTargetNodeFromList()
[Category="Node Commands", Guid="{E41E1C29-4A56-4806-8682-CE3336EB2167}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( NodeLink ) )
      {
         auto List a_lSourceNodes;
         Graph.GetNodesFromDatabase( Model, a_lSourceNodes, Node );

         // Instantiate a dialog object and declare
         // storage objects used by the dialog.
         auto SelectNodeDialog a_oSelectFunctionDialog;

         // Configure the select nodes dialog object.
         // Force the user to select a single node
         // that we can set as the capture object data source.
         auto List a_lDestinationNodes;
         a_oSelectFunctionDialog.SourceSet = a_lSourceNodes;
         a_oSelectFunctionDialog.DestSet = a_lDestinationNodes;
         a_oSelectFunctionDialog.SelRequired = true;
         a_oSelectFunctionDialog.SelAllowMultiple = false;

         // Set a concise title and info tip for the dialog.
         string a_sDialogTitle = "Select Node";
         string a_sInfoTip = "Select the node you wish to set as the NodeLink target:";

         // Display the dialog and get the selected node from the source nodes.
         // Set the selected node as the function we're going to call.
         if( a_oSelectFunctionDialog.Show( a_sDialogTitle, a_sInfoTip ) )
         {
            Node a_oNode = (Node)a_lDestinationNodes.GetFirst();
            NodeLink a_oSelLink = (NodeLink)a_oSelNode;
            a_oSelLink.Node = a_oNode;
            a_oSelLink.LinkType = a_oNode.GetType();
         }
      }
   }
}
