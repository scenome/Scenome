////////////////////////////////////////////////////////////////////////////////
//
// $file             TEMPLATE_SCRIPTS.SSL
// $author           Scenomics LLC
// $description      This script contains macros generated from templates in meta_util.ssl.
//
// Copyright 2004-2014 Scenomics LLC. All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////

import library "enumeration_util.ssl";
import library "graph_util.ssl";
import library "message_util.ssl";
import library "opengl_util.ssl";
import library "template_util.ssl";

// This library is automatically generated by CompileTemplateMacros() in META_UTIL.SSL. Local changes will be destroyed.

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateContainerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ContainerNode" );
}

macro CreateContainerNode()
[Category="Create Commands", Guid="{41F0E1B1-B271-4F83-8A82-2868E4092902}", Image=".\\icons\\new_container_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ContainerNode, "NewContainerNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateProjectGroup_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ProjectGroup" );
}

macro CreateProjectGroup()
[Category="Create Commands", Guid="{4AEBD9F7-D7D8-4912-A317-92AB3D67C1D7}", Image=".\\icons\\create_project_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ProjectGroup, "NewProjectGroup", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateCategoryGroup_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "CategoryGroup" );
}

macro CreateCategoryGroup()
[Category="Create Commands", Guid="{7D8C9B72-E96A-4172-8AC9-5A2124656DF1}", Image=".\\icons\\create_category_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, CategoryGroup, "NewCategoryGroup", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFolderGroup_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FolderGroup" );
}

macro CreateFolderGroup()
[Category="Create Commands", Guid="{B7F4959A-0C31-41AC-9A3E-D8FBBACF18C7}", Image=".\\icons\\create_folder_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FolderGroup, "NewFolderGroup", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformPaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UniformPaletteNode" );
}

macro CreateUniformPaletteNode()
[Category="Create Commands", Guid="{402F3796-C79E-4C0B-956F-BB81BD8E4832}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, UniformPaletteNode, "NewUniformPaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTexturePaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TexturePaletteNode" );
}

macro CreateTexturePaletteNode()
[Category="Create Commands", Guid="{A343E2FF-87F5-4DD2-A332-6872134B21AF}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TexturePaletteNode, "NewTexturePaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIncludePaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IncludePaletteNode" );
}

macro CreateIncludePaletteNode()
[Category="Create Commands", Guid="{AC0BDF2D-413A-41A5-8AE6-D160E788242C}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IncludePaletteNode, "NewIncludePaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDataPaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DataPaletteNode" );
}

macro CreateDataPaletteNode()
[Category="Create Commands", Guid="{2FFF9DAF-BDB6-4066-8035-67C2ABB4149B}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DataPaletteNode, "NewDataPaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTraversalGuardNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TraversalGuardNode" );
}

macro CreateTraversalGuardNode()
[Category="Create Commands", Guid="{2291553D-D533-484C-A1D5-D8C644D4F023}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TraversalGuardNode, "NewTraversalGuardNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialPaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MaterialPaletteNode" );
}

macro CreateMaterialPaletteNode()
[Category="Create Commands", Guid="{45712F55-7096-4CD0-84E2-20ECA55C86B6}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, MaterialPaletteNode, "NewMaterialPaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFileNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FileNode" );
}

macro CreateFileNode()
[Category="Create Commands", Guid="{8E9186EB-F561-4BB1-80FA-8ACFAAC57838}", Image=".\\icons\\create_file_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FileNode, "NewFileNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateScriptNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ScriptNode" );
}

macro CreateScriptNode()
[Category="Create Commands", Guid="{1F9220B7-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\create_script_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ScriptNode, "NewScriptNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateProgram_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Program" );
}

macro CreateProgram()
[Category="Create Commands", Guid="{1F9220CC-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\create_program_node_icon.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, Program, "NewProgram", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGroup_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Group" );
}

macro CreateGroup()
[Category="Create Commands", Guid="{1F91F915-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, Group, "NewGroup", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLOD_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LOD" );
}

macro CreateLOD()
[Category="Create Commands", Guid="{1F91FA01-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_lod.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LOD, "NewLOD", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateNodeLink_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "NodeLink" );
}

macro CreateNodeLink()
[Category="Create Commands", Guid="{1F91F958-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_link.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, NodeLink, "NewNodeLink", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateJumpStatementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "JumpStatementNode" );
}

macro CreateJumpStatementNode()
[Category="Create Commands", Guid="{DF1B13E4-5894-42BB-AF36-8CF391D99030}", Image=".\\icons\\new_jump_statement_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, JumpStatementNode, "return", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStatementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StatementNode" );
}

macro CreateStatementNode()
[Category="Create Commands", Guid="{1F922075-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_statement_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StatementNode, "NewStatementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStatementBlockNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StatementBlockNode" );
}

macro CreateStatementBlockNode()
[Category="Create Commands", Guid="{BAC4EC82-D66D-4B6B-B218-756F0CA2980D}", Image=".\\icons\\new_statement_block_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StatementBlockNode, "NewStatementBlockNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionParameterNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FunctionParameterNode" );
}

macro CreateFunctionParameterNode()
[Category="Create Commands", Guid="{B5CE0DBE-FA22-4126-85D0-CF31E2F521FF}", Image=".\\icons\\new_function_parameter_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FunctionParameterNode, "NewFunctionParameterNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFrameBuffer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FrameBuffer" );
}

macro CreateFrameBuffer()
[Category="Create Commands", Guid="{BD6677D9-B541-4E2D-9E12-CE061F810B02}", Image=".\\icons\\new_framebuffer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FrameBuffer, "NewFrameBuffer", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFrameBufferBind_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FrameBufferBind" );
}

macro CreateFrameBufferBind()
[Category="Create Commands", Guid="{5756757A-0990-4755-B173-179C6277C7DA}", Image=".\\icons\\new_framebuffer_bind_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FrameBufferBind, "NewFrameBufferBind", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ExpressionNode" );
}

macro CreateExpressionNode()
[Category="Create Commands", Guid="{3685CD75-A594-4583-907C-C35418C6F19C}", Image=".\\icons\\new_expression_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ExpressionNode, "NewExpressionNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateRenderTraversalNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "RenderTraversalNode" );
}

macro CreateRenderTraversalNode()
[Category="Create Commands", Guid="{7B6ED22F-6A05-4917-A973-3C18D4FDCB55}", Image=".\\icons\\new_render_traversal_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, RenderTraversalNode, "NewRenderTraversalNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateClearBuffersNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ClearBuffersNode" );
}

macro CreateClearBuffersNode()
[Category="Create Commands", Guid="{C54E90A2-BBAC-47F1-92A2-1F287A115311}", Image=".\\icons\\new_clear_buffers_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ClearBuffersNode, "NewClearBuffersNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStructureGroup_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StructureGroup" );
}

macro CreateStructureGroup()
[Category="Create Commands", Guid="{54D17942-F73D-42B7-AA98-E882C9E7D16C}", Image=".\\icons\\new_structure_group_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StructureGroup, "NewStructureGroup", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStencilNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StencilNode" );
}

macro CreateStencilNode()
[Category="Create Commands", Guid="{C8DA5319-288B-41E4-AAA9-E9F008698C58}", Image=".\\icons\\new_stencil_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StencilNode, "NewStencilNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateProgramOptions_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ProgramOptions" );
}

macro CreateProgramOptions()
[Category="Create Commands", Guid="{09BB7E91-771D-43CA-9B7F-E7D62C1992BA}", Image=".\\icons\\new_program_options_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ProgramOptions, "NewProgramOptions", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDeclareFunctionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclareFunctionNode" );
}

macro CreateDeclareFunctionNode()
[Category="Create Commands", Guid="{C1C6EFFE-3CA7-489D-BBA6-833E47ED5604}", Image=".\\icons\\new_declare_function_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DeclareFunctionNode, "NewDeclareFunctionNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIteratorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IteratorNode" );
}

macro CreateIteratorNode()
[Category="Create Commands", Guid="{2D025734-3C70-44CE-91C5-4349D5D7FAC0}", Image=".\\icons\\new_iterator_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IteratorNode, "NewIteratorNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UniformBufferNode" );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateUniformBufferNode()
[Category="Create Commands", Guid="{057BAE74-CCDD-4D8F-8A53-21D885EFC399}", Image=".\\icons\\new_uniform_buffer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, UniformBufferNode, "NewUniformBufferNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferBindNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UniformBufferBindNode" );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateUniformBufferBindNode()
[Category="Create Commands", Guid="{0E16CBE5-E2F0-4989-8A85-404E105D92C7}", Image=".\\icons\\new_uniform_buffer_bind_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, UniformBufferBindNode, "NewUniformBufferBindNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicLightArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicLightArrayNode" );
}

macro CreateDynamicLightArrayNode()
[Category="Create Commands", Guid="{92C8981A-CAE9-4521-BDF6-2EE6B986A917}", Image=".\\icons\\new_dynamic_light_array_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DynamicLightArrayNode, "NewDynamicLightArrayNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateProgramVariationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ProgramVariationNode" );
}

macro CreateProgramVariationNode()
[Category="Create Commands", Guid="{D6597EE5-8A10-4BE3-B646-887BEE077AEC}", Image=".\\icons\\new_program_variation_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ProgramVariationNode, "NewProgramVariationNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateScreenAlignedGeometryNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ScreenAlignedGeometryNode" );
}

macro CreateScreenAlignedGeometryNode()
[Category="Create Commands", Guid="{CDA83F0B-05FF-4C7E-BCAA-47200305D1DF}", Image=".\\icons\\new_screen_aligned_geometry_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ScreenAlignedGeometryNode, "NewScreenAlignedGeometryNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightCameraStateNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightCameraStateNode" );
}

macro CreateLightCameraStateNode()
[Category="Create Commands", Guid="{CD4C39C2-CA96-40C1-B962-E57DAABCE7D1}", Image=".\\icons\\create_light_camera_state_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightCameraStateNode, "NewLightCameraStateNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightProjectionMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightProjectionMatrixNode" );
}

macro CreateLightProjectionMatrixNode()
[Category="Create Commands", Guid="{55F7CAD7-09EB-44B9-97FB-9936254F0367}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightProjectionMatrixNode, "NewLightProjectionMatrixNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightProjectionCameraMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightProjectionCameraMatrixNode" );
}

macro CreateLightProjectionCameraMatrixNode()
[Category="Create Commands", Guid="{DF689F9B-4CB8-4A7A-A401-81D544107985}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightProjectionCameraMatrixNode, "NewLightProjectionCameraMatrixNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightModelViewMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightModelViewMatrixNode" );
}

macro CreateLightModelViewMatrixNode()
[Category="Create Commands", Guid="{8EC4B839-A355-4C16-ADE4-484CBD4C50C7}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightModelViewMatrixNode, "NewLightModelViewMatrixNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightModelViewCameraMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightModelViewCameraMatrixNode" );
}

macro CreateLightModelViewCameraMatrixNode()
[Category="Create Commands", Guid="{EBDDA854-F79F-4D07-8334-F51E5B9DD8D3}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightModelViewCameraMatrixNode, "NewLightModelViewCameraMatrixNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTypeAggregatorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TypeAggregatorNode" );
}

macro CreateTypeAggregatorNode()
[Category="Create Commands", Guid="{88D7A4E0-814F-440E-9920-229BA420592D}", Image=".\\icons\\new_type_aggregator_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TypeAggregatorNode, "NewTypeAggregatorNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateOrthoProjectionMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "OrthoProjectionMatrixNode" );
}

macro CreateOrthoProjectionMatrixNode()
[Category="Create Commands", Guid="{7EB1154E-0B50-4276-907B-BC5F2FD861F5}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, OrthoProjectionMatrixNode, "NewOrthoProjectionMatrixNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateProjectFileNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ProjectFileNode" );
}

macro CreateProjectFileNode()
[Category="Create Commands", Guid="{D7F5ADA0-CD49-4B6A-8704-839682628E4A}", Image=".\\icons\\create_file_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ProjectFileNode, "NewProjectFileNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStructNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StructNode" );
}

macro CreateStructNode()
[Category="Create Commands", Guid="{484FCC17-6AF2-4CA6-A847-8C20B18A85D0}", Image=".\\icons\\new_struct_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StructNode, "NewStructNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStructInstanceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StructInstanceNode" );
}

macro CreateStructInstanceNode()
[Category="Create Commands", Guid="{FAFB201F-D18A-4E19-91D0-AAE6D3746583}", Image=".\\icons\\new_type_aggregator_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StructInstanceNode, "NewStructInstanceNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGlslQualifierNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GlslQualifierNode" );
}

macro CreateGlslQualifierNode()
[Category="Create Commands", Guid="{536A72DC-86EB-48DB-BCE8-FDCCAAE1EFC0}", Image=".\\icons\\new_qualifier_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GlslQualifierNode, "NewGlslQualifierNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTransformFeedbackLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TransformFeedbackLayoutNode" );
}

macro CreateTransformFeedbackLayoutNode()
[Category="Create Commands", Guid="{D04B8937-3609-4CE1-B07E-C6C7A00B09E8}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TransformFeedbackLayoutNode, "NewTransformFeedbackLayoutNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateControlShaderLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ControlShaderLayoutNode" );
}

macro CreateControlShaderLayoutNode()
[Category="Create Commands", Guid="{FECD933D-D5F8-44B9-BEE2-9D228BB8370B}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ControlShaderLayoutNode, "NewControlShaderLayoutNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateEvaluationShaderLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "EvaluationShaderLayoutNode" );
}

macro CreateEvaluationShaderLayoutNode()
[Category="Create Commands", Guid="{AC20F188-7243-4241-AB91-85A46F97CA06}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, EvaluationShaderLayoutNode, "NewEvaluationShaderLayoutNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGeometryShaderLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GeometryShaderLayoutNode" );
}

macro CreateGeometryShaderLayoutNode()
[Category="Create Commands", Guid="{9650E6FC-9474-4F4E-9293-240036EF545A}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GeometryShaderLayoutNode, "NewGeometryShaderLayoutNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFragmentShaderLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FragmentShaderLayoutNode" );
}

macro CreateFragmentShaderLayoutNode()
[Category="Create Commands", Guid="{4711520F-F2A8-4E1B-9BB2-86C80863ACD2}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FragmentShaderLayoutNode, "NewFragmentShaderLayoutNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateDeclarationNode()
[Category="Create Commands", Guid="{9539E6CA-2D0A-440F-A353-F869BEE1A32A}", Image=".\\icons\\new_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "NewDeclarationNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateListNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ListNode" );
}

macro CreateListNode()
[Category="Create Commands", Guid="{2CAA1CDA-EA2B-4435-81F7-B7CDC9FE3664}", Image=".\\icons\\new_list_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ListNode, "NewListNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightArrayNode" );
}

macro CreateLightArrayNode()
[Category="Create Commands", Guid="{FF2CF6AF-9B67-4F40-884A-C9032CD5A1A6}", Image=".\\icons\\new_light_array_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LightArrayNode, "NewLightArrayNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MaterialArrayNode" );
}

macro CreateMaterialArrayNode()
[Category="Create Commands", Guid="{589548EF-DE08-4E35-8B18-15A65882CCDF}", Image=".\\icons\\new_material_array_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, MaterialArrayNode, "NewMaterialArrayNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTextureArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TextureArrayNode" );
}

macro CreateTextureArrayNode()
[Category="Create Commands", Guid="{B92534DD-DB60-4842-9D87-4D2DF1EC8D14}", Image=".\\icons\\new_texture_array_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TextureArrayNode, "NewTextureArrayNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UniformArrayNode" );
}

macro CreateUniformArrayNode()
[Category="Create Commands", Guid="{455945AA-102D-4B43-BFA5-1C23F58B5E0A}", Image=".\\icons\\new_uniform_array_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, UniformArrayNode, "NewUniformArrayNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderBufferNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderBufferNode" );
}

macro CreateShaderBufferNode()
[Category="Create Commands", Guid="{405A3182-903C-4BDF-AB56-8F6A5FA705DD}", Image=".\\icons\\new_shader_buffer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderBufferNode, "NewShaderBufferNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderBufferBindNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderBufferBindNode" );
}

macro CreateShaderBufferBindNode()
[Category="Create Commands", Guid="{04445520-80B1-4B73-8EFF-567E614B3C96}", Image=".\\icons\\new_uniform_buffer_bind_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderBufferBindNode, "NewShaderBufferBindNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGeometryPaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GeometryPaletteNode" );
}

macro CreateGeometryPaletteNode()
[Category="Create Commands", Guid="{B1C9A453-40F3-42DD-8444-CF5264785786}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GeometryPaletteNode, "NewGeometryPaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderPaletteNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderPaletteNode" );
}

macro CreateShaderPaletteNode()
[Category="Create Commands", Guid="{A6423602-7887-4A55-AEDA-D1CD9A6F520A}", Image=".\\icons\\new_group.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderPaletteNode, "NewShaderPaletteNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMenuElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MenuElementNode" );
}

macro CreateMenuElementNode()
[Category="Create Commands", Guid="{D773AD43-E878-4E77-9F34-78FAAA2DD854}", Image=".\\icons\\new_menu_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, MenuElementNode, "NewMenuElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreatePopupElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "PopupElementNode" );
}

macro CreatePopupElementNode()
[Category="Create Commands", Guid="{ED3ABAF3-58C2-4291-9520-61A886AE379A}", Image=".\\icons\\new_popup_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, PopupElementNode, "NewPopupElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateItemElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ItemElementNode" );
}

macro CreateItemElementNode()
[Category="Create Commands", Guid="{BF8A551C-2347-401F-8CF7-9C70C6C6CFEB}", Image=".\\icons\\new_item_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ItemElementNode, "NewItemElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSeparatorElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SeparatorElementNode" );
}

macro CreateSeparatorElementNode()
[Category="Create Commands", Guid="{C42479B2-0903-428F-82D9-26155E6408AD}", Image=".\\icons\\new_separator_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, SeparatorElementNode, "NewSeparatorElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDockbarElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DockbarElementNode" );
}

macro CreateDockbarElementNode()
[Category="Create Commands", Guid="{0121EB60-88B2-49F3-8A81-938AF903E484}", Image=".\\icons\\new_dockbar_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DockbarElementNode, "NewDockbarElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDockedViewElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DockedViewElementNode" );
}

macro CreateDockedViewElementNode()
[Category="Create Commands", Guid="{9108C8DB-2C06-47B8-9473-29471470BD5D}", Image=".\\icons\\new_dockedview_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DockedViewElementNode, "NewDockedViewElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateActiveViewElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ActiveViewElementNode" );
}

macro CreateActiveViewElementNode()
[Category="Create Commands", Guid="{F20A8090-1CFF-4C6C-B8CA-3AC8C826782D}", Image=".\\icons\\new_activeview_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ActiveViewElementNode, "NewActiveViewElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateToolbarElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ToolbarElementNode" );
}

macro CreateToolbarElementNode()
[Category="Create Commands", Guid="{E5E5A2B5-6D63-4F2F-A670-7C7331A9DF3A}", Image=".\\icons\\new_toolbar_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ToolbarElementNode, "NewToolbarElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateContextMenuElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ContextMenuElementNode" );
}

macro CreateContextMenuElementNode()
[Category="Create Commands", Guid="{F26A641A-F551-4187-AAF3-DBD8C3CB98AF}", Image=".\\icons\\new_contextmenu_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ContextMenuElementNode, "NewContextMenuElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateKeyboardElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "KeyboardElementNode" );
}

macro CreateKeyboardElementNode()
[Category="Create Commands", Guid="{BD33EB99-3851-4116-B715-F614608EA324}", Image=".\\icons\\new_keyboard_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, KeyboardElementNode, "NewKeyboardElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateAcceleratorElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "AcceleratorElementNode" );
}

macro CreateAcceleratorElementNode()
[Category="Create Commands", Guid="{C232BAC1-D841-4E84-8634-E4A4932D73C9}", Image=".\\icons\\new_accelerator_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, AcceleratorElementNode, "NewAcceleratorElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInstallerDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InstallerDeclarationNode" );
}

macro CreateInstallerDeclarationNode()
[Category="Create Commands", Guid="{CCB55578-D4E9-43E0-B2CD-0D79AD4136D3}", Image=".\\icons\\new_installer_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InstallerDeclarationNode, "NewInstallerDeclarationNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInstallerParameterNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InstallerParameterNode" );
}

macro CreateInstallerParameterNode()
[Category="Create Commands", Guid="{CB9428DF-DB3E-49BB-91B9-244B3550C514}", Image=".\\icons\\new_installer_parameter_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InstallerParameterNode, "NewInstallerParameterNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInstallerFlagNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InstallerFlagNode" );
}

macro CreateInstallerFlagNode()
[Category="Create Commands", Guid="{B258F7E3-C32A-4E75-9F15-FD7F1B45BCD7}", Image=".\\icons\\new_installer_flag_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InstallerFlagNode, "NewInstallerFlagNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateParameterListNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ParameterListNode" );
}

macro CreateParameterListNode()
[Category="Create Commands", Guid="{C843F8D7-545C-4D10-97DE-C93DEDC57F73}", Image=".\\icons\\new_parameter_list_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ParameterListNode, "NewParameterListNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSubroutineListNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SubroutineListNode" );
}

macro CreateSubroutineListNode()
[Category="Create Commands", Guid="{64AF6DB5-0E80-4779-B5DD-1C5768E98BBA}", Image=".\\icons\\new_subroutine_list_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, SubroutineListNode, "NewSubroutineListNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSubroutineNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SubroutineNode" );
}

macro CreateSubroutineNode()
[Category="Create Commands", Guid="{B1CD3839-CF47-49AC-980B-6D0283CFF502}", Image=".\\icons\\new_subroutine_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, SubroutineNode, "NewSubroutineNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanNode" );
}

macro CreateBooleanNode()
[Category="Create Commands", Guid="{3C4D9670-DDFD-4184-9FA1-4F58D830AC53}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myBool";
   ValidateNodeCreateContext.CreateNodes( Model, BooleanNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanNode a_oBooleanNode = (BooleanNode)nodes.Get( i );
      a_oBooleanNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oBooleanNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanArrayNode" );
}

macro CreateBooleanArrayNode()
[Category="Create Commands", Guid="{40094D80-AB1D-4B72-9DB8-E120E1306B39}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myBoolArray";
   ValidateNodeCreateContext.CreateNodes( Model, BooleanArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanArrayNode a_oBooleanArrayNode = (BooleanArrayNode)nodes.Get( i );
      a_oBooleanArrayNode.Count = 4;
      a_oBooleanArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oBooleanArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorNode" );
}

macro CreateBooleanVectorNode()
[Category="Create Commands", Guid="{A88617D0-3666-43A3-BA2C-C45E47BB7C6C}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myBoolVector";
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanVectorNode a_oBooleanVectorNode = (BooleanVectorNode)nodes.Get( i );
      a_oBooleanVectorNode.Dimension = 4;
      a_oBooleanVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oBooleanVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorArrayNode" );
}

macro CreateBooleanVectorArrayNode()
[Category="Create Commands", Guid="{13C87833-D800-4BA7-88BB-27D6BB1F49BF}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myBoolVectorArray";
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanVectorArrayNode a_oBooleanVectorArrayNode = (BooleanVectorArrayNode)nodes.Get( i );
      a_oBooleanVectorArrayNode.Count = 4;
      a_oBooleanVectorArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oBooleanVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerNode" );
}

macro CreateIntegerNode()
[Category="Create Commands", Guid="{EBA6BECE-665F-4D7B-AC16-E8F5E486E817}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myInt";
   ValidateNodeCreateContext.CreateNodes( Model, IntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerNode a_oIntegerNode = (IntegerNode)nodes.Get( i );
      a_oIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerArrayNode" );
}

macro CreateIntegerArrayNode()
[Category="Create Commands", Guid="{77F9806A-4106-4955-9BD1-2FFDBB904940}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myIntArray";
   ValidateNodeCreateContext.CreateNodes( Model, IntegerArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerArrayNode a_oIntegerArrayNode = (IntegerArrayNode)nodes.Get( i );
      a_oIntegerArrayNode.Count = 4;
      a_oIntegerArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oIntegerArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorNode" );
}

macro CreateIntegerVectorNode()
[Category="Create Commands", Guid="{CEC04FE5-8D79-4E96-BA41-016050F819ED}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myIntVector";
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerVectorNode a_oIntegerVectorNode = (IntegerVectorNode)nodes.Get( i );
      a_oIntegerVectorNode.Dimension = 4;
      a_oIntegerVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oIntegerVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorArrayNode" );
}

macro CreateIntegerVectorArrayNode()
[Category="Create Commands", Guid="{8B838246-1803-4239-8885-90B5DAF2723A}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myIntVectorArray";
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerVectorArrayNode a_oIntegerVectorArrayNode = (IntegerVectorArrayNode)nodes.Get( i );
      a_oIntegerVectorArrayNode.Count = 4;
      a_oIntegerVectorArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oIntegerVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerNode" );
}

macro CreateUnsignedIntegerNode()
[Category="Create Commands", Guid="{741638D7-C51E-445B-AC1E-51984D6B2153}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myUint";
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerNode a_oUnsignedIntegerNode = (UnsignedIntegerNode)nodes.Get( i );
      a_oUnsignedIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oUnsignedIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerArrayNode" );
}

macro CreateUnsignedIntegerArrayNode()
[Category="Create Commands", Guid="{D7B41DB7-BEF4-4984-B9F8-04E7CED1D379}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myUintArray";
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerArrayNode a_oUnsignedIntegerArrayNode = (UnsignedIntegerArrayNode)nodes.Get( i );
      a_oUnsignedIntegerArrayNode.Count = 4;
      a_oUnsignedIntegerArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oUnsignedIntegerArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorNode" );
}

macro CreateUnsignedIntegerVectorNode()
[Category="Create Commands", Guid="{DD6DEFD1-7349-4069-B745-1A817D2D5437}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myUintVector";
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerVectorNode a_oUnsignedIntegerVectorNode = (UnsignedIntegerVectorNode)nodes.Get( i );
      a_oUnsignedIntegerVectorNode.Dimension = 4;
      a_oUnsignedIntegerVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oUnsignedIntegerVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorArrayNode" );
}

macro CreateUnsignedIntegerVectorArrayNode()
[Category="Create Commands", Guid="{5E66B18C-DF5E-47C6-8FFB-E2E1D26A2C7D}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myUintVectorArray";
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerVectorArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerVectorArrayNode a_oUnsignedIntegerVectorArrayNode = (UnsignedIntegerVectorArrayNode)nodes.Get( i );
      a_oUnsignedIntegerVectorArrayNode.Count = 4;
      a_oUnsignedIntegerVectorArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oUnsignedIntegerVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FloatNode" );
}

macro CreateFloatNode()
[Category="Create Commands", Guid="{B5940AAE-3117-4995-B413-370FF44458D2}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myFloat";
   ValidateNodeCreateContext.CreateNodes( Model, FloatNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      FloatNode a_oFloatNode = (FloatNode)nodes.Get( i );
      a_oFloatNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oFloatNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FloatArrayNode" );
}

macro CreateFloatArrayNode()
[Category="Create Commands", Guid="{C5F989CC-6EED-4715-8EBB-ABCBB13F2EFC}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myFloatArray";
   ValidateNodeCreateContext.CreateNodes( Model, FloatArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      FloatArrayNode a_oFloatArrayNode = (FloatArrayNode)nodes.Get( i );
      a_oFloatArrayNode.Count = 4;
      a_oFloatArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oFloatArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorNode" );
}

macro CreateVectorNode()
[Category="Create Commands", Guid="{38FD68E5-3AD3-4B91-B533-F3694BA98E2B}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myVector";
   ValidateNodeCreateContext.CreateNodes( Model, VectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      VectorNode a_oVectorNode = (VectorNode)nodes.Get( i );
      a_oVectorNode.Dimension = 4;
      a_oVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorArrayNode" );
}

macro CreateVectorArrayNode()
[Category="Create Commands", Guid="{8FAFB2E5-F32B-4577-AED6-948158BD033C}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myVectorArray";
   ValidateNodeCreateContext.CreateNodes( Model, VectorArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      VectorArrayNode a_oVectorArrayNode = (VectorArrayNode)nodes.Get( i );
      a_oVectorArrayNode.Count = 4;
      a_oVectorArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateColorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ColorNode" );
}

macro CreateColorNode()
[Category="Create Commands", Guid="{1BF5F1CF-D04F-4C9A-935D-7A6E822775EB}", Image=".\\icons\\new_color_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myColor";
   ValidateNodeCreateContext.CreateNodes( Model, ColorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      ColorNode a_oColorNode = (ColorNode)nodes.Get( i );
      a_oColorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oColorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateColorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ColorArrayNode" );
}

macro CreateColorArrayNode()
[Category="Create Commands", Guid="{2CAD3BFE-B03D-4F43-9AC7-0A0BF39F4B96}", Image=".\\icons\\new_color_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightColor";
   ValidateNodeCreateContext.CreateNodes( Model, ColorArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      ColorArrayNode a_oColorArrayNode = (ColorArrayNode)nodes.Get( i );
      a_oColorArrayNode.Count = 4;
      a_oColorArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oColorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixNode()
[Category="Create Commands", Guid="{047BB340-BF83-4108-B762-63E481D6C30F}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myMatrix";
   ValidateNodeCreateContext.CreateNodes( Model, MatrixNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MatrixNode a_oMatrixNode = (MatrixNode)nodes.Get( i );
      a_oMatrixNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oMatrixNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTimerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TimerNode" );
}

macro CreateTimerNode()
[Category="Create Commands", Guid="{6F2D52D4-2FCA-41F2-BBCB-13E3AC3A72BB}", Image=".\\icons\\new_timer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myTimer";
   ValidateNodeCreateContext.CreateNodes( Model, TimerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      TimerNode a_oTimerNode = (TimerNode)nodes.Get( i );
      a_oTimerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oTimerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateViewMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ViewMatrixNode" );
}

macro CreateViewMatrixNode()
[Category="Create Commands", Guid="{44F2BE17-F845-4801-994A-E7FEA0E1659E}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myViewMatrix";
   ValidateNodeCreateContext.CreateNodes( Model, ViewMatrixNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      ViewMatrixNode a_oViewMatrixNode = (ViewMatrixNode)nodes.Get( i );
      a_oViewMatrixNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oViewMatrixNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightBooleanNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightBooleanNode" );
}

macro CreateLightBooleanNode()
[Category="Create Commands", Guid="{9D299192-F4E8-4CC9-94B5-66B0307B36BA}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightBoolean";
   ValidateNodeCreateContext.CreateNodes( Model, LightBooleanNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightBooleanNode a_oLightBooleanNode = (LightBooleanNode)nodes.Get( i );
      a_oLightBooleanNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightBooleanNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightIntegerNode" );
}

macro CreateLightIntegerNode()
[Category="Create Commands", Guid="{02926AC5-2DB2-4C29-ADD1-F39145AA08B0}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightInteger";
   ValidateNodeCreateContext.CreateNodes( Model, LightIntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightIntegerNode a_oLightIntegerNode = (LightIntegerNode)nodes.Get( i );
      a_oLightIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightFloatNode" );
}

macro CreateLightFloatNode()
[Category="Create Commands", Guid="{5BE2C77F-B99C-471D-8077-10656AF8EFFD}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightFloat";
   ValidateNodeCreateContext.CreateNodes( Model, LightFloatNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightFloatNode a_oLightFloatNode = (LightFloatNode)nodes.Get( i );
      a_oLightFloatNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightFloatNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightVectorNode" );
}

macro CreateLightVectorNode()
[Category="Create Commands", Guid="{AF5AB465-D17B-46CA-A515-F35293AEB2FB}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightVector";
   ValidateNodeCreateContext.CreateNodes( Model, LightVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightVectorNode a_oLightVectorNode = (LightVectorNode)nodes.Get( i );
      a_oLightVectorNode.Dimension = 4;
      a_oLightVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightColorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightColorNode" );
}

macro CreateLightColorNode()
[Category="Create Commands", Guid="{B1C7F716-138F-44CD-98BE-4B55102615AA}", Image=".\\icons\\new_color_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightColor";
   ValidateNodeCreateContext.CreateNodes( Model, LightColorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightColorNode a_oLightColorNode = (LightColorNode)nodes.Get( i );
      a_oLightColorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightColorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightMatrixNode" );
}

macro CreateLightMatrixNode()
[Category="Create Commands", Guid="{44F2BE1F-F845-4801-994A-E7FEA0E1659E}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightMatrix";
   ValidateNodeCreateContext.CreateNodes( Model, LightMatrixNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightMatrixNode a_oLightMatrixNode = (LightMatrixNode)nodes.Get( i );
      a_oLightMatrixNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightMatrixNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateViewportFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ViewportFloatNode" );
}

macro CreateViewportFloatNode()
[Category="Create Commands", Guid="{FB79B78F-351A-4E30-9E0D-1E5902F3BD00}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myViewportFloat";
   ValidateNodeCreateContext.CreateNodes( Model, ViewportFloatNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      ViewportFloatNode a_oViewportFloatNode = (ViewportFloatNode)nodes.Get( i );
      a_oViewportFloatNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oViewportFloatNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateViewportVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ViewportVectorNode" );
}

macro CreateViewportVectorNode()
[Category="Create Commands", Guid="{3FF9335F-B498-483E-A756-25A4F4A063E7}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myViewportFloat";
   ValidateNodeCreateContext.CreateNodes( Model, ViewportVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      ViewportVectorNode a_oViewportVectorNode = (ViewportVectorNode)nodes.Get( i );
      a_oViewportVectorNode.Dimension = 4;
      a_oViewportVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oViewportVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MaterialIntegerNode" );
}

macro CreateMaterialIntegerNode()
[Category="Create Commands", Guid="{BA21BA87-F663-4AF7-B864-343B2490F368}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myMaterialInteger";
   ValidateNodeCreateContext.CreateNodes( Model, MaterialIntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MaterialIntegerNode a_oMaterialIntegerNode = (MaterialIntegerNode)nodes.Get( i );
      a_oMaterialIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oMaterialIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MaterialFloatNode" );
}

macro CreateMaterialFloatNode()
[Category="Create Commands", Guid="{C1B5842C-8A64-42DD-A257-2E4830298C93}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myMaterialFloat";
   ValidateNodeCreateContext.CreateNodes( Model, MaterialFloatNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MaterialFloatNode a_oMaterialFloatNode = (MaterialFloatNode)nodes.Get( i );
      a_oMaterialFloatNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oMaterialFloatNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialColorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MaterialColorNode" );
}

macro CreateMaterialColorNode()
[Category="Create Commands", Guid="{6FA30DB0-4B0A-46AF-86FC-CB48DBF766EF}", Image=".\\icons\\new_color_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightColor";
   ValidateNodeCreateContext.CreateNodes( Model, MaterialColorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MaterialColorNode a_oMaterialColorNode = (MaterialColorNode)nodes.Get( i );
      a_oMaterialColorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oMaterialColorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightCountNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LightCountNode" );
}

macro CreateLightCountNode()
[Category="Create Commands", Guid="{1984EA4A-2412-4416-80AD-308D4CA7B377}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightCount";
   ValidateNodeCreateContext.CreateNodes( Model, LightCountNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightCountNode a_oLightCountNode = (LightCountNode)nodes.Get( i );
      a_oLightCountNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oLightCountNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateRectanglePrimitiveVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "RectanglePrimitiveVectorNode" );
}

macro CreateRectanglePrimitiveVectorNode()
[Category="Create Commands", Guid="{4585D401-2483-4575-97DD-53F47689C504}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myLightCount";
   ValidateNodeCreateContext.CreateNodes( Model, RectanglePrimitiveVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      RectanglePrimitiveVectorNode a_oRectanglePrimitiveVectorNode = (RectanglePrimitiveVectorNode)nodes.Get( i );
      a_oRectanglePrimitiveVectorNode.Dimension = 4;
      a_oRectanglePrimitiveVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oRectanglePrimitiveVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSubroutineIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SubroutineIntegerNode" );
}

macro CreateSubroutineIntegerNode()
[Category="Create Commands", Guid="{DEB6A202-86EF-489F-AA60-895BEFA7FCBB}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "mySubroutineInteger";
   ValidateNodeCreateContext.CreateNodes( Model, SubroutineIntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      SubroutineIntegerNode a_oSubroutineIntegerNode = (SubroutineIntegerNode)nodes.Get( i );
      a_oSubroutineIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oSubroutineIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicBooleanNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicBooleanNode" );
}

macro CreateDynamicBooleanNode()
[Category="Create Commands", Guid="{83C2BA35-50AC-4DD1-9261-AE353DFED3D6}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicBoolean";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicBooleanNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicBooleanNode a_oDynamicBooleanNode = (DynamicBooleanNode)nodes.Get( i );
      a_oDynamicBooleanNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicBooleanNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicIntegerNode" );
}

macro CreateDynamicIntegerNode()
[Category="Create Commands", Guid="{80E5482A-3EDC-4F39-8F44-8E04A1C9F7AC}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicInteger";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicIntegerNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicIntegerNode a_oDynamicIntegerNode = (DynamicIntegerNode)nodes.Get( i );
      a_oDynamicIntegerNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicIntegerNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicFloatNode" );
}

macro CreateDynamicFloatNode()
[Category="Create Commands", Guid="{B55C0742-F5F0-4D0F-AF64-8AF88FFB5216}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicFloat";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicFloatNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicFloatNode a_oDynamicFloatNode = (DynamicFloatNode)nodes.Get( i );
      a_oDynamicFloatNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicFloatNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicVectorNode" );
}

macro CreateDynamicVectorNode()
[Category="Create Commands", Guid="{2ABC9B97-1AD3-4B27-9D2B-65E44C5F87FB}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicVector";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicVectorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicVectorNode a_oDynamicVectorNode = (DynamicVectorNode)nodes.Get( i );
      a_oDynamicVectorNode.Dimension = 4;
      a_oDynamicVectorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicColorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicColorNode" );
}

macro CreateDynamicColorNode()
[Category="Create Commands", Guid="{B8ED9CF9-9640-44A5-9A04-7D3943753F3E}", Image=".\\icons\\new_color_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicColor";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicColorNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicColorNode a_oDynamicColorNode = (DynamicColorNode)nodes.Get( i );
      a_oDynamicColorNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicColorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DynamicMatrixNode" );
}

macro CreateDynamicMatrixNode()
[Category="Create Commands", Guid="{EEECC638-717C-4FDA-BF75-FAFFAB2F1623}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myDynamicMatrix";
   ValidateNodeCreateContext.CreateNodes( Model, DynamicMatrixNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DynamicMatrixNode a_oDynamicMatrixNode = (DynamicMatrixNode)nodes.Get( i );
      a_oDynamicMatrixNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oDynamicMatrixNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStringNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StringNode" );
}

macro CreateStringNode()
[Category="Create Commands", Guid="{C715366A-5D15-437B-9AB6-B024F75C1BF4}", Image=".\\icons\\new_string_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myStringNode";
   ValidateNodeCreateContext.CreateNodes( Model, StringNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      StringNode a_oStringNode = (StringNode)nodes.Get( i );
      a_oStringNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oStringNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStringArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StringArrayNode" );
}

macro CreateStringArrayNode()
[Category="Create Commands", Guid="{0B34635E-D1E3-4590-B503-436EA0F9AAB3}", Image=".\\icons\\new_string_node.bmp"]
{
   List nodes = new List;
   string a_sVariableName = "myStringArrayNode";
   ValidateNodeCreateContext.CreateNodes( Model, StringArrayNode, a_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      StringArrayNode a_oStringArrayNode = (StringArrayNode)nodes.Get( i );
      a_oStringArrayNode.Objects.Add( "new_string" );
      a_oStringArrayNode.Variable = a_sVariableName;
      Graph.RenameVariable( a_oStringArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorNodeOfDimension( int p_eDimension, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanVectorNode a_oBooleanVectorNode = (BooleanVectorNode)nodes.Get( i );
      a_oBooleanVectorNode.Variable = "my" + p_sVariableName;
      a_oBooleanVectorNode.Dimension = p_eDimension;
      a_oBooleanVectorNode.Name = a_oBooleanVectorNode.UpdateName();
      Graph.RenameVariable( a_oBooleanVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateBooleanVectorNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorNode" );
}

macro CreateBooleanVectorNode2()
[Category="Create Commands", Guid="{1B2F5581-28FC-4D2B-8581-06E51382EA63}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorNodeOfDimension( Enum.GLSL_DataType_Vec2(), "Bvec2" );
}
function void CreateBooleanVectorNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorNode" );
}

macro CreateBooleanVectorNode3()
[Category="Create Commands", Guid="{21BACF05-9031-493E-B170-279E5479450A}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorNodeOfDimension( Enum.GLSL_DataType_Vec3(), "Bvec3" );
}
function void CreateBooleanVectorNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorNode" );
}

macro CreateBooleanVectorNode4()
[Category="Create Commands", Guid="{55009D8A-B4E3-42CE-BD6C-D6193ECFC4D4}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorNodeOfDimension( Enum.GLSL_DataType_Vec4(), "Bvec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorNodeOfDimension( int p_eDimension, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerVectorNode a_oIntegerVectorNode = (IntegerVectorNode)nodes.Get( i );
      a_oIntegerVectorNode.Variable = "my" + p_sVariableName;
      a_oIntegerVectorNode.Dimension = p_eDimension;
      a_oIntegerVectorNode.Name = a_oIntegerVectorNode.UpdateName();
      Graph.RenameVariable( a_oIntegerVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateIntegerVectorNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorNode" );
}

macro CreateIntegerVectorNode2()
[Category="Create Commands", Guid="{0A50A140-25CC-4FA4-9285-A080BBCBC841}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec2(), "Ivec2" );
}
function void CreateIntegerVectorNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorNode" );
}

macro CreateIntegerVectorNode3()
[Category="Create Commands", Guid="{8D3FF1D9-168A-42F6-A831-430553ED6FEA}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec3(), "Ivec3" );
}
function void CreateIntegerVectorNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorNode" );
}

macro CreateIntegerVectorNode4()
[Category="Create Commands", Guid="{4265BB18-C246-446B-8717-A6FA143EE807}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec4(), "Ivec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorNodeOfDimension( int p_eDimension, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerVectorNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerVectorNode a_oUnsignedIntegerVectorNode = (UnsignedIntegerVectorNode)nodes.Get( i );
      a_oUnsignedIntegerVectorNode.Variable = "my" + p_sVariableName;
      a_oUnsignedIntegerVectorNode.Dimension = p_eDimension;
      a_oUnsignedIntegerVectorNode.Name = a_oUnsignedIntegerVectorNode.UpdateName();
      Graph.RenameVariable( a_oUnsignedIntegerVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateUnsignedIntegerVectorNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorNode" );
}

macro CreateUnsignedIntegerVectorNode2()
[Category="Create Commands", Guid="{55B66D39-2741-49F5-AF45-2825F4B6F232}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec2(), "Uvec2" );
}
function void CreateUnsignedIntegerVectorNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorNode" );
}

macro CreateUnsignedIntegerVectorNode3()
[Category="Create Commands", Guid="{EAA4EE74-28DA-4E5A-B2A7-2022E8E26161}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec3(), "Uvec3" );
}
function void CreateUnsignedIntegerVectorNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorNode" );
}

macro CreateUnsignedIntegerVectorNode4()
[Category="Create Commands", Guid="{6EF9D58E-974C-4422-8CCA-F3FCB7D9EC29}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorNodeOfDimension( Enum.GLSL_DataType_Vec4(), "Uvec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorNodeOfDimension( int p_eDimension, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, VectorNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      VectorNode a_oVectorNode = (VectorNode)nodes.Get( i );
      a_oVectorNode.Variable = "my" + p_sVariableName;
      a_oVectorNode.Dimension = p_eDimension;
      a_oVectorNode.Name = a_oVectorNode.UpdateName();
      Graph.RenameVariable( a_oVectorNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateVectorNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorNode" );
}

macro CreateVectorNode2()
[Category="Create Commands", Guid="{3A214E77-02C7-4F37-A27A-883D40AEBA63}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorNodeOfDimension( Enum.GLSL_DataType_Vec2(), "Fvec2" );
}
function void CreateVectorNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorNode" );
}

macro CreateVectorNode3()
[Category="Create Commands", Guid="{480C83B3-359A-4579-8EFD-72BF1AF3DC4B}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorNodeOfDimension( Enum.GLSL_DataType_Vec3(), "Fvec3" );
}
function void CreateVectorNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorNode" );
}

macro CreateVectorNode4()
[Category="Create Commands", Guid="{ED736A56-637F-4A8E-9190-F03222677BD1}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorNodeOfDimension( Enum.GLSL_DataType_Vec4(), "Fvec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorArrayNodeOfDimension( int p_eDimension, int p_nCount, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorArrayNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      BooleanVectorArrayNode a_oBooleanVectorArrayNode = (BooleanVectorArrayNode)nodes.Get( i );
      a_oBooleanVectorArrayNode.Variable = "my" + p_sVariableName + "Array";
      a_oBooleanVectorArrayNode.VectorDimension = p_eDimension;
      a_oBooleanVectorArrayNode.Count = p_nCount;
      a_oBooleanVectorArrayNode.Name = a_oBooleanVectorArrayNode.UpdateName();
      Graph.RenameVariable( a_oBooleanVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateBooleanVectorArrayNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorArrayNode" );
}

macro CreateBooleanVectorArrayNode2()
[Category="Create Commands", Guid="{F179FF23-0E96-4EAA-915B-F168A1176861}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), 4, "Bvec2" );
}
function void CreateBooleanVectorArrayNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorArrayNode" );
}

macro CreateBooleanVectorArrayNode3()
[Category="Create Commands", Guid="{7A4B9F48-D371-48FB-AC8D-9E984A83E0E0}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), 4, "Bvec3" );
}
function void CreateBooleanVectorArrayNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorArrayNode" );
}

macro CreateBooleanVectorArrayNode4()
[Category="Create Commands", Guid="{F61B504F-0E81-49E0-A374-1C7E61F38706}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateBooleanVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), 4, "Bvec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorArrayNodeOfDimension( int p_eDimension, int p_nCount, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorArrayNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      IntegerVectorArrayNode a_oIntegerVectorArrayNode = (IntegerVectorArrayNode)nodes.Get( i );
      a_oIntegerVectorArrayNode.Variable = "my" + p_sVariableName + "Array";
      a_oIntegerVectorArrayNode.VectorDimension = p_eDimension;
      a_oIntegerVectorArrayNode.Count = p_nCount;
      a_oIntegerVectorArrayNode.Name = a_oIntegerVectorArrayNode.UpdateName();
      Graph.RenameVariable( a_oIntegerVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateIntegerVectorArrayNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorArrayNode" );
}

macro CreateIntegerVectorArrayNode2()
[Category="Create Commands", Guid="{6B208978-112C-452A-883C-D0286D1B076A}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), 4, "Ivec2" );
}
function void CreateIntegerVectorArrayNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorArrayNode" );
}

macro CreateIntegerVectorArrayNode3()
[Category="Create Commands", Guid="{9D29A658-935E-4FAA-B925-6E76A038D6D2}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), 4, "Ivec3" );
}
function void CreateIntegerVectorArrayNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorArrayNode" );
}

macro CreateIntegerVectorArrayNode4()
[Category="Create Commands", Guid="{61CD713C-48D1-4943-AA02-2E59CE8F952B}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), 4, "Ivec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorArrayNodeOfDimension( int p_eDimension, int p_nCount, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerVectorArrayNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      UnsignedIntegerVectorArrayNode a_oUnsignedIntegerVectorArrayNode = (UnsignedIntegerVectorArrayNode)nodes.Get( i );
      a_oUnsignedIntegerVectorArrayNode.Variable = "my" + p_sVariableName + "Array";
      a_oUnsignedIntegerVectorArrayNode.VectorDimension = p_eDimension;
      a_oUnsignedIntegerVectorArrayNode.Count = p_nCount;
      a_oUnsignedIntegerVectorArrayNode.Name = a_oUnsignedIntegerVectorArrayNode.UpdateName();
      Graph.RenameVariable( a_oUnsignedIntegerVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateUnsignedIntegerVectorArrayNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorArrayNode" );
}

macro CreateUnsignedIntegerVectorArrayNode2()
[Category="Create Commands", Guid="{63C5AC27-EB2C-4A62-92AF-7BD915858A3C}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), 4, "Uvec2" );
}
function void CreateUnsignedIntegerVectorArrayNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorArrayNode" );
}

macro CreateUnsignedIntegerVectorArrayNode3()
[Category="Create Commands", Guid="{A6E0D3CD-8A3D-4F79-B973-087FC94CE14A}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), 4, "Uvec3" );
}
function void CreateUnsignedIntegerVectorArrayNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerVectorArrayNode" );
}

macro CreateUnsignedIntegerVectorArrayNode4()
[Category="Create Commands", Guid="{F31A3F5F-0C54-41D6-9E7C-5DF74712099E}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), 4, "Uvec4" );
}
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorArrayNodeOfDimension( int p_eDimension, int p_nCount, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, VectorArrayNode, p_sVariableName, nodes, -1 );
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      VectorArrayNode a_oVectorArrayNode = (VectorArrayNode)nodes.Get( i );
      a_oVectorArrayNode.Variable = "my" + p_sVariableName + "Array";
      a_oVectorArrayNode.VectorDimension = p_eDimension;
      a_oVectorArrayNode.Count = p_nCount;
      a_oVectorArrayNode.Name = a_oVectorArrayNode.UpdateName();
      Graph.RenameVariable( a_oVectorArrayNode );
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateVectorArrayNode2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorArrayNode" );
}

macro CreateVectorArrayNode2()
[Category="Create Commands", Guid="{8434FC6F-A0B9-4D11-8F7D-6858C0485312}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), 4, "Fvec2" );
}
function void CreateVectorArrayNode3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorArrayNode" );
}

macro CreateVectorArrayNode3()
[Category="Create Commands", Guid="{17361D7F-D345-459D-A9E1-603A6B7544A3}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), 4, "Fvec3" );
}
function void CreateVectorArrayNode4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorArrayNode" );
}

macro CreateVectorArrayNode4()
[Category="Create Commands", Guid="{CDCA44E9-75FE-4E59-AD6E-518362D23A20}", Image=".\\icons\\new_vector_node.bmp"]
{
   CreateVectorArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), 4, "Fvec4" );
}
