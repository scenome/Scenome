////////////////////////////////////////////////////////////////////////////////
// $file             PROPERTY_SHEET_UTIL.SSL
// $author           Scenomics LLC
// $privacy          PUBLIC
// $description      This script implements automatic generation for node property sheet parameters.
// $legal            Reserved * r_rLegal
//
// Copyright 2004-2014 Scenomics LLC. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////

library SpaPropertySheetUtil;

///////////////////////////////////////////////////////////////////////////////
// Global Variables
///////////////////////////////////////////////////////////////////////////////

int g_iBoolPropertyCount;
int g_iEnumPropertyCount;
int g_iIntPropertyCount;
int g_iFloatPropertyCount;
int g_iStringPropertyCount;
int g_iColorPropertyCount;
int g_iFilePathPropertyCount;
int g_iNodePropertyCount;

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function int CreatePropertySheetEntry( Group p_oPropertyContainer, string p_sPropertyName,
   string p_sPropertyType, string p_sPropertyDocumentation )
{
   if( p_sPropertyType == "bool" )
   {
      ++g_iBoolPropertyCount;
   }
   else
   if( p_sPropertyType == "enum" )
   {
      ++g_iEnumPropertyCount;
   }
   else
   if( p_sPropertyType == "int" )
   {
      ++g_iIntPropertyCount;
   }
   else
   if( p_sPropertyType == "float/double" )
   {
      ++g_iFloatPropertyCount;
   }
   else
   if( p_sPropertyType == "string" )
   {
      ++g_iStringPropertyCount;
   }
   else
   if( p_sPropertyType == "color" )
   {
      ++g_iColorPropertyCount;
   }
   else
   if( p_sPropertyType == "file path" )
   {
      ++g_iFilePathPropertyCount;
   }
   else
   if( p_sPropertyType == "&gt;Node&lt;" )
   {
      ++g_iNodePropertyCount;
   }

   if( p_sPropertyDocumentation == "This option is undocumented at present." || p_sPropertyDocumentation == "" )
   {
      //Console.Message( "WARNING: The property group named '" + p_oPropertyContainer.Name + "' has an undocumented option named '" + p_sPropertyName + "'." );
   }

   StringNode a_oStringNode = new StringNode;
   a_oStringNode.Name = p_sPropertyName;
   a_oStringNode.Variable = p_sPropertyType;
   a_oStringNode.Value = p_sPropertyDocumentation;
   p_oPropertyContainer.AddChild( a_oStringNode );
   return 1;
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function int BuildPropertyDatabase( Model3D p_oPropertyDatabase )
{
   int a_iSuccess;

   // Create a list in which to store property sheet documentation nodes.
   auto List a_lPropertySheetNodes;

   // Create the master documentation group.
   Group a_oDocumentationGroupRoot = new Group;
   a_oDocumentationGroupRoot.Name = "Documentation";
   p_oPropertyDatabase.AddChild( a_oDocumentationGroupRoot );

   // Property Types
   string a_sBoolPropertyType = "bool";
   string a_sEnumPropertyType = "enum";
   string a_sIntPropertyType = "int";
   string a_sFloatPropertyType = "float/double";
   string a_sStringPropertyType = "string";
   string a_sNodePropertyType = "&lt;Node&gt;";
   string a_sColorPropertyType = "color";
   string a_sFilePathPropertyType = "file path";

   ////////////////////////////////////////////////////////////////////////////
   // Add Mesh Channel Property Group
   ////////////////////////////////////////////////////////////////////////////
   Group a_oAddMeshChannelPropertyGroup = new Group;
   a_oAddMeshChannelPropertyGroup.Name = "Add Mesh Channel";
   a_lPropertySheetNodes.AddRef( a_oAddMeshChannelPropertyGroup );

   // Attribute Type Enumeration
   Group a_oAttributeTypeEnumeration = new Group;
   a_oAttributeTypeEnumeration.Name = "Attribute Type";
   a_oAddMeshChannelPropertyGroup.AddChild( a_oAttributeTypeEnumeration );

   CreatePropertySheetEntry(  a_oAttributeTypeEnumeration, "Position", a_sEnumPropertyType, "This channel type stores up to four double-precision values for vertex positions." );
   CreatePropertySheetEntry(  a_oAttributeTypeEnumeration, "Normal", a_sEnumPropertyType, "This channel type stores up to four double-precision values for vertex normals." );
   CreatePropertySheetEntry(  a_oAttributeTypeEnumeration, "Color", a_sEnumPropertyType, "This channel type stores up to four integers for vertex colors." );
   CreatePropertySheetEntry(  a_oAttributeTypeEnumeration, "Texture Coordinates", a_sEnumPropertyType, "This channel type stores up to four double-precision values for vertex texture coordinates." );
   CreatePropertySheetEntry(  a_oAttributeTypeEnumeration, "Integer Data", a_sEnumPropertyType, "This channel stores integer values for associated vertices, such as for skeletal animation data." );

   // Attribute Dimension Enumeration
   Group a_oAttributeDimensionEnumeration = new Group;
   a_oAttributeDimensionEnumeration.Name = "Attribute Dimension";
   a_oAddMeshChannelPropertyGroup.AddChild( a_oAttributeDimensionEnumeration );

   CreatePropertySheetEntry(  a_oAttributeDimensionEnumeration, "1D", a_sEnumPropertyType, "Uses 1 value to store values for the attribute channel." );
   CreatePropertySheetEntry(  a_oAttributeDimensionEnumeration, "2D", a_sEnumPropertyType, "Uses 2 values to store values for the attribute channel." );
   CreatePropertySheetEntry(  a_oAttributeDimensionEnumeration, "3D", a_sEnumPropertyType, "Uses 3 values to store values for the attribute channel." );
   CreatePropertySheetEntry(  a_oAttributeDimensionEnumeration, "4D", a_sEnumPropertyType, "Uses 4 values to store values for the attribute channel." );

   ////////////////////////////////////////////////////////////////////////////
   // Bevel Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBevelPropertyGroup = new Group;
   a_oBevelPropertyGroup.Name = "Bevel";
   a_lPropertySheetNodes.AddRef( a_oBevelPropertyGroup );

   CreatePropertySheetEntry(  a_oBevelPropertyGroup, "Radius", a_sFloatPropertyType, "Sets the radius of the bevel in database units or percent, depending on the <b>Radius Mathematics<\/b> parameter." );

   // Radius Mathematics Enumeration
   Group a_oRadiusMathematicsEnumeration = new Group;
   a_oRadiusMathematicsEnumeration.Name = "Radius Mathematics";
   a_oBevelPropertyGroup.AddChild( a_oRadiusMathematicsEnumeration );

   CreatePropertySheetEntry(  a_oRadiusMathematicsEnumeration, "Units", a_sEnumPropertyType, "Performs the bevel with radius in units along spoke edges. This produces a very uniform bevel." );
   CreatePropertySheetEntry(  a_oRadiusMathematicsEnumeration, "Percentage", a_sEnumPropertyType, "Performs the bevel with radius in percent of spoke edge length. This can produce a less uniform bevel." );
   CreatePropertySheetEntry(  a_oBevelPropertyGroup, "Skip Collapse", a_sBoolPropertyType, "Determines the final appearance: when <b>false</b> the bevel has the typical, smooth appearance." );

   ////////////////////////////////////////////////////////////////////////////
   // Bevel/Extrude Vertex Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBevelExtrudeVertexPropertyGroup = new Group;
   a_oBevelExtrudeVertexPropertyGroup.Name = "Bevel/Extrude Vertex";
   a_lPropertySheetNodes.AddRef( a_oBevelExtrudeVertexPropertyGroup );

   // Bevel/Extrude Mode Enumeration
   Group a_oBevelExtrudeModeEnumeration = new Group;
   a_oBevelExtrudeModeEnumeration.Name = "Bevel/Extrude Mode";
   a_oBevelExtrudeVertexPropertyGroup.AddChild( a_oBevelExtrudeModeEnumeration );

   CreatePropertySheetEntry(  a_oBevelExtrudeModeEnumeration,
                              "Percentage",
                              a_sEnumPropertyType,
                              "Performs the bevel with radius in units along spoke edges. This produces a very uniform bevel." );
   
   CreatePropertySheetEntry(  a_oBevelExtrudeModeEnumeration,
                              "Distance",
                              a_sEnumPropertyType,
                              "Performs the bevel with radius in percent of spoke edge length. This can produce a less uniform bevel." );

   CreatePropertySheetEntry(  a_oBevelExtrudeVertexPropertyGroup,
                              "Radius",
                              a_sFloatPropertyType,
                              "Sets the radius of the bevel in database units or percent, depending on the <b>Bevel/Extrude Mode<\/b> parameter." );

   ////////////////////////////////////////////////////////////////////////////
   // Bind Texture Settings Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBindTextureSettingsPropertyGroup = new Group;
   a_oBindTextureSettingsPropertyGroup.Name = "Bind Texture Settings";
   a_lPropertySheetNodes.AddRef( a_oBindTextureSettingsPropertyGroup );

   CreatePropertySheetEntry(  a_oBindTextureSettingsPropertyGroup,
                              "Layer",
                              a_sIntPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oBindTextureSettingsPropertyGroup,
                              "Texture",
                              a_sNodePropertyType,
                              "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Boolean Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBooleanParametersPropertyGroup = new Group;
   a_oBooleanParametersPropertyGroup.Name = "Boolean Parameters";
   a_lPropertySheetNodes.AddRef( a_oBooleanParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oBooleanParametersPropertyGroup,
                              "Value",
                              a_sBoolPropertyType,
                              "The value of the BooleanNode, either <b>True<\/b> or <b>False<\/b>." );

   ////////////////////////////////////////////////////////////////////////////
   // Box Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBoxPropertiesPropertyGroup = new Group;
   a_oBoxPropertiesPropertyGroup.Name = "Box Properties";
   a_lPropertySheetNodes.AddRef( a_oBoxPropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Minimum X",
                              a_sFloatPropertyType,
                              "Displays the minimum box coordinate on the X axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Minimum Y",
                              a_sFloatPropertyType,
                              "Displays the minimum box coordinate on the Y axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Minimum Z",
                              a_sFloatPropertyType,
                              "Displays the minimum box coordinate on the Z axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Maximum X",
                              a_sFloatPropertyType,
                              "Displays the maximum box coordinate on the X axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Maximum Y",
                              a_sFloatPropertyType,
                              "Displays the maximum box coordinate on the Y axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Maximum Z",
                              a_sFloatPropertyType,
                              "Displays the maximum box coordinate on the Z axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Material",
                              a_sNodePropertyType,
                              "Links the modifier to a Material node. This applies the Material to all the faces in the box." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "X Resolution",
                              a_sIntPropertyType,
                              "Sets the box's tessellation on the X axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Y Resolution",
                              a_sIntPropertyType,
                              "Sets the box's tessellation on the Y axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Z Resolution",
                              a_sIntPropertyType,
                              "Sets the box's tessellation on the Z axis." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Apply Texture Modifier",
                              a_sBoolPropertyType,
                              "Determines whether or not the box is used to project texture coordinates." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Triangulate",
                              a_sBoolPropertyType,
                              "Determines whether or not the box's triangle edges are hidden." );

   CreatePropertySheetEntry(  a_oBoxPropertiesPropertyGroup,
                              "Facing Interioer",
                              a_sBoolPropertyType,
                              "Reverses vertex winding so the box's faces point inward." );

   ////////////////////////////////////////////////////////////////////////////
   // Buffer Flags Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oBufferFlagsPropertyGroup = new Group;
   a_oBufferFlagsPropertyGroup.Name = "Buffer Flags";
   a_lPropertySheetNodes.AddRef( a_oBufferFlagsPropertyGroup );

   CreatePropertySheetEntry(  a_oBufferFlagsPropertyGroup,
                              "Clear Color Buffer",
                              a_sBoolPropertyType,
                              "Determines whether or not this node clears the color buffer." );

   CreatePropertySheetEntry(  a_oBufferFlagsPropertyGroup,
                              "Clear Depth Buffer",
                              a_sBoolPropertyType,
                              "Determines whether or not this node clears the depth buffer." );

   ////////////////////////////////////////////////////////////////////////////
   // CalculateNormalsModifier Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oCalculateNormalsModifierPropertyGroup = new Group;
   a_oCalculateNormalsModifierPropertyGroup.Name = "CalculateNormalsModifier Properties";
   a_lPropertySheetNodes.AddRef( a_oCalculateNormalsModifierPropertyGroup );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "Crease Angle",
                              a_sFloatPropertyType,
                              "Sets the maximum crease angle across which smooth shading is calculated. Range is <b>0<\/b> to <b>180<\/b>." );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "Face Normal Weight",
                              a_sFloatPropertyType,
                              "Sets the maximum face weighting for smooth shading. Range is <b>0<\/b> to <b>1<\/b>." );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "AddChannelModifier of Attribute Type 'Texture Coordinates'.",
                              a_sNodePropertyType,
                              "Specifies the texture coordinates channel of the normal map, if a Texture-based normal map is used." );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "Normal Attributes Channel ( for the Normal ).",
                              a_sNodePropertyType,
                              "Specifies the AddChannelModifier into which this modifier assigns computed normal values. The AddChannelModifier must be of attribute type 'Normal'." );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "Normal Attributes Channel ( for the Tangent ).",
                              a_sNodePropertyType,
                              "Specifies the AddChannelModifier into which this modifier assigns computed tangent values. The AddChannelModifier must be of attribute type 'Normal'." );

   CreatePropertySheetEntry(  a_oCalculateNormalsModifierPropertyGroup,
                              "Normal Attributes Channel ( for the Binormal ).",
                              a_sNodePropertyType,
                              "Specifies the AddChannelModifier into which this modifier assigns computed binormal values. The AddChannelModifier must be of attribute type 'Normal'." );

   ////////////////////////////////////////////////////////////////////////////
   // Camera Behavior Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oCameraBehaviorPropertyGroup = new Group;
   a_oCameraBehaviorPropertyGroup.Name = "Camera Behavior";
   a_lPropertySheetNodes.AddRef( a_oCameraBehaviorPropertyGroup );

   // Camera Mode Enumeration
   Group a_oCameraModeEnumeration = new Group;
   a_oCameraModeEnumeration.Name = "Camera Mode";
   a_oCameraBehaviorPropertyGroup.AddChild( a_oCameraModeEnumeration );

   CreatePropertySheetEntry(  a_oCameraModeEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This sets the Camera mode to standard behavior." );

   CreatePropertySheetEntry(  a_oCameraModeEnumeration,
                              "Live (Store To Device)",
                              a_sEnumPropertyType,
                              "This sets the Camera to store its settings in a LightCameraStateNode ." );

   CreatePropertySheetEntry(  a_oCameraModeEnumeration,
                              "Live (Load from Device)",
                              a_sEnumPropertyType,
                              "This sets the Camera to load its settings from a Camera or LightCameraStateNode." );

   CreatePropertySheetEntry(  a_oCameraModeEnumeration,
                              "Camera Data Source.",
                              a_sNodePropertyType,
                              "Specifies the Camera or LightCameraState used as the Camera data source." );

   ////////////////////////////////////////////////////////////////////////////
   // Camera Settings Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oCameraSettingsPropertyGroup = new Group;
   a_oCameraSettingsPropertyGroup.Name = "Camera Settings";
   a_lPropertySheetNodes.AddRef( a_oCameraSettingsPropertyGroup );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Position X",
                              a_sFloatPropertyType,
                              "This sets the camera position on the X axis." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Position Y",
                              a_sFloatPropertyType,
                              "This sets the camera position on the Y axis." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Position Z",
                              a_sFloatPropertyType,
                              "This sets the camera position on the Z axis." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Orientation X",
                              a_sFloatPropertyType,
                              "This sets the camera orientation on the X axis." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Orientation Y",
                              a_sFloatPropertyType,
                              "This sets the camera orientation on the Y axis." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Orientation Z",
                              a_sFloatPropertyType,
                              "This sets the camera orientation on the Z axis." );

   // Begin Camera Projection Enumeration
   Group a_oCameraProjectionEnumeration = new Group;
   a_oCameraProjectionEnumeration.Name = "Camera Projection";
   a_oCameraSettingsPropertyGroup.AddChild( a_oCameraProjectionEnumeration );

   CreatePropertySheetEntry(  a_oCameraProjectionEnumeration,
                              "Perspective",
                              a_sEnumPropertyType,
                              "This sets the camera mode to perspective projection." );

   CreatePropertySheetEntry(  a_oCameraProjectionEnumeration,
                              "Top",
                              a_sEnumPropertyType,
                              "This sets the camera mode to top projection." );

   CreatePropertySheetEntry(  a_oCameraProjectionEnumeration,
                              "Front",
                              a_sEnumPropertyType,
                              "This sets the camera mode to front projection." );

   CreatePropertySheetEntry(  a_oCameraProjectionEnumeration,
                              "Side",
                              a_sEnumPropertyType,
                              "This sets the camera mode to side projection." );

   // End Camera Projection Enumeration

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Zoom",
                              a_sFloatPropertyType,
                              "This sets the camera zoom." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Near Clipping Plane",
                              a_sFloatPropertyType,
                              "This sets the near clipping plane." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Far Clipping Plane",
                              a_sFloatPropertyType,
                              "This sets the far clipping plane." );

   // Begin Viewport Mode Enumeration
   Group a_oCameraViewportModeEnumeration = new Group;
   a_oCameraViewportModeEnumeration.Name = "Viewport Mode";
   a_oCameraSettingsPropertyGroup.AddChild( a_oCameraViewportModeEnumeration );

   CreatePropertySheetEntry(  a_oCameraViewportModeEnumeration,
                              "Inherit State",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oCameraViewportModeEnumeration,
                              "Set Fragment Coords",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oCameraViewportModeEnumeration,
                              "Set Normalized Coords",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );
   // End Viewport Mode Enumeration

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Viewport Min X",
                              a_sFloatPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Viewport Min Y",
                              a_sFloatPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Viewport Size X",
                              a_sFloatPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oCameraSettingsPropertyGroup,
                              "Viewport Size Y",
                              a_sFloatPropertyType,
                              "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Channel Selector Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oChannelSelectorPropertyGroup = new Group;
   a_oChannelSelectorPropertyGroup.Name = "Channel Selector";
   a_lPropertySheetNodes.AddRef( a_oChannelSelectorPropertyGroup );

   CreatePropertySheetEntry(  a_oChannelSelectorPropertyGroup,
                              "Channel 1, Channel 2 ... Channel 16",
                              a_sEnumPropertyType,
                              "The channel to apply the projected texture coordinates. Supports selection for up to 16 texture coordinates channels." );

   ////////////////////////////////////////////////////////////////////////////
   // Circle Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oCirclePropertiesPropertyGroup = new Group;
   a_oCirclePropertiesPropertyGroup.Name = "Circle Properties";
   a_lPropertySheetNodes.AddRef( a_oCirclePropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Center X",
                              a_sFloatPropertyType,
                              "Sets the circle's center position on the X axis in world coordinates." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Center Y",
                              a_sFloatPropertyType,
                              "Sets the circle's center position on the Y axis in world coordinates." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Radius",
                              a_sFloatPropertyType,
                              "Sets the circle's radius in world coordinates." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Material",
                              a_sNodePropertyType,
                              "Links the modifier to a Material node. This applies the Material to all the faces in the circle." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Radius Resolution",
                              a_sIntPropertyType,
                              "Sets the circle's tessellation on the X axis." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Start Angle",
                              a_sFloatPropertyType,
                              "Sets the circle's starting angle. 0 means the circle starts at 0 degrees from the Y axis." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "End Angle",
                              a_sFloatPropertyType,
                              "Sets the circle's ending angle. 90 means the circle ends at 90 degrees from the Y axis ( the circle ends on the X axis )." );

   CreatePropertySheetEntry(  a_oCirclePropertiesPropertyGroup,
                              "Triangulate",
                              a_sBoolPropertyType,
                              "Determines whether or not the circle's triangle edges are hidden." );

   ////////////////////////////////////////////////////////////////////////////
   // Clear Values Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oClearValuesPropertyGroup = new Group;
   a_oClearValuesPropertyGroup.Name = "Clear Values";
   a_lPropertySheetNodes.AddRef( a_oClearValuesPropertyGroup );

   CreatePropertySheetEntry(  a_oClearValuesPropertyGroup,
                              "Color Value",
                              a_sColorPropertyType,
                              "Determines the color to which the color buffer is cleared." );

   CreatePropertySheetEntry(  a_oClearValuesPropertyGroup,
                              "Depth Value",
                              a_sFloatPropertyType,
                              "Determines the value to which the depth buffer is cleared. -1 is a typical value." );


   ////////////////////////////////////////////////////////////////////////////
   // Color Array Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oColorArrayParametersPropertyGroup = new Group;
   a_oColorArrayParametersPropertyGroup.Name = "Color Array Parameters";
   a_lPropertySheetNodes.AddRef( a_oColorArrayParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oColorArrayParametersPropertyGroup,
                              "Array Dimension",
                              a_sIntPropertyType,
                              "Sets the dimension of the array. Maximum array size is determined by the OpenGL implementation on the active hardware." );

   CreatePropertySheetEntry(  a_oColorArrayParametersPropertyGroup,
                              "Color 0, Color 1, ... Color N",
                              a_sColorPropertyType,
                              "Sets the color value for each member of the array." );

   CreatePropertySheetEntry(  a_oColorArrayParametersPropertyGroup,
                              "Alpha 0, Alpha 1, ... Alpha N",
                              a_sFloatPropertyType,
                              "Sets the alpha value for each member of the array." );

   ////////////////////////////////////////////////////////////////////////////
   // Color Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oColorParametersPropertyGroup = new Group;
   a_oColorParametersPropertyGroup.Name = "Color Parameters";
   a_lPropertySheetNodes.AddRef( a_oColorParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oColorParametersPropertyGroup,
                              "Color",
                              a_sColorPropertyType,
                              "Sets the color value." );

   ////////////////////////////////////////////////////////////////////////////
   // Conditional Code Generation Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oConditionalCodeGenerationPropertyGroup = new Group;
   a_oConditionalCodeGenerationPropertyGroup.Name = "Conditional Code Generation";
   a_lPropertySheetNodes.AddRef( a_oConditionalCodeGenerationPropertyGroup );

   CreatePropertySheetEntry(  a_oConditionalCodeGenerationPropertyGroup,
                              "Guard Function",
                              a_sStringPropertyType,
                              "Specify an SSL guard function. Code is generated for child expressions if this function return <b>True</b>." );

   CreatePropertySheetEntry(  a_oConditionalCodeGenerationPropertyGroup,
                              "Guard Data Source",
                              a_sNodePropertyType,
                              "Specify a node to be evaluated by the guard function ( if required )." );

   ////////////////////////////////////////////////////////////////////////////
   // Condition Expression
   ////////////////////////////////////////////////////////////////////////////

   Group a_oConditionExpressionPropertyGroup = new Group;
   a_oConditionExpressionPropertyGroup.Name = "Condition Expression";
   a_lPropertySheetNodes.AddRef( a_oConditionExpressionPropertyGroup );

   // Begin Condition Expression Type Enum
   Group a_oConditionExpressionTestEnumeration = new Group;
   a_oConditionExpressionTestEnumeration.Name = "Condition Expression Test";
   a_oConditionExpressionPropertyGroup.AddChild( a_oConditionExpressionTestEnumeration );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "&gt;",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>greater than<\/b>. For example: 'i &lt;'." );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "&lt;",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>less than<\/b>. For example: 'i &gt;'." );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "&gt;=",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>greater than or equal to<\/b>. For example: 'i &gt;= '." );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "&lt;=",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>less than or equal to<\/b>. For example: 'i &lt;= '." );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "==",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>is equal to<\/b>. For example: 'i == '." );

   CreatePropertySheetEntry(  a_oConditionExpressionTestEnumeration,
                              "!=",
                              a_sEnumPropertyType,
                              "Sets the condition expression test to <b>not equal to<\/b>. For example: 'i != '." );

   // End Condition Expression Type Enum

   CreatePropertySheetEntry(  a_oConditionExpressionPropertyGroup,
                              "Condition Expression Data Source",
                              a_sNodePropertyType,
                              "Specify a condition expression data source. For example: a link to a TypeAggregatorNode <b>gl_in<\/b>, an IntegerNode ( the IntegerNode value )." );

   CreatePropertySheetEntry(  a_oConditionExpressionPropertyGroup,
                              "Condition Expression Data Source Member Function",
                              a_sStringPropertyType,
                              "Specify a condition expression data source member function. For example: if the data source is a TypeAggregatorNode representing 'gl_in', you might specify '.length()' here." );

   ////////////////////////////////////////////////////////////////////////////
   // Container Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oContainerParametersPropertyGroup = new Group;
   a_oContainerParametersPropertyGroup.Name = "Container Parameters";
   a_lPropertySheetNodes.AddRef( a_oContainerParametersPropertyGroup );

   // Begin Container Type Enum
   Group a_oContainerTypeEnumeration = new Group;
   a_oContainerTypeEnumeration.Name = "Container Type";
   a_oContainerParametersPropertyGroup.AddChild( a_oContainerTypeEnumeration );

   CreatePropertySheetEntry(  a_oContainerTypeEnumeration,
                              "Container Type 0",
                              a_sEnumPropertyType,
                              "Sets the container type to 0." );

   CreatePropertySheetEntry(  a_oContainerTypeEnumeration,
                              "Container Type 1",
                              a_sEnumPropertyType,
                              "Sets the container type to 1." );

   CreatePropertySheetEntry(  a_oContainerTypeEnumeration,
                              "Container Type 2",
                              a_sEnumPropertyType,
                              "Sets the container type to 2." );

   ////////////////////////////////////////////////////////////////////////////
   // Cylinder Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oCylinderPropertiesPropertyGroup = new Group;
   a_oCylinderPropertiesPropertyGroup.Name = "Cylinder Properties";
   a_lPropertySheetNodes.AddRef( a_oCylinderPropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Center X",
                              a_sFloatPropertyType,
                              "Sets center of the cylinder on the X axis in world coordinates." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Center Y",
                              a_sFloatPropertyType,
                              "Sets center of the cylinder on the Y axis in world coordinates." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Base Z",
                              a_sFloatPropertyType,
                              "Sets foot of the cylinder on the Z axis in world coordinates." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Radius",
                              a_sFloatPropertyType,
                              "Sets the radius of the cylinder in world coordinates, using  <b>Center X<\/b> and <b>Center Y<\/b> as the frame of reference." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Height",
                              a_sFloatPropertyType,
                              "Sets the height of the cylinder in world coordinates, using  <b>Base Z<\/b> as the frame of reference." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Material",
                              a_sNodePropertyType,
                              "Links the modifier to a Material node. This applies the Material to all the faces in the cylinder." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Radius Resolution",
                              a_sIntPropertyType,
                              "Sets the geometric resolution of the cylinder around its circumference." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Z Resolution",
                              a_sIntPropertyType,
                              "Sets the geometric resolution of the cylinder on the Z axis." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Triangulate",
                              a_sBoolPropertyType,
                              "Determines whether or not the cylinder's triangle edges are hidden." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Apply Texture Modifier",
                              a_sBoolPropertyType,
                              "Determines whether or not the cylinder is used to project texture coordinates." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Start Radius Texture",
                              a_sBoolPropertyType,
                              "Determines the location around the circumference at which to start texture coordinate flow. 0.0 is a common value." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "Start Height Texture",
                              a_sBoolPropertyType,
                              "Determines the location along the cylinder's height at which to start texture coordinate flow. 0.0 is a common value." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "End Radius Texture",
                              a_sBoolPropertyType,
                              "Determines the location around the circumference at which to stop texture coordinate flow. 1.0 or 2.0 or 3.0 are common values." );

   CreatePropertySheetEntry(  a_oCylinderPropertiesPropertyGroup,
                              "End Height Texture",
                              a_sBoolPropertyType,
                              "Determines the location along the cylinder's height at which to stop texture coordinate flow. 1.0 or 2.0 or 3.0 are common values." );

   ////////////////////////////////////////////////////////////////////////////
   // DeclareFunctionNode Code Formatting Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDeclareFunctionNodeCodeFormattingPropertyGroup = new Group;
   a_oDeclareFunctionNodeCodeFormattingPropertyGroup.Name = "DeclareFunctionNode Code Formatting";
   a_lPropertySheetNodes.AddRef( a_oDeclareFunctionNodeCodeFormattingPropertyGroup );

   CreatePropertySheetEntry(  a_oDeclareFunctionNodeCodeFormattingPropertyGroup,
                              "Insert Newline Before Opening Brace",
                              a_sBoolPropertyType,
                              "Set this parameter to <b>TRUE<\/b> if you want a new line before the opening brace." );

   ////////////////////////////////////////////////////////////////////////////
   // Displace Options
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDisplaceOptionsPropertyGroup = new Group;
   a_oDisplaceOptionsPropertyGroup.Name = "Displace Options";
   a_lPropertySheetNodes.AddRef( a_oDisplaceOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Translation",
                              a_sFloatPropertyType,
                              "Sets the amount of displacement along the Z axis. Range is -100,000,000 to 100,000,000." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Displacement File",
                              a_sFilePathPropertyType,
                              "Links the modifier to a .DEM, .BMP, or .TGA file on the hard disk." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Starting Corner X",
                              a_sFloatPropertyType,
                              "Sets the X starting pixel of the displacement inside the imagery. You might only want to use a specific region of the imagery or you might want to start at 0,0,0." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Starting Corner Y",
                              a_sFloatPropertyType,
                              "Sets the Y starting pixel of the displacement inside the imagery. You might only want to use a specific region of the imagery or you might want to start at 0,0,0." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Displacement Width In Pixels",
                              a_sFloatPropertyType,
                              "Sets the width ( X ) of the displacement region in pixels, relative to <b>Starting Corner X</b>." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Displacement Length In Pixels",
                              a_sFloatPropertyType,
                              "Sets the length ( Y ) of the displacement region in pixels, relative to <b>Starting Corner Y</b>." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Use 24-bit Elevation Data",
                              a_sBoolPropertyType,
                              "Allows you to use a 24-bit image instead of grayscale. This allows for high precision elevation values with a higher dynamic range than gray scale values." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Minimum Elevation",
                              a_sFloatPropertyType,
                              "Sets the minimum elevation for the terrain. This parameter is rarely configured by hand." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Maximum Elevation",
                              a_sFloatPropertyType,
                              "Sets the maximum elevation for the terrain. This parameter is rarely configured by hand." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Overall Minimum Elevation",
                              a_sFloatPropertyType,
                              "Sets the overall minimum elevation for the terrain when imagery is used to displace multiple meshes. This parameter has no effect on the displacement for a single Mesh." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Overall Maximum Elevation",
                              a_sFloatPropertyType,
                              "Sets the overall maximum elevation for the terrain when imagery is used to displace multiple meshes. This parameter has no effect on the displacement for a single Mesh." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Units Per Pixel X",
                              a_sFloatPropertyType,
                              "Sets the X axis spacing between elevation values. This parameter is used to generate normals maps and has no effect on the Mesh. This parameter is rarely configured by hand." );

   CreatePropertySheetEntry(  a_oDisplaceOptionsPropertyGroup,
                              "Units Per Pixel Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis spacing between elevation values. This parameter is used to generate normals maps and has no effect on the Mesh. This parameter is rarely configured by hand." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Boolean Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicBooleanPropertyGroup = new Group;
   a_oDynamicBooleanPropertyGroup.Name = "Dynamic Boolean";
   a_lPropertySheetNodes.AddRef( a_oDynamicBooleanPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicBooleanPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>TRUE<\/b> or <b>FALSE<\/b> value can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Color Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicColorPropertyGroup = new Group;
   a_oDynamicColorPropertyGroup.Name = "Dynamic Color";
   a_lPropertySheetNodes.AddRef( a_oDynamicColorPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicColorPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>COLOR<\/b> value can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Float Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicFloatPropertyGroup = new Group;
   a_oDynamicFloatPropertyGroup.Name = "Dynamic Float";
   a_lPropertySheetNodes.AddRef( a_oDynamicFloatPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicFloatPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>FLOAT<\/b> value can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Integer Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicIntegerPropertyGroup = new Group;
   a_oDynamicIntegerPropertyGroup.Name = "Dynamic Integer";
   a_lPropertySheetNodes.AddRef( a_oDynamicIntegerPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicIntegerPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>INTEGER<\/b> value can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // DynamicLightArrayNode Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicLightArrayNodeOptionsPropertyGroup = new Group;
   a_oDynamicLightArrayNodeOptionsPropertyGroup.Name = "DynamicLightArrayNode Options";
   a_lPropertySheetNodes.AddRef( a_oDynamicLightArrayNodeOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicLightArrayNodeOptionsPropertyGroup,
                              "Use This Many Lights",
                              a_sIntPropertyType,
                              "Sets the number of Lights to create out of a maximum of 512." );

   CreatePropertySheetEntry(  a_oDynamicLightArrayNodeOptionsPropertyGroup,
                              "Display Properties For The Light At This Index",
                              a_sIntPropertyType,
                              "Displays properties for the Light at the indicated index." );

   CreatePropertySheetEntry(  a_oDynamicLightArrayNodeOptionsPropertyGroup,
                              "Render Light Guides",
                              a_sBoolPropertyType,
                              "Displays Light guides." );

   CreatePropertySheetEntry(  a_oDynamicLightArrayNodeOptionsPropertyGroup,
                              "Broadcast Lights To RenderInfo",
                              a_sBoolPropertyType,
                              "Determines whether or not Lights are added to the Light stack and sent to the rendering device." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Matrix Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicMatrixPropertyGroup = new Group;
   a_oDynamicMatrixPropertyGroup.Name = "Dynamic Matrix";
   a_lPropertySheetNodes.AddRef( a_oDynamicMatrixPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicMatrixPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>MATRIX<\/b> values can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Sampler Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicSamplerPropertyGroup = new Group;
   a_oDynamicSamplerPropertyGroup.Name = "Dynamic Sampler";
   a_lPropertySheetNodes.AddRef( a_oDynamicSamplerPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicSamplerPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its values can be tested." );

   ////////////////////////////////////////////////////////////////////////////
   // Dynamic Vector Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDynamicVectorPropertyGroup = new Group;
   a_oDynamicVectorPropertyGroup.Name = "Dynamic Vector";
   a_lPropertySheetNodes.AddRef( a_oDynamicVectorPropertyGroup );

   CreatePropertySheetEntry(  a_oDynamicVectorPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "This parameter links the variable to a data source from which its <b>VECTOR<\/b> values can be derived." );

   ////////////////////////////////////////////////////////////////////////////
   // Export Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oExportOptionsPropertyGroup = new Group;
   a_oExportOptionsPropertyGroup.Name = "Export Options";
   a_lPropertySheetNodes.AddRef( a_oExportOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Output Rectangle Tessellation X",
                              a_sIntPropertyType,
                              "This parameter sets the X axis tessellation value for output terrain." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Output Rectangle Tessellation Y",
                              a_sIntPropertyType,
                              "This parameter sets the Y axis tessellation value for output terrain." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Place New Nodes Here",
                              a_sStringPropertyType,
                              "The graph address, such as /Database/Output, to place the new terrain Mesh nodes." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Export To This Directory",
                              a_sStringPropertyType,
                              "The disk address, such as C:\Terrain, to place the new terrain databases." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Number Of Levels To Create",
                              a_sIntPropertyType,
                              "Create this many levels of detail. Each level of detail is stored as a separate file on the hard disk." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "LOD 1 Simplify Percent, LOD 2 Simplify Percent",
                              a_sFloatPropertyType,
                              "The simplification percent for each level of detail." );

   CreatePropertySheetEntry(  a_oExportOptionsPropertyGroup,
                              "Border Pixel Overlap",
                              a_sIntPropertyType,
                              "This is a private, debug-only feature." );

   ////////////////////////////////////////////////////////////////////////////
   // Expression Configuration Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oExpressionConfigurationPropertyGroup = new Group;
   a_oExpressionConfigurationPropertyGroup.Name = "Expression Configuration";
   a_lPropertySheetNodes.AddRef( a_oExpressionConfigurationPropertyGroup );

   CreatePropertySheetEntry(  a_oExpressionConfigurationPropertyGroup,
                              "Enable",
                              a_sBoolPropertyType,
                              "This determines whether or not the node is enabled." );

   // Language Enumeration
   Group a_oLanguageEnumeration = new Group;
   a_oLanguageEnumeration.Name = "Language";
   a_oExpressionConfigurationPropertyGroup.AddChild( a_oLanguageEnumeration );

   CreatePropertySheetEntry(  a_oLanguageEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the language type to none." );

   CreatePropertySheetEntry(  a_oLanguageEnumeration,
                              "SSL Script",
                              a_sEnumPropertyType,
                              "Sets the language type to SSL." );

   CreatePropertySheetEntry(  a_oLanguageEnumeration,
                              "GLSL Script",
                              a_sEnumPropertyType,
                              "Sets the language type to GLSL. This feature is unsupported in public releases." );

   CreatePropertySheetEntry(  a_oExpressionConfigurationPropertyGroup,
                              "Type",
                              a_sStringPropertyType,
                              "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Expression Code Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oExpressionCodePropertyGroup = new Group;
   a_oExpressionCodePropertyGroup.Name = "Expression Code";
   a_lPropertySheetNodes.AddRef( a_oExpressionCodePropertyGroup );

   CreatePropertySheetEntry(  a_oExpressionCodePropertyGroup,
                              "Code",
                              a_sStringPropertyType,
                              "The SSL or GLSL expression you wish to evaluate." );

   ////////////////////////////////////////////////////////////////////////////
   // External Link Settings Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oExternalLinkSettingsPropertyGroup = new Group;
   a_oExternalLinkSettingsPropertyGroup.Name = "External Link Settings";
   a_lPropertySheetNodes.AddRef( a_oExternalLinkSettingsPropertyGroup );

   CreatePropertySheetEntry(  a_oExternalLinkSettingsPropertyGroup,
                              "Point At This .BOX File",
                              a_sFilePathPropertyType,
                              "An absolute or relative path to a .BOX file on the hard disk. Relative path is best practice." );

   CreatePropertySheetEntry(  a_oExternalLinkSettingsPropertyGroup,
                              "Point At A Node In This File",
                              a_sFilePathPropertyType,
                              "The graph address of the node at which the NodeLink points. For example: /Material/MyMaterial" );

   CreatePropertySheetEntry(  a_oExternalLinkSettingsPropertyGroup,
                              "Load Unique Copy",
                              a_sBoolPropertyType,
                              "If several NodeLinks refer to the same file, the model cache loads a single copy. This parameter provides an override in order to load a unique copy into the model cache." );

   ////////////////////////////////////////////////////////////////////////////
   // Extrude Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oExtrudePropertyGroup = new Group;
   a_oExtrudePropertyGroup.Name = "Extrude";
   a_lPropertySheetNodes.AddRef( a_oExtrudePropertyGroup );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "X Axis Extrude Distance",
                              a_sFloatPropertyType,
                              "This parameter sets the extrude distance on the X axis." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Y Axis Extrude Distance",
                              a_sFloatPropertyType,
                              "This parameter sets the extrude distance on the Y axis." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Z Axis Extrude Distance",
                              a_sFloatPropertyType,
                              "This parameter sets the extrude distance on the Z axis." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Vertex Normal Extrude Distance",
                              a_sFloatPropertyType,
                              "This parameter sets the extrude distance along the vertex normal." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Face Normal Extrude Distance",
                              a_sFloatPropertyType,
                              "This parameter sets the extrude distance along the vertex normal." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Extrude Section Count",
                              a_sIntPropertyType,
                              "This parameter sets the number of cross-sections created during the extrude." );

   CreatePropertySheetEntry(  a_oExtrudePropertyGroup,
                              "Scale Extrude Cap In Units",
                              a_sIntPropertyType,
                              "This parameter scales the extrude cap in database units." );

   ////////////////////////////////////////////////////////////////////////////
   // FileNode Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFileNodeOptionsPropertyGroup = new Group;
   a_oFileNodeOptionsPropertyGroup.Name = "FileNode Options";
   a_lPropertySheetNodes.AddRef( a_oFileNodeOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oFileNodeOptionsPropertyGroup, "File Path", a_sFilePathPropertyType, "Sets the path to the file referenced by the FileNode." );

   ////////////////////////////////////////////////////////////////////////////
   // Float Array Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFloatArrayParametersPropertyGroup = new Group;
   a_oFloatArrayParametersPropertyGroup.Name = "Float Array Parameters";
   a_lPropertySheetNodes.AddRef( a_oFloatArrayParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oFloatArrayParametersPropertyGroup,
                              "Array Dimension",
                              a_sIntPropertyType,
                              "Sets the dimension of the array. Maximum array size is determined by the OpenGL implementation on the active hardware." );

   CreatePropertySheetEntry(  a_oFloatArrayParametersPropertyGroup,
                              "Float 0, Float 1, ... Float N",
                              a_sFloatPropertyType,
                              "Sets the float value for each member of the array." );

   ////////////////////////////////////////////////////////////////////////////
   // Float Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFloatParametersPropertyGroup = new Group;
   a_oFloatParametersPropertyGroup.Name = "Float Parameters";
   a_lPropertySheetNodes.AddRef( a_oFloatParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oFloatParametersPropertyGroup,
                              "Value",
                              a_sFloatPropertyType,
                              "The value of the FloatNode." );

   ////////////////////////////////////////////////////////////////////////////
   // Function Construction Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFunctionConstructionPropertyGroup = new Group;
   a_oFunctionConstructionPropertyGroup.Name = "Function Construction";
   a_lPropertySheetNodes.AddRef( a_oFunctionConstructionPropertyGroup );

   CreatePropertySheetEntry(  a_oFunctionConstructionPropertyGroup,
                              "Return Type",
                              a_sEnumPropertyType,
                              "Sets the function's return type. A list of all GLSL data types are provided." );

   CreatePropertySheetEntry(  a_oFunctionConstructionPropertyGroup,
                              "Return Value Explicit Array Size",
                              a_sIntPropertyType,
                              "Sets the size of the return value array, if applicable. Arrays returned from functions must be explicitly sized." );

   CreatePropertySheetEntry(  a_oFunctionConstructionPropertyGroup,
                              "Return Type Data Source",
                              a_sNodePropertyType,
                              "Provides a link to a node representing a user-defined type such as a struct or variable. Otherwise, use the <b>Return Type<\/b> parameter." );

   CreatePropertySheetEntry(  a_oFunctionConstructionPropertyGroup,
                              "Function Name",
                              a_sNodePropertyType,
                              "Sets the name of the function. This must adhere to GLSL conventions." );

   ////////////////////////////////////////////////////////////////////////////
   // Function Parameter Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFunctionParameterPropertyGroup = new Group;
   a_oFunctionParameterPropertyGroup.Name = "Function Parameter";
   a_lPropertySheetNodes.AddRef( a_oFunctionParameterPropertyGroup );

   // Parameter Qualifier Enumeration
   Group a_oParameterQualifierEnumeration = new Group;
   a_oParameterQualifierEnumeration.Name = "Parameter Qualifier";
   a_oFunctionParameterPropertyGroup.AddChild( a_oParameterQualifierEnumeration );

   CreatePropertySheetEntry(  a_oParameterQualifierEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Function parameter declared without any parameter qualifier ( Same as using the <b>In<\/b> parameter qualifier )." );

   CreatePropertySheetEntry(  a_oParameterQualifierEnumeration,
                              "Const",
                              a_sEnumPropertyType,
                              "Function parameter declared with 'const' parameter qualifier ( variable in calling context must be 'const' and will remain const inside the function )." );

   CreatePropertySheetEntry(  a_oParameterQualifierEnumeration,
                              "In",
                              a_sEnumPropertyType,
                              "Function parameter declared with 'in' parameter qualifier ( value is copied in but not copied out by function )." );

   CreatePropertySheetEntry(  a_oParameterQualifierEnumeration,
                              "Out",
                              a_sEnumPropertyType,
                              "Function parameter declared with 'out' parameter qualifier ( value is copied out but not copied in by function )." );

   CreatePropertySheetEntry(  a_oParameterQualifierEnumeration,
                              "Inout",
                              a_sEnumPropertyType,
                              "Function parameter declared with 'inout' parameter qualifier ( value is copied in and copied out by function )." );

   CreatePropertySheetEntry(  a_oFunctionParameterPropertyGroup,
                              "Parameter Type",
                              a_sEnumPropertyType,
                              "Sets the function parameter type. A list of all GLSL data types are provided." );

   CreatePropertySheetEntry(  a_oFunctionParameterPropertyGroup,
                              "Parameter Type Data Source",
                              a_sNodePropertyType,
                              "Provides a link to a node representing a user-defined type such as a struct. Otherwise, use the <b>Parameter Type<\/b> parameter." );

   CreatePropertySheetEntry(  a_oFunctionParameterPropertyGroup,
                              "Parameter Explicit Array Size",
                              a_sIntPropertyType,
                              "Sets the function parameter array size. Function parameters that are arrays must be explicitly sized." );

   CreatePropertySheetEntry(  a_oFunctionParameterPropertyGroup,
                              "Parameter Name",
                              a_sEnumPropertyType,
                              "Sets the function parameter name." );

   ////////////////////////////////////////////////////////////////////////////
   // Function Qualifiers Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oFunctionQualifiersPropertyGroup = new Group;
   a_oFunctionQualifiersPropertyGroup.Name = "Function Qualifiers";
   a_lPropertySheetNodes.AddRef( a_oFunctionQualifiersPropertyGroup );

   CreatePropertySheetEntry(  a_oFunctionQualifiersPropertyGroup,
                              "Use Const Qualifier",
                              a_sBoolPropertyType,
                              "Declares the function with the 'const' qualifier." );

   CreatePropertySheetEntry(  a_oFunctionQualifiersPropertyGroup,
                              "Use Subroutine Qualifier",
                              a_sBoolPropertyType,
                              "Declares the function with the 'subroutine' qualifier." );

   CreatePropertySheetEntry(  a_oFunctionQualifiersPropertyGroup,
                              "Use Uniform Qualifier",
                              a_sBoolPropertyType,
                              "Declares the function with the 'uniform' qualifier." );

   ////////////////////////////////////////////////////////////////////////////
   // Geographic Projection Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGeographicProjectionPropertyGroup = new Group;
   a_oGeographicProjectionPropertyGroup.Name = "Geographic Projection";
   a_lPropertySheetNodes.AddRef( a_oGeographicProjectionPropertyGroup );

   // Projection Enumeration
   Group a_oProjectionEnumeration = new Group;
   a_oProjectionEnumeration.Name = "Projection";
   a_oGeographicProjectionPropertyGroup.AddChild( a_oProjectionEnumeration );

   CreatePropertySheetEntry(  a_oProjectionEnumeration,
                              "Universal Transverse Mercator",
                              a_sEnumPropertyType,
                              "Sets the projection to Universal Transverse Mercator." );

   CreatePropertySheetEntry(  a_oProjectionEnumeration,
                              "Lambert Conformal Conic",
                              a_sEnumPropertyType,
                              "Sets the projection to Lambert Conformal Conic." );

   CreatePropertySheetEntry(  a_oProjectionEnumeration,
                              "Robinson",
                              a_sEnumPropertyType,
                              "Sets the projection to Robinson." );

   // Datum Enumeration
   Group a_oDatumEnumeration = new Group;
   a_oDatumEnumeration.Name = "Datum";
   a_oGeographicProjectionPropertyGroup.AddChild( a_oDatumEnumeration );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "WGS 84",
                              a_sEnumPropertyType,
                              "Sets the datum to World Geodetic Survey 1984." );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "WGS 72",
                              a_sEnumPropertyType,
                              "Sets the datum to World Geodetic Survey 1972." );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "Clarke 1866",
                              a_sEnumPropertyType,
                              "Sets the datum to Clark 1866." );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "Clarke 1880",
                              a_sEnumPropertyType,
                              "Sets the datum to Clark 1880." );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "Bessel",
                              a_sEnumPropertyType,
                              "Sets the datum to Bessel." );

   CreatePropertySheetEntry(  a_oDatumEnumeration,
                              "GRS 80",
                              a_sEnumPropertyType,
                              "Sets the datum to Geodetic Reference System 1980." );

   // UTM Exclusive Parameters
   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "UTM Zone",
                              a_sIntPropertyType,
                              "This sets the UTM zone. This parameter is available when the projection is Universal Transverse Mercator" );

   // LCC Exclusive Parameters
   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "First Standard Parallel",
                              a_sFloatPropertyType,
                              "Sets the first standard parallel of the projection. Range is from -90 to 90. This value tends to be the lowest latitude value of the area being projected." );

   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "Second Standard Parallel",
                              a_sFloatPropertyType,
                              "Sets the second standard parallel of the projection. Range is from -90 to 90. This value tends to be the highest latitude value of the area being projected." );

   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "Central Meridian",
                              a_sFloatPropertyType,
                              "Sets the central meridian. Range is from -180 to 180. This value tends to be the center longitude value of the area being projected." );

   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "Origin Latitude",
                              a_sFloatPropertyType,
                              "Sets the origin latitude, which is the lowest latitude in the geographic area being projected." );

   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "Easting",
                              a_sFloatPropertyType,
                              "Sets the false easting value for the projection. Range is from -100,000,000,000 to 100,000,000,000." );

   CreatePropertySheetEntry(  a_oGeographicProjectionPropertyGroup,
                              "Northing",
                              a_sFloatPropertyType,
                              "Sets the false northing value for the projection. Range is from -100,000,000,000 to 100,000,000,000." );

   ////////////////////////////////////////////////////////////////////////////
   // Geographic Texture Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGeographicTexturePropertyGroup = new Group;
   a_oGeographicTexturePropertyGroup.Name = "Geographic Texture";
   a_lPropertySheetNodes.AddRef( a_oGeographicTexturePropertyGroup );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Values Are Already Projected",
                              a_sBoolPropertyType,
                              "Set this value if the texture is already projected, such as with ortho-imagery. Height imagery is usually unprojected." );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Minimum Latitude",
                              a_sFloatPropertyType,
                              "This is the minimum latitude, such as 40 ( degrees ), of the unprojected texture. May also be northing coordinates if the imagery is already projected." );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Minimum Longitude",
                              a_sFloatPropertyType,
                              "This is the minimum longitude, such as -127 ( degrees ), of the unprojected texture. May also be easting coordinates if the imagery is already projected." );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Maximum Latitude",
                              a_sFloatPropertyType,
                              "This is the maximum latitude, such as 41 ( degrees ), of the unprojected texture. May also be northing coordinates if the imagery is already projected." );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Maximum Longitude",
                              a_sFloatPropertyType,
                              "This is the maximum longitude, such as -125 ( degrees ), of the unprojected texture. May also be easting coordinates if the imagery is already projected." );

   CreatePropertySheetEntry(  a_oGeographicTexturePropertyGroup,
                              "Material Filter",
                              a_sNodePropertyType,
                              "Apply the projection to the Material or NodeLink&#187;Material specified by this node parameter." );

   ////////////////////////////////////////////////////////////////////////////
   // Geometry Program Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGeometryProgramOptionsPropertyGroup = new Group;
   a_oGeometryProgramOptionsPropertyGroup.Name = "Geometry Program Options";
   a_lPropertySheetNodes.AddRef( a_oGeometryProgramOptionsPropertyGroup );

   // Begin Geometry Program Input Topology Enumeration
   Group a_oGeometryProgramInputTopologyEnumeration = new Group;
   a_oGeometryProgramInputTopologyEnumeration.Name = "Geometry Program Input Topology";
   a_oGeometryProgramOptionsPropertyGroup.AddChild( a_oGeometryProgramInputTopologyEnumeration );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Points",
                              a_sEnumPropertyType,
                              "Sets the input topology to lines." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Lines",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Line Loop",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Line Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Triangles",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Triangle Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Triangle Fan",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Triangle Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Quadrilaterals",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Quadrilateral Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramInputTopologyEnumeration,
                              "Polygons",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   // Begin Geometry Program Output Topology Enumeration
   Group a_oGeometryProgramOutputTopologyEnumeration = new Group;
   a_oGeometryProgramOutputTopologyEnumeration.Name = "Geometry Program Output Topology";
   a_oGeometryProgramOptionsPropertyGroup.AddChild( a_oGeometryProgramOutputTopologyEnumeration );

   CreatePropertySheetEntry(  a_oGeometryProgramOutputTopologyEnumeration,
                              "Points",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramOutputTopologyEnumeration,
                              "Line Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramOutputTopologyEnumeration,
                              "Triangle Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramOutputTopologyEnumeration,
                              "Quadrilateral Strip",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramOutputTopologyEnumeration,
                              "Polygon",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGeometryProgramOptionsPropertyGroup,
                              "Geometry Program Max Output Verts",
                              a_sIntPropertyType,
                              "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Group Bounding Box Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGroupBoundingBoxPropertyGroup = new Group;
   a_oGroupBoundingBoxPropertyGroup.Name = "Group Bounding Box";
   a_lPropertySheetNodes.AddRef( a_oGroupBoundingBoxPropertyGroup );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Bounding Box Frozen",
                              a_sBoolPropertyType,
                              "Freezes the bounding box at its current size. This is often used as a runtime flag, and modifying this parameter may cause incorrect culling." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Minimum X",
                              a_sFloatPropertyType,
                              "Displays the minimum bounding box coordinate on the X axis." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Minimum Y",
                              a_sFloatPropertyType,
                              "Displays the minimum bounding box coordinate on the Y axis." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Minimum Z",
                              a_sFloatPropertyType,
                              "Displays the minimum bounding box coordinate on the Z axis." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Maximum X",
                              a_sFloatPropertyType,
                              "Displays the maximum bounding box coordinate on the X axis." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Maximum Y",
                              a_sFloatPropertyType,
                              "Displays the maximum bounding box coordinate on the Y axis." );

   CreatePropertySheetEntry(  a_oGroupBoundingBoxPropertyGroup,
                              "Maximum Z",
                              a_sFloatPropertyType,
                              "Displays the maximum bounding box coordinate on the Z axis." );

   ////////////////////////////////////////////////////////////////////////////
   // Group Transformation Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGroupTransformationPropertyGroup = new Group;
   a_oGroupTransformationPropertyGroup.Name = "Group Transformation";
   a_lPropertySheetNodes.AddRef( a_oGroupTransformationPropertyGroup );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Transform Locked",
                              a_sBoolPropertyType,
                              "Locks the node and prevents transformation of the node and its children. This is a runtime flag and has no effect in Scenome applications." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Position X",
                              a_sFloatPropertyType,
                              "Displays the node's position on the X axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Position Y",
                              a_sFloatPropertyType,
                              "Displays the node's position on the Y axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Position Z",
                              a_sFloatPropertyType,
                              "Displays the node's position on the Z axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Orientation X",
                              a_sFloatPropertyType,
                              "Displays the node's orientation on the X axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Orientation Y",
                              a_sFloatPropertyType,
                              "Displays the node's orientation on the Y axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Orientation Z",
                              a_sFloatPropertyType,
                              "Displays the node's orientation on the Z axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Scale X",
                              a_sFloatPropertyType,
                              "Displays the node's scale on the X axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Scale Y",
                              a_sFloatPropertyType,
                              "Displays the node's scale on the Y axis." );

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Scale Z",
                              a_sFloatPropertyType,
                              "Displays the node's scale on the Z axis." );

   string a_sBillboardDocumentation =  "Sets the node as a billboard. Billboards rotate to face the camera. " +
                                       "This feature has been preserved for compatibility purposes, but this " +
                                       " functionality should be implemented with geometry shaders.";

   CreatePropertySheetEntry(  a_oGroupTransformationPropertyGroup,
                              "Billboard",
                              a_sBoolPropertyType,
                              a_sBillboardDocumentation );

   ////////////////////////////////////////////////////////////////////////////
   // Group Traversal Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oGroupTraversalPropertyGroup = new Group;
   a_oGroupTraversalPropertyGroup.Name = "Group Traversal";
   a_lPropertySheetNodes.AddRef( a_oGroupTraversalPropertyGroup );

   CreatePropertySheetEntry(  a_oGroupTraversalPropertyGroup,
                              "Visible",
                              a_sBoolPropertyType,
                              "Toggles the Group visible/invisible. Child nodes are not visible when their parent Group is invisible." );

   CreatePropertySheetEntry(  a_oGroupTraversalPropertyGroup,
                              "Collisions",
                              a_sBoolPropertyType,
                              "Toggles collision detection on the Group and its children. This is used for runtime export and has no effect in Scenome applications." );

   CreatePropertySheetEntry(  a_oGroupTraversalPropertyGroup,
                              "Cull",
                              a_sBoolPropertyType,
                              "Toggles view volume culling on/off. modifying this parameter may cause incorrect culling and other unexpected consequences." );

   CreatePropertySheetEntry(  a_oGroupTraversalPropertyGroup,
                              "Preserve Camera",
                              a_sBoolPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oGroupTraversalPropertyGroup,
                              "Generic Data Source",
                              a_sNodePropertyType,
                              "This option provides the capability to connect a Group to a node that serves as a generic data source." );

   ////////////////////////////////////////////////////////////////////////////
   // Initialize Expression
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInitializeExpressionPropertyGroup = new Group;
   a_oInitializeExpressionPropertyGroup.Name = "Initialize Expression";
   a_lPropertySheetNodes.AddRef( a_oInitializeExpressionPropertyGroup );

   // Begin Initialize Expression Type Enum
   Group a_oInitializeExpressionTypeEnumeration = new Group;
   a_oInitializeExpressionTypeEnumeration.Name = "Initialize Expression Type";
   a_oInitializeExpressionPropertyGroup.AddChild( a_oInitializeExpressionTypeEnumeration );

   CreatePropertySheetEntry(  a_oInitializeExpressionTypeEnumeration,
                              "int",
                              a_sEnumPropertyType,
                              "Sets the initializer to type int. For example: 'for( int...'." );

   CreatePropertySheetEntry(  a_oInitializeExpressionTypeEnumeration,
                              "float",
                              a_sEnumPropertyType,
                              "Sets the initializer type to float. For example: 'for( float...'." );

   CreatePropertySheetEntry(  a_oInitializeExpressionTypeEnumeration,
                              "double",
                              a_sEnumPropertyType,
                              "Sets the initializer type to double. For example: 'for( double ...'." );

   // End Initialize Expression Type Enum

   CreatePropertySheetEntry(  a_oInitializeExpressionPropertyGroup,
                              "Initialize Expression Variable Name",
                              a_sStringPropertyType,
                              "Specify an iterator variable name. For example: 'for( int i...'" );

   CreatePropertySheetEntry(  a_oInitializeExpressionPropertyGroup,
                              "Initialize Expression Variable Initial Value",
                              a_sFloatPropertyType,
                              "Specify an iterator variable initial value. For example: 'for( int i = 0'. Although this is a float/double property, you can still set integer values." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Array Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInputNodeArrayOptionsPropertyGroup = new Group;
   a_oInputNodeArrayOptionsPropertyGroup.Name = "InputNode Array Options";
   a_lPropertySheetNodes.AddRef( a_oInputNodeArrayOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Use Iterator Variable For Array Address",
                              a_sBoolPropertyType,
                              "Uses the iterator variable ( from the connected IteratorNode ) for the array address." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 0",
                              a_sIntPropertyType,
                              "The address to select in the first array in an array. For example: float[*4]. Setting this value to 0 selects the first index* of the array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 1",
                              a_sIntPropertyType,
                              "The address to select in the second array in a multi-dimensional array. For example: float[4][*4]. Setting this value to 0 selects the first index of the second array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 2",
                              a_sIntPropertyType,
                              "The address to select in the third array in a multi-dimensional array. For example: float[4][4][*4]. Setting this value to 0 selects the first index of the third array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 3",
                              a_sIntPropertyType,
                              "The address to select in the fourth array in a multi-dimensional array. For example: float[4][4][4][*4]. Setting this value to 0 selects the first index of the fourth array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 4",
                              a_sIntPropertyType,
                              "The address to select in the fifth array in a multi-dimensional array. For example: float[4][4][4][4][4]. Setting this value to 0 selects the first index of the fifth array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 5",
                              a_sIntPropertyType,
                              "The address to select in the sixth array in a multi-dimensional array. For example: float[4][4][4][4][4][*4]. Setting this value to 0 selects the first index of the sixth array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 6",
                              a_sIntPropertyType,
                              "The address to select in the seventh array in a multi-dimensional array. For example: float[4][4][4][4][4][4][*4]. Setting this value to 0 selects the first index of the seventh array." );

   CreatePropertySheetEntry(  a_oInputNodeArrayOptionsPropertyGroup,
                              "Select Array Address 7",
                              a_sIntPropertyType,
                              "The address to select in the eighth array in a multi-dimensional array. For example: float[4][4][4][4][4][4][4][*4]. Setting this value to 0 selects the first index of the eighth array." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Code Formatting Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInputNodeCodeFormattingPropertyGroup = new Group;
   a_oInputNodeCodeFormattingPropertyGroup.Name = "InputNode Code Formatting";
   a_lPropertySheetNodes.AddRef( a_oInputNodeCodeFormattingPropertyGroup );

   CreatePropertySheetEntry(  a_oInputNodeCodeFormattingPropertyGroup,
                              "Enclose In Parentheses",
                              a_sBoolPropertyType,
                              "Encloses the entire expression inside parentheses. Used to implement order-of-operations inside expressions when required." );

   CreatePropertySheetEntry(  a_oInputNodeCodeFormattingPropertyGroup,
                              "Create Statement Block",
                              a_sBoolPropertyType,
                              "Encloses the entire expression inside braces {}." );

   CreatePropertySheetEntry(  a_oInputNodeCodeFormattingPropertyGroup,
                              "Number of Spaces to Indent",
                              a_sIntPropertyType,
                              "Set the tab depth to this number of spaces." );

   // Begin Insert Newline Enumeration
   Group a_oInsertNewlineEnumeration = new Group;
   a_oInsertNewlineEnumeration.Name = "Insert Newline";
   a_oInputNodeCodeFormattingPropertyGroup.AddChild( a_oInsertNewlineEnumeration );

   CreatePropertySheetEntry(  a_oInsertNewlineEnumeration,
                              "Never",
                              a_sEnumPropertyType,
                              "Never inserts a newline." );

   CreatePropertySheetEntry(  a_oInsertNewlineEnumeration,
                              "Before",
                              a_sEnumPropertyType,
                              "Inserts a newline before this statement." );

   CreatePropertySheetEntry(  a_oInsertNewlineEnumeration,
                              "After",
                              a_sEnumPropertyType,
                              "Inserts a newline after this statement." );

   CreatePropertySheetEntry(  a_oInsertNewlineEnumeration,
                              "Before And After",
                              a_sEnumPropertyType,
                              "Inserts a newline before and after this statement." );

   // End Insert Newline Enumeration

   CreatePropertySheetEntry(  a_oInputNodeCodeFormattingPropertyGroup,
                              "Promote With Shorthand",
                              a_sBoolPropertyType,
                              "Permit promotion expressions such as vec4( 1.0 ) instead of requiring vec4( 1.0, 1.0, 1.0, 1.0 )." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Configuration Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInputNodeConfigurationPropertyGroup = new Group;
   a_oInputNodeConfigurationPropertyGroup.Name = "InputNode Configuration";
   a_lPropertySheetNodes.AddRef( a_oInputNodeConfigurationPropertyGroup );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Generate Code Function",
                              a_sStringPropertyType,
                              "Choose the Scenome Scripting Language function that generates code for this InputNode. This parameter is ignored if <b>Built In Operators<\/b> is active." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Built In Operators",
                              a_sEnumPropertyType,
                              "Choose a built-in function. The application ignores <b>Generate Code Function<\/b> if this parameter is active." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Parameters Are Static",
                              a_sBoolPropertyType,
                              "Sets all child node parameters to static. Choose this option when the InputNode is used to call a function and its child nodes are function parameters." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Expression Dimension",
                              a_sEnumPropertyType,
                              "Sets the dimension of the input. This parameter is fixed if <b>Parameters Are Static<\/b> is true. Otherwise, expressions dynamically set, or inherit, dimensionality." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Child Parameter Count",
                              a_sIntPropertyType,
                              "The number of required child parameters. This must always be set for static expressions, and should often be set for non-static expressions." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input Requires Data Source",
                              a_sBoolPropertyType,
                              "Determines whether or not a Node data source is required." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input Name",
                              a_sStringPropertyType,
                              "The name of the Input used in the command menu when the user right clicks on the InputNode. For example: 'Mix Parameter 1'." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Data Source Type Must Be",
                              a_sStringPropertyType,
                              "The data source node type must match the type name. 'Group' means the data source node must be derived from Group." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input Enabled",
                              a_sBoolPropertyType,
                              "Determines whether or not the input is enabled." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input Is Coercible",
                              a_sBoolPropertyType,
                              "Determines whether or not the input is coercible. For example: if the input is vec4, should the input coerce a data source of type vec3." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input &gt;VariableNode&gt; Binding Must Be",
                              a_sIntPropertyType,
                              "Determines the binding type. -1 is any binding type." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Input Domain",
                              a_sStringPropertyType,
                              "Determines the domain, which must be one of the following: XYZW, RGBA, or STPQ." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "Determines the input data source." );

   CreatePropertySheetEntry(  a_oInputNodeConfigurationPropertyGroup,
                              "Next Parameter",
                              a_sNodePropertyType,
                              "Determines the next InputNode. Typically used to create chains of static parameters in order to validate parameter order." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Matrix Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInputNodeMatrixOptionsPropertyGroup = new Group;
   a_oInputNodeMatrixOptionsPropertyGroup.Name = "InputNode Matrix Options";
   a_lPropertySheetNodes.AddRef( a_oInputNodeMatrixOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oInputNodeMatrixOptionsPropertyGroup,
                              "Select Matrix Column Address",
                              a_sIntPropertyType,
                              "Selects the matrix column at the specified location. For example: you can use this to extract a vec4 or a float from a mat4." );

   CreatePropertySheetEntry(  a_oInputNodeMatrixOptionsPropertyGroup,
                              "Select Matrix Row Address",
                              a_sIntPropertyType,
                              "Selects the matrix row at the specified location. For example: you can use this to extract a vec4 or a float from a mat4." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Type Aggregator Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInputNodeTypeAggregatorOptionsPropertyGroup = new Group;
   a_oInputNodeTypeAggregatorOptionsPropertyGroup.Name = "InputNode Type Aggregator Options";
   a_lPropertySheetNodes.AddRef( a_oInputNodeTypeAggregatorOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oInputNodeTypeAggregatorOptionsPropertyGroup,
                              "Member Selection",
                              a_sStringPropertyType,
                              "A string such as matrices.modelViewProjectionMatrix that reflects a selection from a type aggregator such as struct, uniform block, or interface block." );

   ////////////////////////////////////////////////////////////////////////////
   // InputNode Vector Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oVectorOptionsPropertyGroup = new Group;
   a_oVectorOptionsPropertyGroup.Name = "InputNode Vector Options";
   a_lPropertySheetNodes.AddRef( a_oVectorOptionsPropertyGroup );

   for( int a_iMemberSelection = 0; a_iMemberSelection < 4; ++a_iMemberSelection )
   {
      // Member Selection Enumeration
      Group a_oMemberSelectionEnumeration = new Group;
      a_oMemberSelectionEnumeration.Name = "Member Selection Component " + a_iMemberSelection;
      a_oVectorOptionsPropertyGroup.AddChild( a_oMemberSelectionEnumeration );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "X",
                                 a_sEnumPropertyType,
                                 "Member selects the X component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "Y",
                                 a_sEnumPropertyType,
                                 "Member selects the Y component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "Z",
                                 a_sEnumPropertyType,
                                 "Member selects the W component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "W",
                                 a_sEnumPropertyType,
                                 "Member selects the W component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "R",
                                 a_sEnumPropertyType,
                                 "Member selects the R component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "G",
                                 a_sEnumPropertyType,
                                 "Member selects the G component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "B",
                                 a_sEnumPropertyType,
                                 "Member selects the B component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "A",
                                 a_sEnumPropertyType,
                                 "Member selects the A component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "S",
                                 a_sEnumPropertyType,
                                 "Member selects the S component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "T",
                                 a_sEnumPropertyType,
                                 "Member selects the T component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "P",
                                 a_sEnumPropertyType,
                                 "Member selects the P component." );

      CreatePropertySheetEntry(  a_oMemberSelectionEnumeration,
                                 "Q",
                                 a_sEnumPropertyType,
                                 "Member selects the Q component." );
   }

   for( int a_iVectVectorValueTypeIn = 0; a_iVectVectorValueTypeIn < 4; ++a_iVectVectorValueTypeIn )
   {
      CreatePropertySheetEntry(  a_oVectorOptionsPropertyGroup,
                                 "Vector Value",
                                 a_sFloatPropertyType,
                                 "Allows you to type in a vector value for a vector component. You can do this to override any vector component, or to specify vector values for an input without a data source." );
   }

   ////////////////////////////////////////////////////////////////////////////
   // Integer Array Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oIntegerArrayParametersPropertyGroup = new Group;
   a_oIntegerArrayParametersPropertyGroup.Name = "Integer Array Parameters";
   a_lPropertySheetNodes.AddRef( a_oIntegerArrayParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oIntegerArrayParametersPropertyGroup,
                              "Array Dimension",
                              a_sIntPropertyType,
                              "Sets the dimension of the array. Maximum array size is determined by the OpenGL implementation on the active hardware." );

   CreatePropertySheetEntry(  a_oIntegerArrayParametersPropertyGroup,
                              "Int 0, Int 1, ... Int N",
                              a_sFloatPropertyType,
                              "Sets the integer value for each member of the array." );

   ////////////////////////////////////////////////////////////////////////////
   // Integer Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oIntegerParametersPropertyGroup = new Group;
   a_oIntegerParametersPropertyGroup.Name = "Integer Parameters";
   a_lPropertySheetNodes.AddRef( a_oIntegerParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oIntegerParametersPropertyGroup,
                              "Value",
                              a_sIntPropertyType,
                              "The value of the IntegerNode." );

   ////////////////////////////////////////////////////////////////////////////
   // Internal Link Settings Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oInternalLinkSettingsPropertyGroup = new Group;
   a_oInternalLinkSettingsPropertyGroup.Name = "Internal Link Settings";
   a_lPropertySheetNodes.AddRef( a_oInternalLinkSettingsPropertyGroup );

   CreatePropertySheetEntry(  a_oInternalLinkSettingsPropertyGroup,
                              "Node Type",
                              a_sEnumPropertyType,
                              "The type of node at which the NodeLink points." );

   CreatePropertySheetEntry(  a_oInternalLinkSettingsPropertyGroup,
                              "Point At A Node In This File",
                              a_sNodePropertyType,
                              "The node at which the NodeLink points." );

   ////////////////////////////////////////////////////////////////////////////
   // Iterator Connections Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oIteratorConnectionsPropertyGroup = new Group;
   a_oIteratorConnectionsPropertyGroup.Name = "Iterator Connections";
   a_lPropertySheetNodes.AddRef( a_oIteratorConnectionsPropertyGroup );

   CreatePropertySheetEntry(  a_oIteratorConnectionsPropertyGroup,
                              "Iterator Data Source",
                              a_sNodePropertyType,
                              "Specify an IteratorNode or IntegerNode for an iteration data source." );

   ////////////////////////////////////////////////////////////////////////////
   // Iterator Node Code Formatting Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oIteratorNodeCodeFormattingPropertyGroup = new Group;
   a_oIteratorNodeCodeFormattingPropertyGroup.Name = "IteratorNode Code Formatting";
   a_lPropertySheetNodes.AddRef( a_oIteratorNodeCodeFormattingPropertyGroup );

   CreatePropertySheetEntry(  a_oIteratorNodeCodeFormattingPropertyGroup,
                              "Number of Spaces to Indent",
                              a_sIntPropertyType,
                              "Set the tab depth to this number of spaces." );

   CreatePropertySheetEntry(  a_oIteratorNodeCodeFormattingPropertyGroup,
                              "Insert Newline Before Opening Brace",
                              a_sBoolPropertyType,
                              "Set this parameter to <b>TRUE<\/b> if you want a new line before the opening brace." );

   ////////////////////////////////////////////////////////////////////////////
   // Iterator Node Setup
   ////////////////////////////////////////////////////////////////////////////

   Group a_oIteratorNodeSetupPropertyGroup = new Group;
   a_oIteratorNodeSetupPropertyGroup.Name = "IteratorNode Setup";
   a_lPropertySheetNodes.AddRef( a_oIteratorNodeSetupPropertyGroup );

   // Begin Iterator Type Enumeration
   Group a_oIteratorTypeEnumeration = new Group;
   a_oIteratorTypeEnumeration.Name = "Iterator Type";
   a_oIteratorNodeSetupPropertyGroup.AddChild( a_oIteratorTypeEnumeration );

   CreatePropertySheetEntry(  a_oIteratorTypeEnumeration,
                              "for",
                              a_sEnumPropertyType,
                              "Sets the iterator type to for()." );

   CreatePropertySheetEntry(  a_oIteratorTypeEnumeration,
                              "while",
                              a_sEnumPropertyType,
                              "Sets the iterator type to while()." );

   CreatePropertySheetEntry(  a_oIteratorTypeEnumeration,
                              "do while",
                              a_sEnumPropertyType,
                              "Sets the iterator type to while()." );

   // End Iterator Type Enumeration

   CreatePropertySheetEntry(  a_oIteratorNodeSetupPropertyGroup,
                              "Unroll Loop",
                              a_sBoolPropertyType,
                              "This parameter toggles loop unrolling. This option is available for loops with explicit sizes." );

   CreatePropertySheetEntry(  a_oIteratorNodeSetupPropertyGroup,
                              "Unroll Loop Explicit Iteration Count",
                              a_sIntPropertyType,
                              "This parameter defines how many iterations to unroll. You can implement partial unrolling, but incomplete unrolling may produce undefined results." );

   CreatePropertySheetEntry(  a_oIteratorNodeSetupPropertyGroup,
                              "Unroll Loop Explicit Iteration Count Data Source",
                              a_sIntPropertyType,
                              "A node, such as an IntegerNode ( the IntegerNode value ), or Group node ( child count ), that contains an explicitly defined number of iterations to unroll." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Array Member Properties
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightArrayMemberPropertiesPropertyGroup = new Group;
   a_oLightArrayMemberPropertiesPropertyGroup.Name = "Light Array Member Properties";
   a_lPropertySheetNodes.AddRef( a_oLightArrayMemberPropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oLightArrayMemberPropertiesPropertyGroup,
                              "Name",
                              a_sStringPropertyType,
                              "Sets the name of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPropertiesPropertyGroup,
                              "Class",
                              a_sStringPropertyType,
                              "Sets the class of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPropertiesPropertyGroup,
                              "ID",
                              a_sStringPropertyType,
                              "Sets the ID of the light array member. This must be unique for each member of the array." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPropertiesPropertyGroup,
                              "Export Disabled",
                              a_sBoolPropertyType,
                              "Determines whether or not the Light is exported during an export process, such as to OpenSceneGraph." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Array Member Color
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightArrayMemberColorPropertyGroup = new Group;
   a_oLightArrayMemberColorPropertyGroup.Name = "Light Array Member Color";
   a_lPropertySheetNodes.AddRef( a_oLightArrayMemberColorPropertyGroup );

   CreatePropertySheetEntry(  a_oLightArrayMemberColorPropertyGroup,
                              "Ambient Color",
                              a_sColorPropertyType,
                              "Sets the ambient color of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberColorPropertyGroup,
                              "Diffuse Color",
                              a_sColorPropertyType,
                              "Sets the diffuse color of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberColorPropertyGroup,
                              "Specular Color",
                              a_sColorPropertyType,
                              "Sets the specular color of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberColorPropertyGroup,
                              "Emissive Color",
                              a_sColorPropertyType,
                              "Sets the emissive color of the light array member." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Array Member Transformation
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightArrayMemberTransformationPropertyGroup = new Group;
   a_oLightArrayMemberTransformationPropertyGroup.Name = "Light Array Member Transformation";
   a_lPropertySheetNodes.AddRef( a_oLightArrayMemberTransformationPropertyGroup );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Position X",
                              a_sFloatPropertyType,
                              "Sets the X axis position of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Position Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis position of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Position Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis position of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Orientation X",
                              a_sFloatPropertyType,
                              "Sets the X axis orientation of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Orientation Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis orientation of the light array member." );

   CreatePropertySheetEntry(  a_oLightArrayMemberTransformationPropertyGroup,
                              "Orientation Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis orientation of the light array member." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Array Member Physics
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightArrayMemberPhysicsPropertyGroup = new Group;
   a_oLightArrayMemberPhysicsPropertyGroup.Name = "Light Array Member Physics";
   a_lPropertySheetNodes.AddRef( a_oLightArrayMemberPhysicsPropertyGroup );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Intensity",
                              a_sFloatPropertyType,
                              "Sets the intensity of the light array member. Range is between <b>-100<\/b> to <b>100<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Constant Attenuation",
                              a_sFloatPropertyType,
                              "Sets the base attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Linear Attenuation",
                              a_sFloatPropertyType,
                              "Sets the linear attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Quadratic Attenuation",
                              a_sFloatPropertyType,
                              "Sets the quadratic attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Spot Exponent",
                              a_sFloatPropertyType,
                              "Sets the spot exponent. Range is between <b>0.00001<\/b> and <b>1000<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Aperture X",
                              a_sFloatPropertyType,
                              "Sets the X-axis aperture for the Light. Range is between <b>0<\/b> and <b>180<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Aperture Y",
                              a_sFloatPropertyType,
                              "Sets the Y-axis aperture for the Light. Range is between <b>0<\/b> and <b>180<\/b>." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Shadow Map Near Z",
                              a_sFloatPropertyType,
                              "Sets the near z clipping value for the Light." );

   CreatePropertySheetEntry(  a_oLightArrayMemberPhysicsPropertyGroup,
                              "Shadow Map Far Z",
                              a_sFloatPropertyType,
                              "Sets the far z clipping value for the Light." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Array Member Flags
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightArrayMemberFlagsPropertyGroup = new Group;
   a_oLightArrayMemberFlagsPropertyGroup.Name = "Light Array Member Flags";
   a_lPropertySheetNodes.AddRef( a_oLightArrayMemberFlagsPropertyGroup );

   CreatePropertySheetEntry(  a_oLightArrayMemberFlagsPropertyGroup,
                              "Local",
                              a_sBoolPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oLightArrayMemberFlagsPropertyGroup,
                              "On",
                              a_sBoolPropertyType,
                              "This option turns the light array member on/off like a light switch." );

   CreatePropertySheetEntry(  a_oLightArrayMemberFlagsPropertyGroup,
                              "Global",
                              a_sBoolPropertyType,
                              "This option determines if the light array member is global, which means that it affects all geometry regardless of its location in the scene." );

   CreatePropertySheetEntry(  a_oLightArrayMemberFlagsPropertyGroup,
                              "Shadows",
                              a_sBoolPropertyType,
                              "This option determines if the light array member casts shadows." );

   CreatePropertySheetEntry(  a_oLightArrayMemberFlagsPropertyGroup,
                              "Dynamic",
                              a_sBoolPropertyType,
                              "This option determines if the light array member is dynamic. In Scenome applications, all Lights are dynamic regardless, but this flag may be important for runtime applications." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Boolean Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightBooleanModesPropertyGroup = new Group;
   a_oLightBooleanModesPropertyGroup.Name = "Light Boolean Modes";
   a_lPropertySheetNodes.AddRef( a_oLightBooleanModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightBooleanModesEnumeration = new Group;
   a_oLightBooleanModesEnumeration.Name = "Mode";
   a_oLightBooleanModesPropertyGroup.AddChild( a_oLightBooleanModesEnumeration );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to none." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Flag On",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source's <b>On<\/b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Flag Global",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source's <b>Global<\/b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Flag Shadows",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source's <b>Shadow<\/b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Flag Dynamic",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source's <b>Dynamic<\/b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Is Type Infinite",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source is an infinite light ( like the sun )." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Is Type Point",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source is a point light." );

   CreatePropertySheetEntry(  a_oLightBooleanModesEnumeration,
                              "Light Is Type Spot",
                              a_sEnumPropertyType,
                              "Sets the mode to compute whether or not the Light data source is a spotlight." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Camera State
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightCameraStatePropertyGroup = new Group;
   a_oLightCameraStatePropertyGroup.Name = "Light Camera State";
   a_lPropertySheetNodes.AddRef( a_oLightCameraStatePropertyGroup );

   CreatePropertySheetEntry(  a_oLightCameraStatePropertyGroup,
                              "Data Source",
                              a_sNodePropertyType,
                              "The Light from which you wish to read 'camera state' information. You might use this to set up a Camera that uses the Light's 'view' for shadow mapping." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Color
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightColorPropertyGroup = new Group;
   a_oLightColorPropertyGroup.Name = "Light Color";
   a_lPropertySheetNodes.AddRef( a_oLightColorPropertyGroup );

   CreatePropertySheetEntry(  a_oLightColorPropertyGroup,
                              "Ambient Color",
                              a_sColorPropertyType,
                              "Sets the ambient color of the light array member." );

   CreatePropertySheetEntry(  a_oLightColorPropertyGroup,
                              "Diffuse Color",
                              a_sColorPropertyType,
                              "Sets the diffuse color of the light array member." );

   CreatePropertySheetEntry(  a_oLightColorPropertyGroup,
                              "Specular Color",
                              a_sColorPropertyType,
                              "Sets the specular color of the light array member." );

   CreatePropertySheetEntry(  a_oLightColorPropertyGroup,
                              "Emissive Color",
                              a_sColorPropertyType,
                              "Sets the emissive color of the light array member." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Color Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightColorModesPropertyGroup = new Group;
   a_oLightColorModesPropertyGroup.Name = "Light Color Modes";
   a_lPropertySheetNodes.AddRef( a_oLightColorModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightColorModesEnumeration = new Group;
   a_oLightColorModesEnumeration.Name = "Mode";
   a_oLightColorModesPropertyGroup.AddChild( a_oLightColorModesEnumeration );

   CreatePropertySheetEntry(  a_oLightColorModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oLightColorModesEnumeration,
                              "Ambient Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's ambient color." );

   CreatePropertySheetEntry(  a_oLightColorModesEnumeration,
                              "Diffuse Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's diffuse color." );

   CreatePropertySheetEntry(  a_oLightColorModesEnumeration,
                              "Specular Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's specular color." );

   CreatePropertySheetEntry(  a_oLightColorModesEnumeration,
                              "Emissive Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's emissive color." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Count Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightCountModesPropertyGroup = new Group;
   a_oLightCountModesPropertyGroup.Name = "Light Count Modes";
   a_lPropertySheetNodes.AddRef( a_oLightCountModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightCountModesEnumeration = new Group;
   a_oLightCountModesEnumeration.Name = "Mode";
   a_oLightCountModesPropertyGroup.AddChild( a_oLightCountModesEnumeration );

   CreatePropertySheetEntry(  a_oLightCountModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oLightCountModesEnumeration,
                              "Active Light Count",
                              a_sEnumPropertyType,
                              "Sets the mode to the light count of the LightStackNode data source." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Float Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightFloatModesPropertyGroup = new Group;
   a_oLightFloatModesPropertyGroup.Name = "Light Float Modes";
   a_lPropertySheetNodes.AddRef( a_oLightFloatModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightFloatModesEnumeration = new Group;
   a_oLightFloatModesEnumeration.Name = "Mode";
   a_oLightFloatModesPropertyGroup.AddChild( a_oLightFloatModesEnumeration );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "SpotExponent",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's spot exponent." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "SpotCutoff",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's spot cutoff angle." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "SpotCosCutoff",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the cosine of the Light data source's spot cutoff angle." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "ConstantAttenuation",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's constant attenuation." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "LinearAttenutation",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's linear attenuation." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "QuadraticAttenutation",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's quadratic attenuation." );

   CreatePropertySheetEntry(  a_oLightFloatModesEnumeration,
                              "Intensity",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Light data source's intensity." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Integer Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightIntegerModesPropertyGroup = new Group;
   a_oLightIntegerModesPropertyGroup.Name = "Light Integer Modes";
   a_lPropertySheetNodes.AddRef( a_oLightIntegerModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightIntegerModesEnumeration = new Group;
   a_oLightIntegerModesEnumeration.Name = "Mode";
   a_oLightIntegerModesPropertyGroup.AddChild( a_oLightIntegerModesEnumeration );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to none." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Flag On",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source's <b>On<\b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Flag Global",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source's <b>Global<\b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Flag Shadows",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source's <b>Shadow<\b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Flag Dynamic",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source's <b>Dynamic<\b> flag is <b>True<\/b> or <b>False<\/b>." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Is Type Infinite",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source is an infinite light ( like the sun )." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Is Type Point",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source is a point light." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Is Type Spot",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing whether or not the Light data source is a spotlight." );

   CreatePropertySheetEntry(  a_oLightIntegerModesEnumeration,
                              "Light Type",
                              a_sEnumPropertyType,
                              "Sets the mode to compute an integer representing the Light's type. 0 = infinite, 1 = point, 2 = spot." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Matrix Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightMatrixModesPropertyGroup = new Group;
   a_oLightMatrixModesPropertyGroup.Name = "Light Matrix Modes";
   a_lPropertySheetNodes.AddRef( a_oLightMatrixModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightMatrixModesEnumeration = new Group;
   a_oLightMatrixModesEnumeration.Name = "Mode";
   a_oLightMatrixModesPropertyGroup.AddChild( a_oLightMatrixModesEnumeration );

   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "None", a_sEnumPropertyType, "Sets the mode to compute nothing at all." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightModelViewCamera", a_sEnumPropertyType, "Computes the ModelViewCamera matrix from the Light's point of view." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightModelView", a_sEnumPropertyType, "Computes the ModelView matrix from the Light's point of view." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightProjectionCamera", a_sEnumPropertyType, "Computes the ProjectionCamera matrix from the Light's point of view." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightProjection", a_sEnumPropertyType, "Computes the Projection matrix from the Light's point of view." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightProjectionInverse", a_sEnumPropertyType, "Computes the Projection matrix from the Light's point of view and then inverts it." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightView", a_sEnumPropertyType, "Computes the View matrix from the Light's point of view." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightViewLocal", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry( a_oLightMatrixModesEnumeration, "LightLocal", a_sEnumPropertyType, "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Stack Parameters
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightStackParametersPropertyGroup = new Group;
   a_oLightStackParametersPropertyGroup.Name = "Light Stack Parameters";
   a_lPropertySheetNodes.AddRef( a_oLightStackParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oLightStackParametersPropertyGroup,
                              "Light Structure",
                              a_sNodePropertyType,
                              "This property should be linked to a TypeAggregatorNode of type <b>Struct<\/b>. This struct should contain variable nodes that extract Light parameters." );

   CreatePropertySheetEntry(  a_oLightStackParametersPropertyGroup,
                              "Enumerate Active Light Count",
                              a_sEnumPropertyType,
                              "This property enumerates the active Light count. You cannot set this property." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Transformation
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightTransformationPropertyGroup = new Group;
   a_oLightTransformationPropertyGroup.Name = "Light Transformation";
   a_lPropertySheetNodes.AddRef( a_oLightTransformationPropertyGroup );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Position X",
                              a_sFloatPropertyType,
                              "Sets the X axis position of the Light." );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Position Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis position of the Light." );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Position Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis position of the Light." );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Orientation X",
                              a_sFloatPropertyType,
                              "Sets the X axis orientation of the Light." );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Orientation Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis orientation of the Light." );

   CreatePropertySheetEntry(  a_oLightTransformationPropertyGroup,
                              "Orientation Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis orientation of the Light." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Physics
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightPhysicsPropertyGroup = new Group;
   a_oLightPhysicsPropertyGroup.Name = "Light Physics";
   a_lPropertySheetNodes.AddRef( a_oLightPhysicsPropertyGroup );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Intensity",
                              a_sFloatPropertyType,
                              "Sets the intensity of the light array member. Range is between <b>-100<\/b> to <b>100<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Constant Attenuation",
                              a_sFloatPropertyType,
                              "Sets the base attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Linear Attenuation",
                              a_sFloatPropertyType,
                              "Sets the linear attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Quadratic Attenuation",
                              a_sFloatPropertyType,
                              "Sets the quadratic attenuation for the light array member. Range is between <b>0.00001<\/b> and <b>10000000000<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Spot Exponent",
                              a_sFloatPropertyType,
                              "Sets the spot exponent. Range is between <b>0.00001<\/b> and <b>1000<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Aperture X",
                              a_sFloatPropertyType,
                              "Sets the X-axis aperture for the Light. Range is between <b>0<\/b> and <b>180<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Aperture Y",
                              a_sFloatPropertyType,
                              "Sets the Y-axis aperture for the Light. Range is between <b>0<\/b> and <b>180<\/b>." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Shadow Map Near Z",
                              a_sFloatPropertyType,
                              "Sets the near z clipping value for the Light." );

   CreatePropertySheetEntry(  a_oLightPhysicsPropertyGroup,
                              "Shadow Map Far Z",
                              a_sFloatPropertyType,
                              "Sets the far z clipping value for the Light." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Flags
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightFlagsPropertyGroup = new Group;
   a_oLightFlagsPropertyGroup.Name = "Light Flags";
   a_lPropertySheetNodes.AddRef( a_oLightFlagsPropertyGroup );

   CreatePropertySheetEntry(  a_oLightFlagsPropertyGroup,
                              "Local",
                              a_sBoolPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oLightFlagsPropertyGroup,
                              "On",
                              a_sBoolPropertyType,
                              "This option turns the Light on/off like a light switch." );

   CreatePropertySheetEntry(  a_oLightFlagsPropertyGroup,
                              "Global",
                              a_sBoolPropertyType,
                              "This option determines if the Light is global, which means that it affects all geometry regardless of its location in the scene." );

   CreatePropertySheetEntry(  a_oLightFlagsPropertyGroup,
                              "Shadows",
                              a_sBoolPropertyType,
                              "This option determines if the Light casts shadows." );

   CreatePropertySheetEntry(  a_oLightFlagsPropertyGroup,
                              "Dynamic",
                              a_sBoolPropertyType,
                              "This option determines if the Light is dynamic. In Scenome applications, all Lights are dynamic regardless, but this flag may be important for runtime applications." );

   ////////////////////////////////////////////////////////////////////////////
   // Light Vector Modes Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLightVectorModesPropertyGroup = new Group;
   a_oLightVectorModesPropertyGroup.Name = "Light Vector Modes";
   a_lPropertySheetNodes.AddRef( a_oLightVectorModesPropertyGroup );

   // Begin Mode Enum
   Group a_oLightVectorModesEnumeration = new Group;
   a_oLightVectorModesEnumeration.Name = "Mode";
   a_oLightVectorModesPropertyGroup.AddChild( a_oLightVectorModesEnumeration );

   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "None", a_sEnumPropertyType, "Sets the mode to compute nothing at all." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Near/Far Clip", a_sEnumPropertyType, "Computes the Light data source's near and far clip planes and stores the results in a vec2." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Position", a_sEnumPropertyType, "Computes the Light data source's position and stores the results in a vec4." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Direction", a_sEnumPropertyType, "Computes Light data source's direction and stores the results in a vec4." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light X Axis", a_sEnumPropertyType, "Computes the X component of the Light's transformation matrix." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Y Axis", a_sEnumPropertyType, "Computes the Y component of the Light's transformation matrix." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Z Axis", a_sEnumPropertyType, "Computes the Z component of the Light's transformation matrix." );
   CreatePropertySheetEntry( a_oLightVectorModesEnumeration, "Light Location", a_sEnumPropertyType, "Computes the W component of the Light's transformation matrix." );

   ////////////////////////////////////////////////////////////////////////////
   // Loft Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLoftPropertiesPropertyGroup = new Group;
   a_oLoftPropertiesPropertyGroup.Name = "Loft Properties";
   a_lPropertySheetNodes.AddRef( a_oLoftPropertiesPropertyGroup );

   // Begin Flow Texture Width Enum
   Group a_oLoftFlowTextureWidthEnumeration = new Group;
   a_oLoftFlowTextureWidthEnumeration.Name = "Flow Texture Width";
   a_oLoftPropertiesPropertyGroup.AddChild( a_oLoftFlowTextureWidthEnumeration );

   CreatePropertySheetEntry(  a_oLoftFlowTextureWidthEnumeration, "Along Outline", a_sEnumPropertyType, "Flows the texture width along the curve." );
   CreatePropertySheetEntry(  a_oLoftFlowTextureWidthEnumeration, "Along Sweep", a_sEnumPropertyType, "Flows the texture width perpendicular to the curve." );

   // End Flow Texture Width Enum

   CreatePropertySheetEntry(  a_oLoftPropertiesPropertyGroup,
                              "Default Material",
                              a_sNodePropertyType,
                              "DEPRECATED. Use per-curve-segment Materials instead." );

   CreatePropertySheetEntry(  a_oLoftPropertiesPropertyGroup,
                              "Cross Section Texture Start",
                              a_sFloatPropertyType,
                              "For tiling between cross-sections, this is the tiling origin relative to texture coordinates. 0 is typical." );

   CreatePropertySheetEntry(  a_oLoftPropertiesPropertyGroup,
                              "Cross Section Texture End",
                              a_sFloatPropertyType,
                              "For tiling between cross-sections, this is the tiling origin relative to texture coordinates. 1 is typical." );

   CreatePropertySheetEntry(  a_oLoftPropertiesPropertyGroup,
                              "Cross Section Curve Group",
                              a_sNodePropertyType,
                              "A Group containing the set of curves you wish to loft." );

   ////////////////////////////////////////////////////////////////////////////
   // Loop Expression Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oLoopExpressionPropertyGroup = new Group;
   a_oLoopExpressionPropertyGroup.Name = "Loop Expression";
   a_lPropertySheetNodes.AddRef( a_oLoopExpressionPropertyGroup );

   // Begin Condition Expression Type Enum
   Group a_oLoopExpressionIncrementDecrementEnumeration = new Group;
   a_oLoopExpressionIncrementDecrementEnumeration.Name = "Loop Increment / Decrement";
   a_oLoopExpressionPropertyGroup.AddChild( a_oLoopExpressionIncrementDecrementEnumeration );

   CreatePropertySheetEntry(  a_oLoopExpressionIncrementDecrementEnumeration,
                              "++",
                              a_sEnumPropertyType,
                              "Sets loop expression to prefix increment." );

   CreatePropertySheetEntry(  a_oLoopExpressionIncrementDecrementEnumeration,
                              "--",
                              a_sEnumPropertyType,
                              "Sets loop expression to prefix decrement." );

   CreatePropertySheetEntry(  a_oLoopExpressionIncrementDecrementEnumeration,
                              "+=",
                              a_sEnumPropertyType,
                              "Sets loop expression increment to add into." );

   CreatePropertySheetEntry(  a_oLoopExpressionIncrementDecrementEnumeration,
                              "-=",
                              a_sEnumPropertyType,
                              "Sets loop expression decrement to subtract into." );

   ////////////////////////////////////////////////////////////////////////////
   // Material Physics Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMaterialPhysicsPropertyGroup = new Group;
   a_oMaterialPhysicsPropertyGroup.Name = "Material Physics";
   a_lPropertySheetNodes.AddRef( a_oMaterialPhysicsPropertyGroup );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Solid Render",
                              a_sBoolPropertyType,
                              "Determines whether or not the Material is rendered as a solid color or with texturing. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Ambient Color",
                              a_sColorPropertyType,
                              "Sets the Material's ambient color. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Diffuse Color",
                              a_sColorPropertyType,
                              "Sets the Material's diffuse color. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Specular Color",
                              a_sColorPropertyType,
                              "Sets the Material's specular color. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Emissive Color",
                              a_sColorPropertyType,
                              "Sets the Material's emissive color. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Shininess",
                              a_sFloatPropertyType,
                              "Sets the Material's shininess. This option must be implemented per-shader." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Identification Color",
                              a_sColorPropertyType,
                              "Sets the Material's identification color. This color is used to implement per-segment colors for curves and to render Material wireframes." );

   CreatePropertySheetEntry(  a_oMaterialPhysicsPropertyGroup,
                              "Feature Identification Integer",
                              a_sIntPropertyType,
                              "Sets the Material's feature identification integer. Range is 0-65536. This can be used to identify a Material, such as for deferred shading, or to select polygon faces by Feature ID." );

   ////////////////////////////////////////////////////////////////////////////
   // Material Color Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMaterialColorModesPropertyGroup = new Group;
   a_oMaterialColorModesPropertyGroup.Name = "Material Color Modes";
   a_lPropertySheetNodes.AddRef( a_oMaterialColorModesPropertyGroup );

   // Begin Mode Enum
   Group a_oMaterialColorModesEnumeration = new Group;
   a_oMaterialColorModesEnumeration.Name = "Mode";
   a_oMaterialColorModesPropertyGroup.AddChild( a_oMaterialColorModesEnumeration );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "Material Ambient Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's ambient color." );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "Material Diffuse Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's diffuse color." );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "Material Specular Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's specular color." );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "Material Emissive Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's emissive color." );

   CreatePropertySheetEntry(  a_oMaterialColorModesEnumeration,
                              "Material Identification Color",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's identification color." );

   ////////////////////////////////////////////////////////////////////////////
   // Material Integer Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMaterialIntegerModesPropertyGroup = new Group;
   a_oMaterialIntegerModesPropertyGroup.Name = "Material Integer Modes";
   a_lPropertySheetNodes.AddRef( a_oMaterialIntegerModesPropertyGroup );

   // Begin Mode Enum
   Group a_oMaterialIntegerModesEnumeration = new Group;
   a_oMaterialIntegerModesEnumeration.Name = "Mode";
   a_oMaterialIntegerModesPropertyGroup.AddChild( a_oMaterialIntegerModesEnumeration );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Identification Integer",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's identification integer." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Transparency State",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's transparency state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Image Writes Enabled",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>Image Writes Enabled<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Is Two Sided",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>Material Is Two Sided<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Hidden Surface Removal: Writes Enabled",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>HSR Writes Enabled<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Hidden Surface Removal: Tests Enabled",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>HSR Tests Enabled<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Clamp S",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>Clamp S<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Material Clamp T",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>Clamp T<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Alpha Test Function",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's <b>Alpha Test Function<\/b> state." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Wireframe",
                              a_sEnumPropertyType,
                              "This option is reserved for future use." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Filled",
                              a_sEnumPropertyType,
                              "This option is reserved for future use." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Solid",
                              a_sEnumPropertyType,
                              "This option is reserved for future use." );

   CreatePropertySheetEntry(  a_oMaterialIntegerModesEnumeration,
                              "Textured",
                              a_sEnumPropertyType,
                              "This option is reserved for future use." );

   ////////////////////////////////////////////////////////////////////////////
   // Material Float Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMaterialFloatModesPropertyGroup = new Group;
   a_oMaterialFloatModesPropertyGroup.Name = "Material Float Modes";
   a_lPropertySheetNodes.AddRef( a_oMaterialFloatModesPropertyGroup );

   // Begin Mode Enum
   Group a_oMaterialFloatModesEnumeration = new Group;
   a_oMaterialFloatModesEnumeration.Name = "Mode";
   a_oMaterialFloatModesPropertyGroup.AddChild( a_oMaterialFloatModesEnumeration );

   CreatePropertySheetEntry(  a_oMaterialFloatModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oMaterialFloatModesEnumeration,
                              "Material Opacity",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's opacity and stores it in a float." );

   CreatePropertySheetEntry(  a_oMaterialFloatModesEnumeration,
                              "Material Shininess",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the Material data source's opacity and stores it in a float." );

   ////////////////////////////////////////////////////////////////////////////
   // MaterialModifier Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMaterialModifierOptionsPropertyGroup = new Group;
   a_oMaterialModifierOptionsPropertyGroup.Name = "MaterialModifier Options";
   a_lPropertySheetNodes.AddRef( a_oMaterialModifierOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oMaterialModifierOptionsPropertyGroup, "Apply This Material", a_sNodePropertyType, "Specifies the Material applied by this modifier." );

   ////////////////////////////////////////////////////////////////////////////
   // Mesh Material Palette Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMeshMaterialPalettePropertyGroup = new Group;
   a_oMeshMaterialPalettePropertyGroup.Name = "Mesh Material Palette";
   a_lPropertySheetNodes.AddRef( a_oMeshMaterialPalettePropertyGroup );

   CreatePropertySheetEntry(  a_oMeshMaterialPalettePropertyGroup, "Group of Material Nodes", a_sNodePropertyType, "Specifies the Group containing Materials used by the Mesh." );

   ////////////////////////////////////////////////////////////////////////////
   // Matrix Dimensions Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMatrixDimensionsPropertyGroup = new Group;
   a_oMatrixDimensionsPropertyGroup.Name = "Matrix Dimensions";
   a_lPropertySheetNodes.AddRef( a_oMatrixDimensionsPropertyGroup );

   CreatePropertySheetEntry(  a_oMatrixDimensionsPropertyGroup, "Rows", a_sIntPropertyType, "Sets the number of rows in the matrix. Range is <b>1<\/b> to <b>4<\/b>." );
   CreatePropertySheetEntry(  a_oMatrixDimensionsPropertyGroup, "Columns", a_sIntPropertyType, "Sets the number of columns in the matrix. Range is <b>1<\/b> to <b>4<\/b>." );

   ////////////////////////////////////////////////////////////////////////////
   // Matrix Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMatrixParametersPropertyGroup = new Group;
   a_oMatrixParametersPropertyGroup.Name = "Matrix Parameters";
   a_lPropertySheetNodes.AddRef( a_oMatrixParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oMatrixParametersPropertyGroup,
                              "Matrix Index 1,1, Matrix Index 1,2, Matrix Index 1,3 ...",
                              a_sFloatPropertyType,
                              "Allows you to view and specify matrix values. Value display is column-major." );

   ////////////////////////////////////////////////////////////////////////////
   // Merge Source Mesh Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMergeSourceMeshOptionsPropertyGroup = new Group;
   a_oMergeSourceMeshOptionsPropertyGroup.Name = "Merge Source Mesh Options";
   a_lPropertySheetNodes.AddRef( a_oMergeSourceMeshOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oMergeSourceMeshOptionsPropertyGroup,
                              "Merge This Source Mesh",
                              a_sNodePropertyType,
                              "Allows you specify the Mesh to be merged." );

   ////////////////////////////////////////////////////////////////////////////
   // Mesh Collisions Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMeshCollisionsPropertyGroup = new Group;
   a_oMeshCollisionsPropertyGroup.Name = "Mesh Collisions";
   a_lPropertySheetNodes.AddRef( a_oMeshCollisionsPropertyGroup );

   // Begin Collisons Enumeration
   Group a_oCollisionsEnumeration = new Group;
   a_oCollisionsEnumeration.Name = "Collisions";
   a_oMeshCollisionsPropertyGroup.AddChild( a_oCollisionsEnumeration );
   
   string a_sCollisionModeDocumentation = "Sets collision mode 1, which could correspond to a particular collision detection " +
                                          "mode such as per-face or bounding box. This option has no effect inside Scenome " +
                                          "applications, but is very useful in runtime environments.";

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "1",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "2",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "3",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "4",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "5",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "6",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "7",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );

   CreatePropertySheetEntry(  a_oCollisionsEnumeration,
                              "8",
                              a_sEnumPropertyType,
                              a_sCollisionModeDocumentation );


   ////////////////////////////////////////////////////////////////////////////
   // Mesh Guides Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMeshGuidesPropertyGroup = new Group;
   a_oMeshGuidesPropertyGroup.Name = "Mesh Guides";
   a_lPropertySheetNodes.AddRef( a_oMeshGuidesPropertyGroup );

   CreatePropertySheetEntry(  a_oMeshGuidesPropertyGroup,
                              "Vertices",
                              a_sBoolPropertyType,
                              "Toggles this Mesh's vertex display." );

   CreatePropertySheetEntry(  a_oMeshGuidesPropertyGroup,
                              "Vertex Normals",
                              a_sBoolPropertyType,
                              "Toggles this Mesh's vertex normal display." );

   CreatePropertySheetEntry(  a_oMeshGuidesPropertyGroup,
                              "Face Normals",
                              a_sBoolPropertyType,
                              "Toggles this Mesh's face normal display." );

   CreatePropertySheetEntry(  a_oMeshGuidesPropertyGroup,
                              "Edges",
                              a_sBoolPropertyType,
                              "Toggles this Mesh's edge display." );

   CreatePropertySheetEntry(  a_oMeshGuidesPropertyGroup,
                              "Hidden Edges",
                              a_sBoolPropertyType,
                              "Toggles this Mesh's hidden edge display." );

   ////////////////////////////////////////////////////////////////////////////
   // Mesh On Render Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMeshOnRenderPropertyGroup = new Group;
   a_oMeshOnRenderPropertyGroup.Name = "Mesh On Render";
   a_lPropertySheetNodes.AddRef( a_oMeshOnRenderPropertyGroup );

   CreatePropertySheetEntry(  a_oMeshOnRenderPropertyGroup,
                              "On Render Data Source",
                              a_sNodePropertyType,
                              "A Group or renderable node that you wish to render when the Mesh renders." );

   ////////////////////////////////////////////////////////////////////////////
   // Mesh Vertex Attribute Channels Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oMeshVertexAttributeChannelsPropertyGroup = new Group;
   a_oMeshVertexAttributeChannelsPropertyGroup.Name = "Mesh Vertex Attribute Channels";
   a_lPropertySheetNodes.AddRef( a_oMeshVertexAttributeChannelsPropertyGroup );

   // Begin Type Enumeration
   Group a_oTypeEnumeration = new Group;
   a_oTypeEnumeration.Name = "Type";
   a_oMeshVertexAttributeChannelsPropertyGroup.AddChild( a_oTypeEnumeration );

   CreatePropertySheetEntry(  a_oTypeEnumeration,
                              "Position",
                              a_sEnumPropertyType,
                              "Sets the attribute channel to vertex position. This is derived from AddChannelModifiers in the mesh construction history." );

   CreatePropertySheetEntry(  a_oTypeEnumeration,
                              "Normal",
                              a_sEnumPropertyType,
                              "Sets the attribute channel to store vertex normal. This is derived from AddChannelModifiers in the mesh construction history." );

   CreatePropertySheetEntry(  a_oTypeEnumeration,
                              "Color",
                              a_sEnumPropertyType,
                              "Sets the attribute channel to store vertex color. This is derived from AddChannelModifiers in the mesh construction history." );

   CreatePropertySheetEntry(  a_oTypeEnumeration,
                              "Texture Coordinates",
                              a_sEnumPropertyType,
                              "Sets the attribute channel to store vertex texture coordinates. This is derived from AddChannelModifiers in the mesh construction history." );

   CreatePropertySheetEntry(  a_oTypeEnumeration,
                              "Integer Data",
                              a_sEnumPropertyType,
                              "Sets the attribute channel to store integer data. This is derived from AddChannelModifiers in the mesh construction history." );

   // End Type Enumeration

   CreatePropertySheetEntry(  a_oMeshVertexAttributeChannelsPropertyGroup,
                              "Dimension",
                              a_sIntPropertyType,
                              "The dimension of the attribute channel. This is derived from AddChannelModifiers in the mesh construction history." );

   ////////////////////////////////////////////////////////////////////////////
   // Modifier Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oModifierPropertyGroup = new Group;
   a_oModifierPropertyGroup.Name = "Modifier";
   a_lPropertySheetNodes.AddRef( a_oModifierPropertyGroup );

   CreatePropertySheetEntry(  a_oModifierPropertyGroup,
                              "Enable",
                              a_sBoolPropertyType,
                              "Determines whether or not this modifier is enabled." );

   ////////////////////////////////////////////////////////////////////////////
   // Name Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oNamePropertyGroup = new Group;
   a_oNamePropertyGroup.Name = "Name";
   a_lPropertySheetNodes.AddRef( a_oNamePropertyGroup );

   string a_sNamePropertyDocumentation = "Sets the name of the node. Do not use \/ or \\ [forward slash and backslash] " +
                                         "in the node name as this produces conflicts with resolving link nodes that " +
                                         "reference external files.";

   CreatePropertySheetEntry(  a_oNamePropertyGroup,
                              "Name",
                              a_sStringPropertyType,
                              a_sNamePropertyDocumentation );

   CreatePropertySheetEntry(  a_oNamePropertyGroup,
                              "Class",
                              a_sStringPropertyType,
                              "Sets the class of the node." );

   CreatePropertySheetEntry(  a_oNamePropertyGroup,
                              "ID",
                              a_sStringPropertyType,
                              "Sets the ID of the node. This must be unique for each document, but different documents can use the same ID." );

   CreatePropertySheetEntry(  a_oNamePropertyGroup,
                              "Export Disabled",
                              a_sBoolPropertyType,
                              "Determines whether or not the node is exported during an export process, such as to OpenSceneGraph." );

   ////////////////////////////////////////////////////////////////////////////
   // Path Material Palette Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oPathMaterialPalettePropertyGroup = new Group;
   a_oPathMaterialPalettePropertyGroup.Name = "Path Material Palette";
   a_lPropertySheetNodes.AddRef( a_oPathMaterialPalettePropertyGroup );

   CreatePropertySheetEntry(  a_oPathMaterialPalettePropertyGroup, "Group of Material Nodes", a_sNodePropertyType, "Specifies the Group containing Material nodes used by the path." );

   ////////////////////////////////////////////////////////////////////////////
   // Planar Project Texture Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oPlanarProjectTexturePropertyGroup = new Group;
   a_oPlanarProjectTexturePropertyGroup.Name = "Planar Project Texture";
   a_lPropertySheetNodes.AddRef( a_oPlanarProjectTexturePropertyGroup );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Origin X",
                              a_sFloatPropertyType,
                              "Sets the X axis origin of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Origin Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis origin of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Origin Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis origin of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Width Axis X",
                              a_sFloatPropertyType,
                              "Sets the X axis width of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Width Axis Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis width of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Width Axis Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis width of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Height Axis X",
                              a_sFloatPropertyType,
                              "Sets the X axis height of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Height Axis Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis height of the projection in world coordinates." );

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Height Axis Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis height of the projection in world coordinates." );

   string a_sMaterialFilterDocumentation =   "Sets the Material filter. When a Material filter is active, the PlanarProjectTexture " +
                                             "modifies texture coordinates for all faces in the Mesh using the Material specified " +
                                             "by this parameter. Faces using other Materials are unaffected. If no Material is specified, " +
                                             " the modifier affects all faces regardless of Material.";

   CreatePropertySheetEntry(  a_oPlanarProjectTexturePropertyGroup,
                              "Material Filter",
                              a_sFloatPropertyType,
                              a_sMaterialFilterDocumentation );

   ////////////////////////////////////////////////////////////////////////////
   // Point Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oPointPropertyGroup = new Group;
   a_oPointPropertyGroup.Name = "Point";
   a_lPropertySheetNodes.AddRef( a_oPointPropertyGroup );

   CreatePropertySheetEntry(  a_oPointPropertyGroup, "Position X", a_sFloatPropertyType, "The X axis position of the point." );
   CreatePropertySheetEntry(  a_oPointPropertyGroup, "Position Y", a_sFloatPropertyType, "The Y axis position of the point." );
   CreatePropertySheetEntry(  a_oPointPropertyGroup, "Position Z", a_sFloatPropertyType, "The Z axis position of the point." );

   ////////////////////////////////////////////////////////////////////////////
   // Program Source Code Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oProgramSourceCodePropertyGroup = new Group;
   a_oProgramSourceCodePropertyGroup.Name = "Program Source Code";
   a_lPropertySheetNodes.AddRef( a_oProgramSourceCodePropertyGroup );

   CreatePropertySheetEntry(  a_oProgramSourceCodePropertyGroup, "Vertex Program File", a_sFilePathPropertyType, "The absolute or relative path to the vertex shader source code." );
   CreatePropertySheetEntry(  a_oProgramSourceCodePropertyGroup, "Tessellation Control Program File", a_sFilePathPropertyType, "The absolute or relative path to the tessellation control shader source code." );
   CreatePropertySheetEntry(  a_oProgramSourceCodePropertyGroup, "Tessellation Evaluation Program File", a_sFilePathPropertyType, "The absolute or relative path to the tessellation evaluation shader source code." );
   CreatePropertySheetEntry(  a_oProgramSourceCodePropertyGroup, "Geometry Program File", a_sFilePathPropertyType, "The absolute or relative path to the geometry shader source code." );
   CreatePropertySheetEntry(  a_oProgramSourceCodePropertyGroup, "Fragment Program File", a_sFilePathPropertyType, "The absolute or relative path to the fragment shader source code." );

   ////////////////////////////////////////////////////////////////////////////
   // Program Data Sources Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oProgramDataSourcesPropertyGroup = new Group;
   a_oProgramDataSourcesPropertyGroup.Name = "Program Data Sources";
   a_lPropertySheetNodes.AddRef( a_oProgramDataSourcesPropertyGroup );

   CreatePropertySheetEntry(  a_oProgramDataSourcesPropertyGroup, "Pre-Compile Data Source", a_sNodePropertyType, "A node that you wish to traverse before the Program is rendered." );
   CreatePropertySheetEntry(  a_oProgramDataSourcesPropertyGroup, "On Render Data Source", a_sNodePropertyType, "A node that you wish to traverse when the Program is rendered." );

   ////////////////////////////////////////////////////////////////////////////
   // Program Variation Source Code Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oProgramVariationSourceCodePropertyGroup = new Group;
   a_oProgramVariationSourceCodePropertyGroup.Name = "Program Variation Source Code";
   a_lPropertySheetNodes.AddRef( a_oProgramVariationSourceCodePropertyGroup );

   CreatePropertySheetEntry(  a_oProgramVariationSourceCodePropertyGroup, "File Path", a_sFilePathPropertyType, "Sets the path to a registered Program variation source file." );

   ////////////////////////////////////////////////////////////////////////////
   // RectanglePrimitive Vector Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oRectanglePrimitiveVectorPropertyGroup = new Group;
   a_oRectanglePrimitiveVectorPropertyGroup.Name = "RectanglePrimitive Vector Modes";
   a_lPropertySheetNodes.AddRef( a_oRectanglePrimitiveVectorPropertyGroup );

   // Begin Mode Enum
   Group a_oRectanglePrimitiveVectorModesEnumeration = new Group;
   a_oRectanglePrimitiveVectorModesEnumeration.Name = "Mode";
   a_oRectanglePrimitiveVectorPropertyGroup.AddChild( a_oRectanglePrimitiveVectorModesEnumeration );

   CreatePropertySheetEntry(  a_oRectanglePrimitiveVectorModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oRectanglePrimitiveVectorModesEnumeration,
                              "RectangleGeometryModifier Extents",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the RectangleGeometryModifier extents in a vec4." );

   CreatePropertySheetEntry(  a_oRectanglePrimitiveVectorModesEnumeration,
                              "RectangleGeometryModifier Tessellation",
                              a_sEnumPropertyType,
                              "Sets the mode to compute the RectangleGeometryModifier tessellation in a vec2." );

   ////////////////////////////////////////////////////////////////////////////
   // Rectangle Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oRectanglePropertiesPropertyGroup = new Group;
   a_oRectanglePropertiesPropertyGroup.Name = "Rectangle Properties";
   a_lPropertySheetNodes.AddRef( a_oRectanglePropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Minimum X",
                              a_sFloatPropertyType,
                              "The minimum X axis extent of the rectangle." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Minimum Y",
                              a_sFloatPropertyType,
                              "The minimum Y axis extent of the rectangle." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Maximum X",
                              a_sFloatPropertyType,
                              "The maximum X axis extent of the rectangle." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Maximum Y",
                              a_sFloatPropertyType,
                              "The maximum Y axis extent of the rectangle." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Material",
                              a_sNodePropertyType,
                              "Links the modifier to a Material. This applies the Material to all the faces in the rectangle." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "X Resolution",
                              a_sIntPropertyType,
                              "Sets the rectangle's tessellation on the X axis." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Y Resolution",
                              a_sIntPropertyType,
                              "Sets the rectangle's tessellation on the Y axis." );

   CreatePropertySheetEntry(  a_oRectanglePropertiesPropertyGroup,
                              "Triangulate",
                              a_sBoolPropertyType,
                              "Determines whether or not the rectangle's triangle edges are hidden." );

   ////////////////////////////////////////////////////////////////////////////
   // Remove Mesh Channel Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oRemoveMeshChannelPropertyGroup = new Group;
   a_oRemoveMeshChannelPropertyGroup.Name = "Remove Mesh Channel";
   a_lPropertySheetNodes.AddRef( a_oRemoveMeshChannelPropertyGroup );

   // Begin Channel Enum
   Group a_oChannelEnumeration = new Group;
   a_oChannelEnumeration.Name = "Channel";
   a_oRemoveMeshChannelPropertyGroup.AddChild( a_oChannelEnumeration );

   CreatePropertySheetEntry(  a_oChannelEnumeration,
                              "Channel 1, Channel 2, Channel 3 ...",
                              a_sEnumPropertyType,
                              "Selects the attribute channel to remove from the Mesh. This modifier typically needs to be used on flattened meshes, but may have other uses." );
   // End Channel Enum

   ////////////////////////////////////////////////////////////////////////////
   // Rendering Pipeline Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oRenderingPipelineParametersPropertyGroup = new Group;
   a_oRenderingPipelineParametersPropertyGroup.Name = "Rendering Pipeline Parameters";
   a_lPropertySheetNodes.AddRef( a_oRenderingPipelineParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Clamp S",
                              a_sBoolPropertyType,
                              "Clamps the texture boundary texels to absolute border along S [U]. ( DEPRECATED. Options are in Texture )" );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Clamp T",
                              a_sBoolPropertyType,
                              "Clamps the texture boundary texels to absolute border along T [V]. ( DEPRECATED. Options are in Texture )" );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Transparent",
                              a_sBoolPropertyType,
                              "Sets the Material to render with alpha blending, provided the associated shader Program supports this feature." );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Texture Transparency",
                              a_sBoolPropertyType,
                              "Sets the Material to use texture transparency. ( DEPRECATED. This option is now a shader Program feature." );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Opacity",
                              a_sFloatPropertyType,
                              "Sets the amount of opacity when <b>Transparent</b> is <b>true</b>. Range is between <b>0</b> and <b>1</b>." );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Alpha Reference",
                              a_sFloatPropertyType,
                              "Sets the opacity rejection threshold. When this parameter is enabled, texels above or below the specified alpha range are not rendered. Range is between <b>0</b> and <b>1</b>." );

   // Begin Alpha Test Function Enumeration
   Group a_oAlphaTestFunctionEnumeration = new Group;
   a_oAlphaTestFunctionEnumeration.Name = "Alpha Test Function";
   a_oRenderingPipelineParametersPropertyGroup.AddChild( a_oAlphaTestFunctionEnumeration );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "No Test",
                              a_sEnumPropertyType,
                              "Does not perform any alpha threshold rejection." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Less Than Reference",
                              a_sEnumPropertyType,
                              "Rejects texels less than the <b>Alpha Reference<\/b> value." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Less Than Or Equal To Reference",
                              a_sEnumPropertyType,
                              "Rejects texels equal to or less than the <b>Alpha Reference<\/b> value." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Equal To Reference",
                              a_sEnumPropertyType,
                              "Rejects texels equal to the <b>Alpha Reference<\/b> value." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Not Equal To Reference",
                              a_sEnumPropertyType,
                              "Rejects texels not equal to the <b>Alpha Reference<\/b> value." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Greater Than Reference",
                              a_sEnumPropertyType,
                              "Rejects texels great than the <b>Alpha Reference<\/b> value." );

   CreatePropertySheetEntry(  a_oAlphaTestFunctionEnumeration,
                              "Reject Texels Greater Than Or Equal To Reference",
                              a_sEnumPropertyType,
                              "Rejects texels equal to or greater the <b>Alpha Reference<\/b> value." );

   // End Alpha Test Function Enumeration

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Image Writes Enabled",
                              a_sBoolPropertyType,
                              "Determines whether or not to render faces to which this Material is applied." );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "Material Is Two-Sided",
                              a_sBoolPropertyType,
                              "Determines whether or not to render faces even if the face is back-facing." );

   string a_sHSRWritesEnabledDocumentation = "Determines whether or not to include faces to which this Material is applied in z-buffer calculations." +
                                             "For example: Conserves rendering bandwidth when rendering skyboxes because there is geometry behind the skybox.";

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "HSR Writes Enabled",
                              a_sBoolPropertyType,
                              a_sHSRWritesEnabledDocumentation );

   CreatePropertySheetEntry(  a_oRenderingPipelineParametersPropertyGroup,
                              "HSR Tests Enabled",
                              a_sBoolPropertyType,
                              "Determines whether or not to test pixel depths before rendering." );

   ////////////////////////////////////////////////////////////////////////////
   // Render Traversal Control Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oRenderTraversalControlPropertyGroup = new Group;
   a_oRenderTraversalControlPropertyGroup.Name = "Render Traversal Control";
   a_lPropertySheetNodes.AddRef( a_oRenderTraversalControlPropertyGroup );

   CreatePropertySheetEntry(  a_oRenderTraversalControlPropertyGroup,
                              "Enable",
                              a_sBoolPropertyType,
                              "Determines whether or not the node is activated when it is traversed during rendering." );

   ////////////////////////////////////////////////////////////////////////////
   // Sampler Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSamplerParametersPropertyGroup = new Group;
   a_oSamplerParametersPropertyGroup.Name = "Sampler Parameters";
   a_lPropertySheetNodes.AddRef( a_oSamplerParametersPropertyGroup );

   // Begin Sampler Type Enum
   Group a_oSamplerTypeEnumeration = new Group;
   a_oSamplerTypeEnumeration.Name = "Sampler Type";
   a_oSamplerParametersPropertyGroup.AddChild( a_oSamplerTypeEnumeration );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler1D",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler1D." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler2D",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler2D." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler3D",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler3D." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "SamplerCube",
                              a_sEnumPropertyType,
                              "Sets the sampler type to samplerCube." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler1DShadow",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler1DShadow." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler2DShadow",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler2DShadow." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "Sampler2DArray",
                              a_sEnumPropertyType,
                              "Sets the sampler type to sampler2DArray." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "SamplerCubeArray",
                              a_sEnumPropertyType,
                              "Sets the sampler type to samplerCubeArray." );

   CreatePropertySheetEntry(  a_oSamplerTypeEnumeration,
                              "SamplerCubeShadow",
                              a_sEnumPropertyType,
                              "Sets the sampler type to samplerCubeShadow." );

   // End Sampler Type Enum

   ////////////////////////////////////////////////////////////////////////////
   // Screen Projection Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oScreenProjectionOptionsPropertyGroup = new Group;
   a_oScreenProjectionOptionsPropertyGroup.Name = "Screen Projection Options";
   a_lPropertySheetNodes.AddRef( a_oScreenProjectionOptionsPropertyGroup );

   // Begin Scaling Mode Enum
   Group a_oScalingModeEnumeration = new Group;
   a_oScalingModeEnumeration.Name = "Scaling Mode";
   a_oScreenProjectionOptionsPropertyGroup.AddChild( a_oScalingModeEnumeration );

   CreatePropertySheetEntry(  a_oScalingModeEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets scaling mode to none." );

   CreatePropertySheetEntry(  a_oScalingModeEnumeration,
                              "Pixels",
                              a_sEnumPropertyType,
                              "Sets scaling mode to pixels." );

   CreatePropertySheetEntry(  a_oScalingModeEnumeration,
                              "Percent",
                              a_sEnumPropertyType,
                              "Sets scaling mode to percent." );

   // Begin Vertical Alignment Enum
   Group a_oVerticalAlignmentEnumeration = new Group;
   a_oVerticalAlignmentEnumeration.Name = "Vertical Alignment";
   a_oScreenProjectionOptionsPropertyGroup.AddChild( a_oVerticalAlignmentEnumeration );

   CreatePropertySheetEntry(  a_oVerticalAlignmentEnumeration,
                              "Top",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to top." );

   CreatePropertySheetEntry(  a_oVerticalAlignmentEnumeration,
                              "Center",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to center." );

   CreatePropertySheetEntry(  a_oVerticalAlignmentEnumeration,
                              "Bottom",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to bottom." );
   // End Vertical Alignment Enum

   // Begin Horizontal Alignment Enum
   Group a_oHorizontalAlignmentEnumeration = new Group;
   a_oHorizontalAlignmentEnumeration.Name = "Horizontal Alignment";
   a_oScreenProjectionOptionsPropertyGroup.AddChild( a_oHorizontalAlignmentEnumeration );

   CreatePropertySheetEntry(  a_oHorizontalAlignmentEnumeration,
                              "Left",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to top." );

   CreatePropertySheetEntry(  a_oHorizontalAlignmentEnumeration,
                              "Center",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to center." );

   CreatePropertySheetEntry(  a_oHorizontalAlignmentEnumeration,
                              "Right",
                              a_sEnumPropertyType,
                              "Sets vertical alignment to bottom." );
   // End Horizontal Alignment Enum

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "Margin Left",
                              a_sFloatPropertyType,
                              "The left margin in pixels or percent, depending the current <b>Scaling Mode<\/b>." );

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "Margin Top",
                              a_sFloatPropertyType,
                              "The top margin in pixels or percent, depending the current <b>Scaling Mode<\/b>." );

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "Margin Right",
                              a_sFloatPropertyType,
                              "The right margin in pixels or percent, depending the current <b>Scaling Mode<\/b>." );

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "Margin Bottom",
                              a_sFloatPropertyType,
                              "The bottom margin in pixels or percent, depending the current <b>Scaling Mode<\/b>." );

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "ModelViewMatrix",
                              a_sNodePropertyType,
                              "An optional ModelViewMatrix." );

   CreatePropertySheetEntry(  a_oScreenProjectionOptionsPropertyGroup,
                              "ProjectionMatrix",
                              a_sNodePropertyType,
                              "An optional ProjectionMatrix." );

   ////////////////////////////////////////////////////////////////////////////
   // Script Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oScriptOptionsPropertyGroup = new Group;
   a_oScriptOptionsPropertyGroup.Name = "Script Options";
   a_lPropertySheetNodes.AddRef( a_oScriptOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oScriptOptionsPropertyGroup, "Enable", a_sBoolPropertyType, "Toggles the ScriptNode on/off." );
   CreatePropertySheetEntry(  a_oScriptOptionsPropertyGroup, "Script Source Code File", a_sFilePathPropertyType, "An absolute or relative path to the script source code." );
   CreatePropertySheetEntry(  a_oScriptOptionsPropertyGroup, "OnRender Function", a_sStringPropertyType, "A function that executes when the ScriptNode is rendered." );
   CreatePropertySheetEntry(  a_oScriptOptionsPropertyGroup, "OnModelChanged Function", a_sStringPropertyType, "A function that executes when the model changes." );
   CreatePropertySheetEntry(  a_oScriptOptionsPropertyGroup, "OnNotify Function", a_sStringPropertyType, "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Segment Heading Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSegmentHeadingPropertyGroup = new Group;
   a_oSegmentHeadingPropertyGroup.Name = "Segment";
   a_lPropertySheetNodes.AddRef( a_oSegmentHeadingPropertyGroup );

   CreatePropertySheetEntry(  a_oSegmentHeadingPropertyGroup, "Start Heading", a_sFloatPropertyType, "Displays the start heading for the curve segment." );
   CreatePropertySheetEntry(  a_oSegmentHeadingPropertyGroup, "Start Pitch", a_sFloatPropertyType, "Displays the start pitch for the curve segment." );
   CreatePropertySheetEntry(  a_oSegmentHeadingPropertyGroup, "End Heading", a_sFloatPropertyType, "Displays the end heading for the curve segment." );
   CreatePropertySheetEntry(  a_oSegmentHeadingPropertyGroup, "End Pitch", a_sFloatPropertyType, "Displays the end pitch for the curve segment." );

   ////////////////////////////////////////////////////////////////////////////
   // Segment Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSegmentPropertyGroup = new Group;
   a_oSegmentPropertyGroup.Name = "Segment 1";
   a_lPropertySheetNodes.AddRef( a_oSegmentPropertyGroup );

   CreatePropertySheetEntry(  a_oSegmentPropertyGroup, "Material", a_sNodePropertyType, "The Material used by the segment when the segment produces geometry." );
   CreatePropertySheetEntry(  a_oSegmentPropertyGroup, "Tessellation Depth", a_sIntPropertyType, "The tessellation depth of the segment, which is the number of sub-fragments." );
   CreatePropertySheetEntry(  a_oSegmentPropertyGroup, "Start Texture Coordinate", a_sFloatPropertyType, "The starting texture coordinate of the segment." );
   CreatePropertySheetEntry(  a_oSegmentPropertyGroup, "End Texture Coordinate", a_sFloatPropertyType, "The ending texture coordinate of the segment." );
   CreatePropertySheetEntry(  a_oSegmentPropertyGroup, "Length", a_sFloatPropertyType, "The length of the segment. This property is enumerated and cannot be changed." );

   ////////////////////////////////////////////////////////////////////////////
   // Shader Program And Public Uniform Data Sources Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup = new Group;
   a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup.Name = "Shader Program And Public Uniform Data Sources";
   a_lPropertySheetNodes.AddRef( a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup );

   CreatePropertySheetEntry(  a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup,
                              "On Render Data Source",
                              a_sNodePropertyType,
                              "A Group of uniform VariableNodes that are publicly available to subsequent instances of this Material. These uniforms are bound when the Material/Program is selected during traversal." );

   CreatePropertySheetEntry(  a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup,
                              "Generic Data Source",
                              a_sNodePropertyType,
                              "A node that serves as a generic data source. This node is not used at render time, but can be useful for extending relationships between Materials and other nodes." );

   CreatePropertySheetEntry(  a_oShaderProgramAndPublicUniformDataSourcesPropertyGroup,
                              "Program Link or Link to Program Node",
                              a_sNodePropertyType,
                              "A Program or a NodeLink&#187;Program that contains the shaders for the Material." );

   ////////////////////////////////////////////////////////////////////////////
   // Simplify Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSimplifyOptionsPropertyGroup = new Group;
   a_oSimplifyOptionsPropertyGroup.Name = "Simplify Options";
   a_lPropertySheetNodes.AddRef( a_oSimplifyOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oSimplifyOptionsPropertyGroup, "Reduction Percent", a_sFloatPropertyType, "The reduction percent from <b>0<\/b> to <b>100<\/b>%." );

   ////////////////////////////////////////////////////////////////////////////
   // Sphere Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSpherePropertiesPropertyGroup = new Group;
   a_oSpherePropertiesPropertyGroup.Name = "Sphere Properties";
   a_lPropertySheetNodes.AddRef( a_oSpherePropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Center X",
                              a_sFloatPropertyType,
                              "Sets the sphere's center position on the X axis in world coordinates." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Center Y",
                              a_sFloatPropertyType,
                              "Sets the sphere's center position on the Y axis in world coordinates." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Center Z",
                              a_sFloatPropertyType,
                              "Sets the sphere's center position on the Z axis in world coordinates." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Radius",
                              a_sFloatPropertyType,
                              "Sets the sphere's radius in world coordinates." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Material",
                              a_sNodePropertyType,
                              "Links the modifier to a Material. This applies the Material to all the faces in the sphere." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Longitude Resolution",
                              a_sIntPropertyType,
                              "Sets the sphere's tessellation around its equator." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Latitude Resolution",
                              a_sIntPropertyType,
                              "Sets the sphere's tessellation from its south pole to its north pole." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Triangulate",
                              a_sBoolPropertyType,
                              "Determines whether or not the sphere's triangle edges are hidden." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Apply Texture Modifier",
                              a_sBoolPropertyType,
                              "Determines whether or not the sphere is used to project texture coordinates." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Start Longitude Texture",
                              a_sFloatPropertyType,
                              "This parameter sets the starting texture wrap position around the sphere from east-to-west." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "Start Latitude Texture",
                              a_sFloatPropertyType,
                              "This parameter sets the starting texture wrap along the sphere from south-to-north." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "End Longitude Texture",
                              a_sFloatPropertyType,
                              "This parameter sets the ending texture wrap position around the sphere from east-to-west." );

   CreatePropertySheetEntry(  a_oSpherePropertiesPropertyGroup,
                              "End Latitude Texture",
                              a_sFloatPropertyType,
                              "This parameter sets the ending texture wrap along the sphere from south-to-north." );

   ////////////////////////////////////////////////////////////////////////////
   // Split Edge Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSplitEdgePropertyGroup = new Group;
   a_oSplitEdgePropertyGroup.Name = "Split Edge";
   a_lPropertySheetNodes.AddRef( a_oSplitEdgePropertyGroup );

   CreatePropertySheetEntry(  a_oSplitEdgePropertyGroup,
                              "Percent",
                              a_sFloatPropertyType,
                              "Determines the point between the A and B vertex, but relative to the A vertex, at which to split the edge." );

   ////////////////////////////////////////////////////////////////////////////
   // Statement Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oStatementParametersPropertyGroup = new Group;
   a_oStatementParametersPropertyGroup.Name = "Statement Parameters";
   a_lPropertySheetNodes.AddRef( a_oStatementParametersPropertyGroup );

   // Begin Statement Type Enumeration
   Group a_oStatementTypeEnumeration = new Group;
   a_oStatementTypeEnumeration.Name = "Statement Type";
   a_oStatementParametersPropertyGroup.AddChild( a_oStatementTypeEnumeration );
   
   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'none'." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Block",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'block'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "If",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'if'. This option is still supported if used in conjunction with the <b>Enable Runtime Logic<\/b> parameter." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Else",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'else'. This option is still supported if used in conjunction with the <b>if<\/b> statement type and the <b>Enable Runtime Logic<\/b> parameter." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "While",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'while'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "For",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'for'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Break",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'break'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Continue",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'continue'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Variable",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'variable'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Array Subscript",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'array subscript'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Function Call",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'function call'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Cast",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'cast'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Member Selection",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'member selection'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Unary Plus",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'unary plus'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Unary Minus",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'unary minus'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Unary Bit Not",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'unary bit not'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Unary Logical Not",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'unary logical not'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Multiply",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'multiply'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Divide",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'divide'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Modulus",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'modulus'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Add",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'add'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Subtract",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'subtract'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Bit Shift Left",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'bit shift left'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Bit Shift Right",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'bit shift right'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Less",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'less'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Greater",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'greater'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Less Or Equal",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'less or equal'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Greater Or Equal",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'Greater Or Equal'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Is Equal",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'is equal'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Is Not Equal",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'is not equal'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Bit And",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'bit and'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Bit XOR",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'bit XOR'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Bit Or",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'bit or'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Logical And",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'logical and'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Logical Or",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'logical or'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign Multiply",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign multiply'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign Divide",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign divide'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign Modulus",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign modulus'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign Add",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign add'. This option is no longer supported. Functionality has been moved to InputNode." );

   CreatePropertySheetEntry(  a_oStatementTypeEnumeration,
                              "Assign Subtract",
                              a_sEnumPropertyType,
                              "Sets the statement type to 'assign subtract'. This option is no longer supported. Functionality has been moved to InputNode." );

   // End Statement Type Enumeration

   CreatePropertySheetEntry(  a_oStatementParametersPropertyGroup,
                              "Enable Runtime Logic",
                              a_sBoolPropertyType,
                              "Enables live logic during graph traversal for StatementNodes set to IF ( and any connected ELSE cases )." );

   CreatePropertySheetEntry(  a_oStatementParametersPropertyGroup,
                              "Logic Next",
                              a_sNodePropertyType,
                              "A StatementNode set to IF or ELSE that should be the next traversed statement in a live logic structure." );

   ////////////////////////////////////////////////////////////////////////////
   // Stencil State Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oStencilStatePropertyGroup = new Group;
   a_oStencilStatePropertyGroup.Name = "Stencil State";
   a_lPropertySheetNodes.AddRef( a_oStencilStatePropertyGroup );

   CreatePropertySheetEntry(  a_oStencilStatePropertyGroup,
                              "Enable Stencil",
                              a_sBoolPropertyType,
                              "Toggles the stencil on/off." );

   CreatePropertySheetEntry(  a_oStencilStatePropertyGroup,
                              "Two-Sided",
                              a_sBoolPropertyType,
                              "Toggles the stencil one or two-sided." );

   ////////////////////////////////////////////////////////////////////////////
   // String Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oStringParametersPropertyGroup = new Group;
   a_oStringParametersPropertyGroup.Name = "String Parameters";
   a_lPropertySheetNodes.AddRef( a_oStringParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oStringParametersPropertyGroup,
                              "String Value",
                              a_sStringPropertyType,
                              "The string value stored by the StringNode." );

   ////////////////////////////////////////////////////////////////////////////
   // SubdivideQuadModifier Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSubdivideQuadModifierOptionsPropertyGroup = new Group;
   a_oSubdivideQuadModifierOptionsPropertyGroup.Name = "SubdivideQuadModifier Options";
   a_lPropertySheetNodes.AddRef( a_oSubdivideQuadModifierOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oSubdivideQuadModifierOptionsPropertyGroup,
                              "Rows",
                              a_sIntPropertyType,
                              "Subdivide the quadrilateral into this many rows." );

   CreatePropertySheetEntry(  a_oSubdivideQuadModifierOptionsPropertyGroup,
                              "Columns",
                              a_sIntPropertyType,
                              "Subdivide the quadrilateral into this many columns." );

   ////////////////////////////////////////////////////////////////////////////
   // Subroutine Integer Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSubroutineIntegerModesPropertyGroup = new Group;
   a_oSubroutineIntegerModesPropertyGroup.Name = "Subroutine Integer Modes";
   a_lPropertySheetNodes.AddRef( a_oSubroutineIntegerModesPropertyGroup );

   // Begin Mode Enum
   Group a_oSubroutineIntegerModesEnumeration = new Group;
   a_oSubroutineIntegerModesEnumeration.Name = "Mode";
   a_oSubroutineIntegerModesPropertyGroup.AddChild( a_oSubroutineIntegerModesEnumeration );

   CreatePropertySheetEntry(  a_oSubroutineIntegerModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oSubroutineIntegerModesEnumeration,
                              "Subroutine Variation",
                              a_sEnumPropertyType,
                              "Sets the mode to set a particular subroutine variation." );

   ////////////////////////////////////////////////////////////////////////////
   // Subroutine Inputs Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSubroutineInputsPropertyGroup = new Group;
   a_oSubroutineInputsPropertyGroup.Name = "Subroutine Inputs";
   a_lPropertySheetNodes.AddRef( a_oSubroutineInputsPropertyGroup );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 0",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 1",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 2",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 3",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 4",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 5",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 6",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   CreatePropertySheetEntry(  a_oSubroutineInputsPropertyGroup,
                              "Subroutine Declaration Data Source 7",
                              a_sNodePropertyType,
                              "Allows you to link a function declared with the subroutine qualifier to a DeclareFunctionNode of a particular subroutine type." );

   ////////////////////////////////////////////////////////////////////////////
   // Sweep Properties Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSweepPropertiesPropertyGroup = new Group;
   a_oSweepPropertiesPropertyGroup.Name = "Sweep Properties";
   a_lPropertySheetNodes.AddRef( a_oSweepPropertiesPropertyGroup );

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Pitch Geometry To Follow Curve",
                              a_sBoolPropertyType,
                              "This option aligns the swept geometry with the pitch of the curve." );

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Transform Geometry From Origin",
                              a_sBoolPropertyType,
                              "This option toggles the transform frame-of-reference from the origin to rail and sweep curve coordinates. This option should generally be <b>True<\/b." );

   // Begin Flow Texture Width Enum
   Group a_oSweepFlowTextureWidthEnumeration = new Group;
   a_oSweepFlowTextureWidthEnumeration.Name = "Flow Texture Width";
   a_oSweepPropertiesPropertyGroup.AddChild( a_oSweepFlowTextureWidthEnumeration );

   CreatePropertySheetEntry(  a_oSweepFlowTextureWidthEnumeration, "Along Outline", a_sEnumPropertyType, "Flows the texture width along the curve." );
   CreatePropertySheetEntry(  a_oSweepFlowTextureWidthEnumeration, "Along Sweep", a_sEnumPropertyType, "Flows the texture width perpendicular to the curve." );
   // End Flow Texture Width Enum

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Default Material",
                              a_sNodePropertyType,
                              "DEPRECATED. Use per-curve-segment Materials instead." );

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Cross Section Curve Group",
                              a_sNodePropertyType,
                              "A Group containing the set of curves you wish to sweep along the rail curves." );

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Rail Curve Group",
                              a_sNodePropertyType,
                              "A Group containing the set of curves you along which you wish to sweep the cross-section curves." );

   ////////////////////////////////////////////////////////////////////////////
   // Switching Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oSwitchingOptionsPropertyGroup = new Group;
   a_oSwitchingOptionsPropertyGroup.Name = "Switching Options";
   a_lPropertySheetNodes.AddRef( a_oSwitchingOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oSwitchingOptionsPropertyGroup,
                              "Switch In Distance",
                              a_sFloatPropertyType,
                              "Determines the distance from the LOD center at which the node is switched in ( made visible )." );

   CreatePropertySheetEntry(  a_oSwitchingOptionsPropertyGroup,
                              "Switch Out Distance",
                              a_sFloatPropertyType,
                              "Determines the distance from the LOD center at which the node is switched out ( made invisible )." );

   CreatePropertySheetEntry(  a_oSwitchingOptionsPropertyGroup,
                              "LOD Center X",
                              a_sFloatPropertyType,
                              "Sets the X axis position of the LOD center in world coordinates." );

   CreatePropertySheetEntry(  a_oSwitchingOptionsPropertyGroup,
                              "LOD Center Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis position of the LOD center in world coordinates." );

   CreatePropertySheetEntry(  a_oSwitchingOptionsPropertyGroup,
                              "LOD Center Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis position of the LOD center in world coordinates." );

   ////////////////////////////////////////////////////////////////////////////
   // Texture Data Sources Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTextureDataSourcesPropertyGroup = new Group;
   a_oTextureDataSourcesPropertyGroup.Name = "Texture Data Sources";
   a_lPropertySheetNodes.AddRef( a_oTextureDataSourcesPropertyGroup );

   CreatePropertySheetEntry(  a_oTextureDataSourcesPropertyGroup,
                              "Texture Node Or Group Of Texture Nodes",
                              a_sNodePropertyType,
                              "A Texture or a Group containing Textures." );

   ////////////////////////////////////////////////////////////////////////////
   // Texture Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTextureOptionsPropertyGroup = new Group;
   a_oTextureOptionsPropertyGroup.Name = "Texture Options";
   a_lPropertySheetNodes.AddRef( a_oTextureOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup,
                              "Generate MIP Maps",
                              a_sBoolPropertyType,
                              "Toggles MIP map generation. This option should be <b>True<\/b> whenever possible, as it can greatly reduce sampling costs and improve shader performance." );

   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup,
                              "Texture Is External",
                              a_sBoolPropertyType,
                              "Toggles external texture state. External textures reference a file on the hard disk. External textures are best practice." );

   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup,
                              "Texture File",
                              a_sBoolPropertyType,
                              "For an external texture, an absolute or relative path to the texture file on disk. Relative paths are best practice." );

   // Begin Pixel Format Enum
   Group a_oPixelFormatEnumeration = new Group;
   a_oPixelFormatEnumeration.Name = "Pixel Format";
   a_oTextureOptionsPropertyGroup.AddChild( a_oPixelFormatEnumeration );

   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "8 I", a_sEnumPropertyType, "This option is enumerated when the pixel format is 8-bit indexed. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "8 A", a_sEnumPropertyType, "This option is enumerated when the pixel format is 8-bit indexed. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "1555 ARGB", a_sEnumPropertyType, "This option is enumerated when the pixel format is 1555 ARGB. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "565 RGB", a_sEnumPropertyType, "This option is enumerated when the pixel format is 565 RGB. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "888 RGB", a_sEnumPropertyType, "This option is enumerated when the pixel format is 888 RGB. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "8888 RGB", a_sEnumPropertyType, "This option is enumerated when the pixel format is 8888 ARGB. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "4444 RGB", a_sEnumPropertyType, "This option is enumerated when the pixel format is 4444 ARGB. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "32-Bit Depth", a_sEnumPropertyType, "This option sets the texture to 32-bit depth with 8-bit stencil. Valid only when texture is a child of a BufferNode." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "32-Bit Depth, 8-Bit Stencil", a_sEnumPropertyType, "This option sets the texture to 32-bit depth, Valid only when the texture is a child of a BufferNode." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "3x 10-Bit RGB, 2-Bit Alpha", a_sEnumPropertyType, "This option sets the texture to 30-bit RGB, 2-bit Alpha. This option can be set for internal textures." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F16 R", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F16 RG", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F16 RGB", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F16 RGBA", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F32 R", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F32 RG", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F32 RGB", a_sEnumPropertyType, "This option is undocumented at present." );
   CreatePropertySheetEntry(  a_oPixelFormatEnumeration, "F32 RGBA", a_sEnumPropertyType, "This option is undocumented at present." );
   // End Pixel Format Enum

   // Begin Texture Type Enum
   Group a_oTextureTypeEnumeration = new Group;
   a_oTextureTypeEnumeration.Name = "Texture Type";
   a_oTextureOptionsPropertyGroup.AddChild( a_oTextureTypeEnumeration );

   CreatePropertySheetEntry(  a_oTextureTypeEnumeration, "2D", a_sEnumPropertyType, "This option flags the texture as a 2D texture." );
   CreatePropertySheetEntry(  a_oTextureTypeEnumeration, "3D", a_sEnumPropertyType, "This option flags the texture as a 3D texture." );
   CreatePropertySheetEntry(  a_oTextureTypeEnumeration, "Cube Map", a_sEnumPropertyType, "This option flags the texture as a cube map." );
   CreatePropertySheetEntry(  a_oTextureTypeEnumeration, "Render Buffer", a_sEnumPropertyType, "This option flags the texture as a render buffer. Texture file path is ignored. This texture is always internal." );
   // End Texture Type Enum

   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Array Size", a_sIntPropertyType, "This option sets the array size of the texture ( the number of slices ). Valid only when texture type is <b>2D<\/b>." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Source X", a_sFloatPropertyType, "This option sets the texture source coordinates. Range is 0 to the max width of the texture." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Source Y", a_sFloatPropertyType, "This option sets the texture source coordinates. Range is 0 to the max height of the texture." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Width", a_sFloatPropertyType, "This option sets the texture width coordinates. Range is 0 to the max width of the texture." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Height", a_sFloatPropertyType, "This option sets the texture height coordinates. Range is 0 to the max height of the texture." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Render Width", a_sFloatPropertyType, "This option sets the actual rendered width of the texture regardless of its source and width/height parameters." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Render Width", a_sFloatPropertyType, "This option sets the actual rendered height of the texture regardless of its source and width/height parameters." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Render Depth", a_sIntPropertyType, "This option sets the number of slices for a 3D texture. Valid only when texture type is <b>3D<\/b>." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Export Subdivide", a_sBoolPropertyType, "This option is reserved for future use." );
   CreatePropertySheetEntry(  a_oTextureOptionsPropertyGroup, "Export File", a_sFilePathPropertyType, "This option is reserved for future use." );

   // Begin Clamp S Enum
   Group a_oClampSEnumeration = new Group;
   a_oClampSEnumeration.Name = "Clamp S";
   a_oTextureOptionsPropertyGroup.AddChild( a_oClampSEnumeration );

   CreatePropertySheetEntry(  a_oClampSEnumeration, "Clamp", a_sEnumPropertyType, "This option clamps texture tiling on S." );
   CreatePropertySheetEntry(  a_oClampSEnumeration, "Repeat", a_sEnumPropertyType, "This option allows texture tiling on S to repeat." );
   // End Clamp S Enum

   // Begin Clamp T Enum
   Group a_oClampTEnumeration = new Group;
   a_oClampTEnumeration.Name = "Clamp T";
   a_oTextureOptionsPropertyGroup.AddChild( a_oClampTEnumeration );

   CreatePropertySheetEntry(  a_oClampTEnumeration, "Clamp", a_sEnumPropertyType, "This option clamps texture tiling on T." );
   CreatePropertySheetEntry(  a_oClampTEnumeration, "Repeat", a_sEnumPropertyType, "This option allows texture tiling on T to repeat." );
   // End Clamp S Enum

   // Begin Clamp R Enum
   Group a_oClampREnumeration = new Group;
   a_oClampREnumeration.Name = "Clamp R";
   a_oTextureOptionsPropertyGroup.AddChild( a_oClampREnumeration );

   CreatePropertySheetEntry(  a_oClampREnumeration, "Clamp", a_sEnumPropertyType, "This option clamps texture tiling on R." );
   CreatePropertySheetEntry(  a_oClampREnumeration, "Repeat", a_sEnumPropertyType, "This option allows texture tiling on R to repeat." );
   // End Clamp S Enum

   ////////////////////////////////////////////////////////////////////////////
   // Texture Settings For Terrain Created By This Preview Mesh Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup = new Group;
   a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup.Name = "Texture Settings For Terrain Created By This Preview Mesh";
   a_lPropertySheetNodes.AddRef( a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup );

   CreatePropertySheetEntry(  a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup,
                              "Imagery Directory",
                              a_sFilePathPropertyType,
                              "An absolute or relative path to the directory containing GEOTIFF ortho-imagery." );

   // Begin Choose Preview Texture Width Enum
   Group a_oChooseOutputTextureWidthEnumeration = new Group;
   a_oChooseOutputTextureWidthEnumeration.Name = "Choose Output Texture Width";
   a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup.AddChild( a_oChooseOutputTextureWidthEnumeration );

   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "64", a_sEnumPropertyType, "Sets the preview texture width to 64 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "128", a_sEnumPropertyType, "Sets the preview texture width to 128 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "256", a_sEnumPropertyType, "Sets the preview texture width to 256 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "512", a_sEnumPropertyType, "Sets the preview texture width to 512 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "1024", a_sEnumPropertyType, "Sets the preview texture width to 1024 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "2048", a_sEnumPropertyType, "Sets the preview texture width to 2048 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "4096", a_sEnumPropertyType, "Sets the preview texture width to 4096 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "8192", a_sEnumPropertyType, "Sets the preview texture width to 8192 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureWidthEnumeration, "16384", a_sEnumPropertyType, "Sets the preview texture width to 16384 pixels." );
   // End Choose Output Texture Width Enum

   // Begin Choose Output Texture Height Enum
   Group a_oChooseOutputTextureHeightEnumeration = new Group;
   a_oChooseOutputTextureHeightEnumeration.Name = "Choose Output Texture Height";
   a_oTextureSettingsForTerrainCreatedByThisPreviewMeshPropertyGroup.AddChild( a_oChooseOutputTextureHeightEnumeration );

   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "64", a_sEnumPropertyType, "Sets the output texture width to 64 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "128", a_sEnumPropertyType, "Sets the output texture width to 128 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "256", a_sEnumPropertyType, "Sets the output texture width to 256 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "512", a_sEnumPropertyType, "Sets the output texture width to 512 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "1024", a_sEnumPropertyType, "Sets the output texture width to 1024 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "2048", a_sEnumPropertyType, "Sets the output texture width to 2048 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "4096", a_sEnumPropertyType, "Sets the output texture width to 4096 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "8192", a_sEnumPropertyType, "Sets the output texture width to 8192 pixels." );
   CreatePropertySheetEntry(  a_oChooseOutputTextureHeightEnumeration, "16384", a_sEnumPropertyType, "Sets the output texture width to 16384 pixels." );
   // End Choose Preview Texture Height Enum

   ////////////////////////////////////////////////////////////////////////////
   // Texture Settings For This Mesh Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTextureSettingsForThisMeshPropertyGroup = new Group;
   a_oTextureSettingsForThisMeshPropertyGroup.Name = "Texture Settings For This Mesh";
   a_lPropertySheetNodes.AddRef( a_oTextureSettingsForThisMeshPropertyGroup );

   CreatePropertySheetEntry(  a_oTextureSettingsForThisMeshPropertyGroup,
                              "Use Preview Imagery",
                              a_sBoolPropertyType,
                              "This option determines whether or not a preview texture is created from ortho-imagery." );

   CreatePropertySheetEntry(  a_oTextureSettingsForThisMeshPropertyGroup,
                              "Imagery Directory",
                              a_sFilePathPropertyType,
                              "An absolute or relative path to the directory containing GEOTIFF ortho-imagery." );

   // Begin Choose Preview Texture Width Enum
   Group a_oChoosePreviewTextureWidthEnumeration = new Group;
   a_oChoosePreviewTextureWidthEnumeration.Name = "Choose Preview Texture Width";
   a_oTextureSettingsForThisMeshPropertyGroup.AddChild( a_oChoosePreviewTextureWidthEnumeration );

   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "64", a_sEnumPropertyType, "Sets the preview texture width to 64 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "128", a_sEnumPropertyType, "Sets the preview texture width to 128 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "256", a_sEnumPropertyType, "Sets the preview texture width to 256 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "512", a_sEnumPropertyType, "Sets the preview texture width to 512 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "1024", a_sEnumPropertyType, "Sets the preview texture width to 1024 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "2048", a_sEnumPropertyType, "Sets the preview texture width to 2048 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "4096", a_sEnumPropertyType, "Sets the preview texture width to 4096 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "8192", a_sEnumPropertyType, "Sets the preview texture width to 8192 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureWidthEnumeration, "16384", a_sEnumPropertyType, "Sets the preview texture width to 16384 pixels." );
   // End Choose Preview Texture Width Enum

   // Begin Choose Preview Texture Height Enum
   Group a_oChoosePreviewTextureHeightEnumeration = new Group;
   a_oChoosePreviewTextureHeightEnumeration.Name = "Choose Preview Texture Height";
   a_oTextureSettingsForThisMeshPropertyGroup.AddChild( a_oChoosePreviewTextureHeightEnumeration );

   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "64", a_sEnumPropertyType, "Sets the preview texture width to 64 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "128", a_sEnumPropertyType, "Sets the preview texture width to 128 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "256", a_sEnumPropertyType, "Sets the preview texture width to 256 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "512", a_sEnumPropertyType, "Sets the preview texture width to 512 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "1024", a_sEnumPropertyType, "Sets the preview texture width to 1024 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "2048", a_sEnumPropertyType, "Sets the preview texture width to 2048 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "4096", a_sEnumPropertyType, "Sets the preview texture width to 4096 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "8192", a_sEnumPropertyType, "Sets the preview texture width to 8192 pixels." );
   CreatePropertySheetEntry(  a_oChoosePreviewTextureHeightEnumeration, "16384", a_sEnumPropertyType, "Sets the preview texture width to 16384 pixels." );
   // End Choose Preview Texture Height Enum

   CreatePropertySheetEntry(  a_oSweepPropertiesPropertyGroup,
                              "Default Material",
                              a_sNodePropertyType,
                              "DEPRECATED. Use per-curve-segment Materials instead." );

   ////////////////////////////////////////////////////////////////////////////
   // Timer Modes
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTimerModesPropertyGroup = new Group;
   a_oTimerModesPropertyGroup.Name = "Timer Modes";
   a_lPropertySheetNodes.AddRef( a_oTimerModesPropertyGroup );

   CreatePropertySheetEntry(  a_oTimerModesPropertyGroup,
                              "Enable",
                              a_sBoolPropertyType,
                              "Toggles timing computation on/off." );

   // Begin Mode Enum
   Group a_oTimerModesEnumeration = new Group;
   a_oTimerModesEnumeration.Name = "Mode";
   a_oTimerModesPropertyGroup.AddChild( a_oTimerModesEnumeration );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "Sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Milliseconds [0, X]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Milliseconds [0, 1]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Milliseconds [0, 2PI]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Seconds [0, X]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Seconds [0, 1]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Seconds [0, 2PI]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Cos( Seconds [0, X] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Sin( Seconds [0, X] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Tan( Seconds [0, X] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Cos( Seconds [0, 1] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Sin( Seconds [0, 1] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Tan( Seconds [0, 1] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Cos( Seconds [0, 2PI] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Sin( Seconds [0, 2PI] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Tan( Seconds [0, 2PI] )",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Frame Start Milliseconds [0, X]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Frame Start Seconds [0, X]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Frame Index [0, X]",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oTimerModesEnumeration,
                              "Frames Per Second",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   // End Mode Enum

   CreatePropertySheetEntry(  a_oTimerModesPropertyGroup,
                              "Interval",
                              a_sIntPropertyType,
                              "This option is undocumented at present." );

   ////////////////////////////////////////////////////////////////////////////
   // Trimming Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTrimmingOptionsPropertyGroup = new Group;
   a_oTrimmingOptionsPropertyGroup.Name = "Trimming Options";
   a_lPropertySheetNodes.AddRef( a_oTrimmingOptionsPropertyGroup );

   string a_sVerticalTolerance = "A vertical t-junction occurs when a cloth mesh vertex almost overlaps the edge of a scissor face. The value you enter is used in the " +
                                 "equation <b>1 / value</b> to set the tolerance. A value of 1000 results in a tolerance of ( 1 / 1000 ).";

   CreatePropertySheetEntry(  a_oTrimmingOptionsPropertyGroup,
                              "Vertical T-Junction Tolerance (Divisor)",
                              a_sFloatPropertyType,
                              a_sVerticalTolerance );

   CreatePropertySheetEntry(  a_oTrimmingOptionsPropertyGroup,
                              "Scissor",
                              a_sNodePropertyType,
                              "This parameter links the modifier to the Mesh that functions as the scissor mesh. For example: a road mesh." );

   ////////////////////////////////////////////////////////////////////////////
   // TransformModifier Options Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTransformModifierOptionsPropertyGroup = new Group;
   a_oTransformModifierOptionsPropertyGroup.Name = "TransformModifier Options";
   a_lPropertySheetNodes.AddRef( a_oTransformModifierOptionsPropertyGroup );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Pivot X",
                              a_sFloatPropertyType,
                              "Sets the X axis transform pivot position." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Pivot Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis transform pivot position." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Pivot Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis transform pivot position." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Position X",
                              a_sFloatPropertyType,
                              "Sets the X axis position transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Position Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis position transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Position Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis position transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Orientation X",
                              a_sFloatPropertyType,
                              "Sets the X axis orientation transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Orientation Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis orientation transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Orientation Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis orientation transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Scale X",
                              a_sFloatPropertyType,
                              "Sets the X axis scale transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Scale Y",
                              a_sFloatPropertyType,
                              "Sets the Y axis scale transform." );

   CreatePropertySheetEntry(  a_oTransformModifierOptionsPropertyGroup,
                              "Scale Z",
                              a_sFloatPropertyType,
                              "Sets the Z axis scale transform." );

   ////////////////////////////////////////////////////////////////////////////
   // Translate Along Normal Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTranslateAlongNormalPropertyGroup = new Group;
   a_oTranslateAlongNormalPropertyGroup.Name = "Translate Along Normal";
   a_lPropertySheetNodes.AddRef( a_oTranslateAlongNormalPropertyGroup );

   CreatePropertySheetEntry(  a_oTranslateAlongNormalPropertyGroup,
                              "Translation",
                              a_sFloatPropertyType,
                              "The distance, in world space database units, to translate the geometry." );

   ////////////////////////////////////////////////////////////////////////////
   // TypeAggregatorNode Code Formatting Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTypeAggregatorNodeCodeFormattingPropertyGroup = new Group;
   a_oTypeAggregatorNodeCodeFormattingPropertyGroup.Name = "TypeAggregatorNode Code Formatting";
   a_lPropertySheetNodes.AddRef( a_oTypeAggregatorNodeCodeFormattingPropertyGroup );

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeCodeFormattingPropertyGroup,
                              "Number of Spaces to Indent",
                              a_sIntPropertyType,
                              "Set the tab depth to this number of spaces." );

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeCodeFormattingPropertyGroup,
                              "Insert Newline Before Opening Brace",
                              a_sBoolPropertyType,
                              "Set this parameter to <b>TRUE<\/b> if you want a new line before the opening brace." );

   ////////////////////////////////////////////////////////////////////////////
   // TypeAggregatorNode Setup Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oTypeAggregatorNodeSetupPropertyGroup = new Group;
   a_oTypeAggregatorNodeSetupPropertyGroup.Name = "TypeAggregatorNode Setup";
   a_lPropertySheetNodes.AddRef( a_oTypeAggregatorNodeSetupPropertyGroup );

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeSetupPropertyGroup,
                              "TypeAggregatorNode is Built In",
                              a_sBoolPropertyType,
                              "Select this option to reference a built-in type aggregator such as <b>gl_in<\/b>." );

   // Begin Mode Enumeration
   Group a_oModeEnumeration = new Group;
   a_oModeEnumeration.Name = "Mode";
   a_oTypeAggregatorNodeSetupPropertyGroup.AddChild( a_oModeEnumeration );

   CreatePropertySheetEntry(  a_oModeEnumeration,
                              "Struct",
                              a_sEnumPropertyType,
                              "This option declares the type aggregator as a struct." );

   CreatePropertySheetEntry(  a_oModeEnumeration,
                              "Interface Block",
                              a_sEnumPropertyType,
                              "This option declares the type aggregator as an interface block." );

   CreatePropertySheetEntry(  a_oModeEnumeration,
                              "Struct Instance",
                              a_sEnumPropertyType,
                              "This option declares the type aggregator as a struct instance." );

   CreatePropertySheetEntry(  a_oModeEnumeration,
                              "Interface Block Instance",
                              a_sEnumPropertyType,
                              "This option declares the type aggregator as an interface block instance." );
   // End Mode Enumeration

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeSetupPropertyGroup,
                              "Declaration Data Source",
                              a_sNodePropertyType,
                              "A TypeAggregatorNode declared as a struct instance must be linked to an identically declared TypeAggregatorNode that declares it." );
   
   // Begin Storage Qualifier Enumeration
   Group a_oStorageQualifierEnumeration = new Group;
   a_oStorageQualifierEnumeration.Name = "Storage Qualifier";
   a_oStorageQualifierEnumeration.ID = "Struct, Interface Block, struct instance, and interface block instance support different storage qualifiers. " +
                                       "Not all the storage qualifiers here can be applied to each variation of type aggregator.";
   a_oTypeAggregatorNodeSetupPropertyGroup.AddChild( a_oStorageQualifierEnumeration );

   CreatePropertySheetEntry(  a_oStorageQualifierEnumeration,
                              "In",
                              a_sEnumPropertyType,
                              "This option selects the 'in' storage qualifier." );

   CreatePropertySheetEntry(  a_oStorageQualifierEnumeration,
                              "Out",
                              a_sEnumPropertyType,
                              "This option selects the 'out' storage qualifier." );

   CreatePropertySheetEntry(  a_oStorageQualifierEnumeration,
                              "Uniform",
                              a_sEnumPropertyType,
                              "This option selects the 'uniform' storage qualifier." );

   CreatePropertySheetEntry(  a_oStorageQualifierEnumeration,
                              "Buffer",
                              a_sEnumPropertyType,
                              "This option selects the 'buffer' storage qualifier." );

   CreatePropertySheetEntry(  a_oStorageQualifierEnumeration,
                              "Const",
                              a_sEnumPropertyType,
                              "This option selects the 'const' storage qualifier." );
   // End Storage Qualifier Enumeration

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeSetupPropertyGroup,
                              "Type Aggregator Is Implicitly Sized Array",
                              a_sIntPropertyType,
                              "Declares a Struct Instance or Interface Block instance as an implicitly sized array. Not applicable to Struct or Interface Block." );

   CreatePropertySheetEntry(  a_oTypeAggregatorNodeSetupPropertyGroup,
                              "Explicit Array Size",
                              a_sIntPropertyType,
                              "Declares a Struct Instance or Interface Block instance with an explicit array size. Not applicable to Struct or Interface Block." );

   ////////////////////////////////////////////////////////////////////////////
   // UniformBufferBind Node Settings Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oUniformBufferBindNodeSettingsPropertyGroup = new Group;
   a_oUniformBufferBindNodeSettingsPropertyGroup.Name = "UniformBufferBindNode Settings";
   a_lPropertySheetNodes.AddRef( a_oUniformBufferBindNodeSettingsPropertyGroup );

   CreatePropertySheetEntry(  a_oUniformBufferBindNodeSettingsPropertyGroup,
                              "Uniform Buffer Slot Index",
                              a_sIntPropertyType,
                              "Sets the slot index for the uniform buffer. All uniform buffer slot index parameters must use sequential values starting at 0 or the buffer may not bind properly." );

   CreatePropertySheetEntry(  a_oUniformBufferBindNodeSettingsPropertyGroup,
                              "UniformBufferNode Data Source",
                              a_sIntPropertyType,
                              "The UniformBufferNode you wish to bind." );

   ////////////////////////////////////////////////////////////////////////////
   // Database Unit Labels And Precision Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oDatabaseUnitLabelsAndPrecisionPropertyGroup = new Group;
   a_oDatabaseUnitLabelsAndPrecisionPropertyGroup.Name = "Database Unit Labels And Precision";
   a_lPropertySheetNodes.AddRef( a_oDatabaseUnitLabelsAndPrecisionPropertyGroup );

   // Begin Units Label Enumeration
   Group a_oUnitLabelEnumeration = new Group;
   a_oUnitLabelEnumeration.Name = "Unit Label";
   a_oDatabaseUnitLabelsAndPrecisionPropertyGroup.AddChild( a_oUnitLabelEnumeration );
   
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "US Inch", a_sEnumPropertyType, "Sets the database unit labels to inches. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "US Foot", a_sEnumPropertyType, "Sets the database unit labels to feet. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "US Mile", a_sEnumPropertyType, "Sets the database unit labels to miles. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "Metric Centimeter", a_sEnumPropertyType, "Sets the database unit labels to centimeters. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "Metric Meter", a_sEnumPropertyType, "Sets the database unit labels to meters. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "Metric Kilometer", a_sEnumPropertyType, "Sets the database unit labels to kilometers. This does not affect coordinate storage." );
   CreatePropertySheetEntry(  a_oUnitLabelEnumeration, "Degree", a_sEnumPropertyType, "Sets the database unit labels to degrees. This does not affect coordinate storage." );
   // End Units Label Enumeration

   // Begin Numeric Precision Enumeration
   Group a_oNumericPrecisionEnumeration = new Group;
   a_oNumericPrecisionEnumeration.Name = "Numeric Precision";
   a_oDatabaseUnitLabelsAndPrecisionPropertyGroup.AddChild( a_oNumericPrecisionEnumeration );
   
   CreatePropertySheetEntry(  a_oNumericPrecisionEnumeration,
                              "Single Precision [32-bit]",
                              a_sEnumPropertyType,
                              "Sets internal numeric precision to 32-bit. <b>This change can have serious effects and cannot be undone.<\/b>." );

   CreatePropertySheetEntry(  a_oNumericPrecisionEnumeration,
                              "Double Precision [64-bit]",
                              a_sEnumPropertyType,
                              "Sets internal numeric precision to 64-bit. <b>This change can have serious effects and cannot be undone.<\/b>." );
   // End Numeric Precision Enumeration

   CreatePropertySheetEntry(  a_oDatabaseUnitLabelsAndPrecisionPropertyGroup,
                              "Unit Scale",
                              a_sFloatPropertyType,
                              "This option is reserved for future use." );

   ////////////////////////////////////////////////////////////////////////////
   // Variable Setup Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oVariableSetupPropertyGroup = new Group;
   a_oVariableSetupPropertyGroup.Name = "Variable Setup Parameters";
   a_lPropertySheetNodes.AddRef( a_oVariableSetupPropertyGroup );

   // Binding Type Enumeration
   Group a_oBindingTypeEnumeration = new Group;
   a_oBindingTypeEnumeration.Name = "Binding Type";
   a_oVariableSetupPropertyGroup.AddChild( a_oBindingTypeEnumeration );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Local",
                              a_sEnumPropertyType,
                              "This option declares a variable without any qualifiers ( a local variable ). For example: 'vec4 myVec4'." );
   
   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Const",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'const' qualifier. For example: 'const vec4 myVec4'." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Uniform",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'uniform' qualifier. For example: 'uniform vec4 myVec4'." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Attribute",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'attribute' qualifier. For example: 'attribute vec4 SPA_Position0'. Provided for compatibility." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Varying",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'varying' qualifier. For example: 'varying vec4 SPA_Position0'. Provided for compatibility." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Compile Directive",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'compiler directive' qualifier. This option is not compatible with GLSL, but is compatible with ProgramOptions." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "In",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'in' qualifier. For example: 'in vec4 position'." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "Out",
                              a_sEnumPropertyType,
                              "This option declares a variable with the 'out' qualifier. For example: 'out vec4 position'." );

   CreatePropertySheetEntry(  a_oBindingTypeEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This option declares a variable without any qualifier. For example: 'vec4 position'." );

   CreatePropertySheetEntry(  a_oVariableSetupPropertyGroup,
                              "Name Prefix",
                              a_sStringPropertyType,
                              "A variable name prefix, often used for a value that indicates a particular shader stage such as 'vs_', 'gs_', or 'fs_'." );

   CreatePropertySheetEntry(  a_oVariableSetupPropertyGroup,
                              "Variable Name",
                              a_sStringPropertyType,
                              "Sets the name of the variable. You should use the variable name only. To declare a variable named 'vec3 MyVector', you set this parameter to 'MyVector'." );

   CreatePropertySheetEntry(  a_oVariableSetupPropertyGroup,
                              "Name Suffix",
                              a_sStringPropertyType,
                              "A variable name suffix, often used to indicate a specific array size such as [4], or to indicate an unsized array []." );

   ////////////////////////////////////////////////////////////////////////////
   // Variable Type Qualifiers Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oVariableTypeQualifiersPropertyGroup = new Group;
   a_oVariableTypeQualifiersPropertyGroup.Name = "Variable Type Qualifiers";
   a_lPropertySheetNodes.AddRef( a_oVariableTypeQualifiersPropertyGroup );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Invariance Qualifier",
                              a_sStringPropertyType,
                              "The invariant qualifier, which applies only to output variables, guarantees the value assigned to the variable regardless of independent compilation." );

   // Begin Interpolation Qualifier Enumeration
   Group a_oInterpolationQualifierEnumeration = new Group;
   a_oInterpolationQualifierEnumeration.Name = "Interpolation Qualifier";
   a_oVariableTypeQualifiersPropertyGroup.AddChild( a_oInterpolationQualifierEnumeration );

   CreatePropertySheetEntry(  a_oInterpolationQualifierEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This option uses no interpolation qualifier. In OpenGL, the default qualifier is usually 'smooth'." );

   CreatePropertySheetEntry(  a_oInterpolationQualifierEnumeration,
                              "Flat",
                              a_sEnumPropertyType,
                              "This option uses no interpolation when vertex shader attributes are sent to a subsequent shader stage." );

   CreatePropertySheetEntry(  a_oInterpolationQualifierEnumeration,
                              "No Perspective",
                              a_sEnumPropertyType,
                              "This option sets linear interpolation, instead of perspective interpolation, for fragments in screenspace." );

   CreatePropertySheetEntry(  a_oInterpolationQualifierEnumeration,
                              "Centroid",
                              a_sEnumPropertyType,
                              "This option is related to multi-sample anti-aliasing options and it controls the location and frequency of sampling." );

   CreatePropertySheetEntry(  a_oInterpolationQualifierEnumeration,
                              "Sample",
                              a_sEnumPropertyType,
                              "This option is related to multi-sample anti-aliasing options and it controls the location and frequency of sampling." );
   // End Interpolation Qualifier Enumeration

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Layout Qualifier Slot 0",
                              a_sStringPropertyType,
                              "Allows you to set a layout qualifier such as 'ccw' or 'location = 1'." );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Layout Qualifier Slot 1",
                              a_sStringPropertyType,
                              "Allows you to set a layout qualifier such as 'ccw' or 'location = 1'." );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Layout Qualifier Slot 2",
                              a_sStringPropertyType,
                              "Allows you to set a layout qualifier such as 'ccw' or 'location = 1'." );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Layout Qualifier Slot 3",
                              a_sStringPropertyType,
                              "Allows you to set a layout qualifier such as 'ccw' or 'location = 1'." );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Precision Qualifier",
                              a_sStringPropertyType,
                              "Allows you to set a precision qualifier such as 'highp', 'mediump', or 'lowp'." );

   CreatePropertySheetEntry(  a_oVariableTypeQualifiersPropertyGroup,
                              "Memory Qualifier",
                              a_sStringPropertyType,
                              "Allows you to set a memory qualifier such as 'coherent', 'volatile', 'restrict', 'readonly', or 'writeonly'." );

   ////////////////////////////////////////////////////////////////////////////
   // Vector Array Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oVectorArrayParametersPropertyGroup = new Group;
   a_oVectorArrayParametersPropertyGroup.Name = "Vector Array Parameters";
   a_lPropertySheetNodes.AddRef( a_oVectorArrayParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oVectorArrayParametersPropertyGroup,
                              "Array Dimension",
                              a_sIntPropertyType,
                              "Sets the dimension of the array. Maximum array size is determined by the OpenGL implementation on the active hardware." );

   CreatePropertySheetEntry(  a_oVectorArrayParametersPropertyGroup,
                              "Vector 0, Vector 1, ... Vector N",
                              a_sFloatPropertyType,
                              "Sets the float value for every component of each vector in the array." );

   ////////////////////////////////////////////////////////////////////////////
   // Vector Parameters Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oVectorParametersPropertyGroup = new Group;
   a_oVectorParametersPropertyGroup.Name = "Vector Parameters";
   a_lPropertySheetNodes.AddRef( a_oVectorParametersPropertyGroup );

   CreatePropertySheetEntry(  a_oVectorParametersPropertyGroup,
                              "X or R or S",
                              a_sFloatPropertyType,
                              "The value of the vector component." );

   CreatePropertySheetEntry(  a_oVectorParametersPropertyGroup,
                              "Y or G or T",
                              a_sFloatPropertyType,
                              "The value of the vector component." );

   CreatePropertySheetEntry(  a_oVectorParametersPropertyGroup,
                              "Z or B or P",
                              a_sFloatPropertyType,
                              "The value of the vector component." );

   CreatePropertySheetEntry(  a_oVectorParametersPropertyGroup,
                              "W or A or Q",
                              a_sFloatPropertyType,
                              "The value of the vector component." );

   ////////////////////////////////////////////////////////////////////////////
   // Viewport Matrix Modes Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oViewportMatrixModesPropertyGroup = new Group;
   a_oViewportMatrixModesPropertyGroup.Name = "Viewport Matrix Modes";
   a_lPropertySheetNodes.AddRef( a_oViewportMatrixModesPropertyGroup );

   // Begin Modes Enumeration
   Group a_oViewportMatrixModesEnumeration = new Group;
   a_oViewportMatrixModesEnumeration.Name = "Mode";
   a_oViewportMatrixModesPropertyGroup.AddChild( a_oViewportMatrixModesEnumeration );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "Model",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelView",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewProjection",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewProjectionInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewProjectionInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ModelViewProjectionTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "Projection",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ProjectionInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ProjectionInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ProjectionTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "View",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewProjection",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewProjectionInverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewProjectionInverseTranspose",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "ViewProjectionTransverse",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   CreatePropertySheetEntry(  a_oViewportMatrixModesEnumeration,
                              "PreviousViewProjection",
                              a_sEnumPropertyType,
                              "This option is undocumented at present." );

   // End Modes Enumeration

   ////////////////////////////////////////////////////////////////////////////
   // Viewport Float Modes Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oViewportFloatModesPropertyGroup = new Group;
   a_oViewportFloatModesPropertyGroup.Name = "Viewport Float Modes";
   a_lPropertySheetNodes.AddRef( a_oViewportFloatModesPropertyGroup );

   // Begin Modes Enumeration
   Group a_oViewportFloatModesEnumeration = new Group;
   a_oViewportFloatModesEnumeration.Name = "Mode";
   a_oViewportFloatModesPropertyGroup.AddChild( a_oViewportFloatModesEnumeration );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportWidth",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the viewport width in pixels." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportHeight",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the viewport height in pixels." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportWidthInverse",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the inverse of the viewport width in pixels. 1.0 / viewport width." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportHeightInverse",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the inverse of the viewport height in pixels. 1.0 / viewport height" );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "NearClipPlane",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the near clipping plane in world space database units." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "FarClipPlane",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the far clipping plane in world space database units." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "FieldOfView",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the field of view, which is ( viewport height / viewport width )" );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportLeft",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the current rendering viewport left x coordinate, in device units, which are typically pixels." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "ViewportTop",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the current rendering viewport top y coordinate, in device units, which are typically pixels." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "FrameWidth",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the frame width in pixels." );

   CreatePropertySheetEntry(  a_oViewportFloatModesEnumeration,
                              "FrameHeight",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the frame height in pixels." );
   
   // End Modes Enumeration

   ////////////////////////////////////////////////////////////////////////////
   // Viewport Vector Modes Property Group
   ////////////////////////////////////////////////////////////////////////////

   Group a_oViewportVectorModesPropertyGroup = new Group;
   a_oViewportVectorModesPropertyGroup.Name = "Viewport Vector Modes";
   a_lPropertySheetNodes.AddRef( a_oViewportVectorModesPropertyGroup );

   // Begin Modes Enumeration
   Group a_oViewportVectorModesEnumeration = new Group;
   a_oViewportVectorModesEnumeration.Name = "Viewport Vector Modes";
   a_oViewportVectorModesPropertyGroup.AddChild( a_oViewportVectorModesEnumeration );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "None",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute nothing at all." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Viewport Near/Far Clip Planes",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the viewport near and far clip planes and stores the results in a vec2." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Viewport Width/Height",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the viewport width and height in pixels and stores the results in a vec2." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Viewport Width/Height and Near/Far Clip Plane",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the viewport width and height and near and far clip plane and stores the results in a vec4." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Viewport Width/Height Inverse",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the inverse of the viewport width and height in pixels and stores the results in a vec2." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Frame Width/Height",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the frame width and height in pixels and stores the results in a vec2." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Frame Width/Height Inverse",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the inverse of the frame width and height in pixels and stores the results in a vec2." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Camera Position",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the camera position and stores the results in a vec4." );

   CreatePropertySheetEntry(  a_oViewportVectorModesEnumeration,
                              "Camera Orientation",
                              a_sEnumPropertyType,
                              "This option sets the mode to compute the camera orientation and stores the results in a vec4." );

   // End Modes Enumeration

   ////////////////////////////////////////////////////////////////////////////
   // Finishing
   ////////////////////////////////////////////////////////////////////////////

   // Add documentation Group to the model.
   for( int nodes = 0; nodes < a_lPropertySheetNodes.GetCount(); ++nodes )
   {
      Node a_oIsPropertySheetPropertyGroup = (Node)a_lPropertySheetNodes.Get( nodes );
      if( a_oIsPropertySheetPropertyGroup && a_oIsPropertySheetPropertyGroup.IsDerived( Group ) )
      {
         Group a_oPropertySheetPropertyGroup = (Group)a_oIsPropertySheetPropertyGroup;
         a_oPropertySheetPropertyGroup.Visible = false;
         p_oPropertyDatabase.AddChild( a_oPropertySheetPropertyGroup );
      }
   }

   /*
   // Send out some useful statistics.
   int a_iTotalPropertyCount =   g_iBoolPropertyCount   + g_iEnumPropertyCount   + g_iIntPropertyCount      + g_iFloatPropertyCount +
                                 g_iStringPropertyCount + g_iColorPropertyCount  + g_iFilePathPropertyCount + g_iNodePropertyCount;

   string a_sPropertyStatistics;
   a_sPropertyStatistics += "\nProperty Sheet Statistics\n";
   a_sPropertyStatistics += "Bool property count:      " + g_iBoolPropertyCount + "\n";
   a_sPropertyStatistics += "Enum property count:      " + g_iEnumPropertyCount + "\n";
   a_sPropertyStatistics += "Int property count:       " + g_iIntPropertyCount + "\n";
   a_sPropertyStatistics += "Float property count:     " + g_iFloatPropertyCount + "\n";
   a_sPropertyStatistics += "String property count:    " + g_iStringPropertyCount + "\n";
   a_sPropertyStatistics += "Color property count:     " + g_iColorPropertyCount + "\n";
   a_sPropertyStatistics += "File path property count: " + g_iFilePathPropertyCount + "\n";
   a_sPropertyStatistics += "Node path property count: " + g_iNodePropertyCount + "\n";
   a_sPropertyStatistics += "Total property count: " + a_iTotalPropertyCount + "\n";
   a_sPropertyStatistics += "Property group count: " + a_lPropertySheetNodes.GetCount();

   Console.Message( a_sPropertyStatistics );
   */

   // Reset global counters.
   g_iBoolPropertyCount = 0;
   g_iEnumPropertyCount = 0;
   g_iIntPropertyCount = 0;
   g_iFloatPropertyCount = 0;
   g_iStringPropertyCount = 0;
   g_iColorPropertyCount = 0;
   g_iFilePathPropertyCount = 0;
   g_iNodePropertyCount = 0;

   // Clean up!
   return a_iSuccess;
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function string GetPropertySheetDocumentationFromFile( Node p_oPropertySheetDocumentationRoot, string p_sPropertyGroupName )
{
   string a_sPropertySheetDocumentationDatabaseContents;
   string a_sPropertySheetItemDocs;

   if( p_oPropertySheetDocumentationRoot && p_oPropertySheetDocumentationRoot.IsDerived( Group ) )
   {
      Group a_oPropertySheetDocumentationRoot = (Group)p_oPropertySheetDocumentationRoot;
      for( int propertyGroups = 0; propertyGroups < a_oPropertySheetDocumentationRoot.ChildCount; ++propertyGroups )
      {
         Node a_oIsChildDocumentationNode = (Node)a_oPropertySheetDocumentationRoot.Children[propertyGroups];
         if( a_oIsChildDocumentationNode.Name == p_sPropertyGroupName )
         {
            if( a_oIsChildDocumentationNode && a_oIsChildDocumentationNode.IsDerived( Group ) )
            {
               Group a_oChildDocumentationNode = (Group)a_oIsChildDocumentationNode;
               a_sPropertySheetDocumentationDatabaseContents += "   <tr class=\"propertygroup\">\n";
               a_sPropertySheetDocumentationDatabaseContents +="       <td>" + p_sPropertyGroupName + "<\/td>\n";
               a_sPropertySheetDocumentationDatabaseContents +="       <td>Property Description</td>\n";
               a_sPropertySheetDocumentationDatabaseContents += "   <\/tr>\n";

               for( int properties = 0; properties < a_oChildDocumentationNode.ChildCount; ++properties )
               {
                  Node a_oIsDocumentationEntry = (Node)a_oChildDocumentationNode.Children[properties];

                  if( a_oIsDocumentationEntry && a_oIsDocumentationEntry.IsDerived( StringNode ) )
                  {
                     StringNode a_oDocumentationEntry = (StringNode)a_oIsDocumentationEntry;
                     a_sPropertySheetItemDocs += a_oDocumentationEntry.Value + "\n";
                     string a_sPropertyTitle = "<a style=\"text-decoration:none;color:rgb(32,32,32);\" title=\"" + a_oDocumentationEntry.Variable + "\">" + a_oDocumentationEntry.Name + "<\/a>";
                     a_sPropertySheetDocumentationDatabaseContents += "   <tr>\n";
                     a_sPropertySheetDocumentationDatabaseContents += "      <td>" + a_sPropertyTitle + "<\/td>\n";
                     a_sPropertySheetDocumentationDatabaseContents += "      <td>" + a_oDocumentationEntry.Value + "<\/td>\n";
                     a_sPropertySheetDocumentationDatabaseContents += "   <\/tr>\n";
                  }
                  else
                  if( a_oIsDocumentationEntry && a_oIsDocumentationEntry.IsDerived( Group ) )
                  {
                     Group a_oEnumerationContainer = (Group)a_oIsDocumentationEntry;
                     if( a_oEnumerationContainer.ChildCount )
                     {
                        string a_sPropertyTitle = "<a style=\"text-decoration:none;color:rgb(32,32,32);\" title=\"enum\">" + a_oEnumerationContainer.Name + "<\/a>";
                        a_sPropertySheetDocumentationDatabaseContents += "   <tr>\n";
                        a_sPropertySheetDocumentationDatabaseContents += "      <td>" + a_sPropertyTitle + "<\/td>\n";
                        a_sPropertySheetDocumentationDatabaseContents += "      <td>" + a_oEnumerationContainer.ID + "\n";
                        a_sPropertySheetDocumentationDatabaseContents += "         <ul class=\"tabled_ul\">\n";
                        
                        for( int enumerationItems = 0; enumerationItems < a_oEnumerationContainer.ChildCount; ++enumerationItems )
                        {
                           Node a_oIsEnumerationItem = (Node)a_oEnumerationContainer.Children[enumerationItems];
                           if( a_oIsEnumerationItem && a_oIsEnumerationItem.IsDerived( StringNode ) )
                           {
                              StringNode a_oEnumerationItem = (StringNode)a_oIsEnumerationItem;
                              string a_sItem = "<b>" + a_oEnumerationItem.Name + "<\/b>. ";
                              string a_sItemDoc = a_oEnumerationItem.Value;
                              a_sPropertySheetDocumentationDatabaseContents += "            <li class=\"nobullet\" style=\"font-size:9.5pt;\">" + a_sItem + a_sItemDoc + "<\/li>\n";
                           }
                        }

                        a_sPropertySheetDocumentationDatabaseContents += "         <\/ul>\n";
                        a_sPropertySheetDocumentationDatabaseContents += "      <\/td>\n";
                        a_sPropertySheetDocumentationDatabaseContents += "   <\/tr>\n";
                     }
                  }
               }
            }
         }
      }
   }

   if( a_sPropertySheetDocumentationDatabaseContents == "" )
   {
      Console.Message( "Unable to find the following property group: " + p_sPropertyGroupName );
   }

   //Console.Message( a_sPropertySheetItemDocs );
   return a_sPropertySheetDocumentationDatabaseContents;
}

///////////////////////////////////////////////////////////////////////////////
// function
///////////////////////////////////////////////////////////////////////////////

function string CreatePropertySheetDocument( string p_sNodeName,
   string p_sPropertySheetDocumentationAbsoluteFilePath,
   string p_sNodeDocumentationAddress, StrList p_slMessageText,
   IntArray p_aiMessageCodes )
{
   string a_sPropertySheetDocumentation;
   string a_sAbsoluteFilePath = p_sNodeDocumentationAddress +
      "Sheets\\node_property_sheets.box";

   if( Application.FileExists( a_sAbsoluteFilePath ) == false )
   {
      //** HEY
      // Fixme. Need to implement proper error checking.
      Console.Message( "---- Does Not Exist " + a_sAbsoluteFilePath );
   }
   
   // Open the BOX document that contains all the property sheet layouts.
   auto Model3D a_oPropertySheetDocumentationLayoutDatabase;
   a_oPropertySheetDocumentationLayoutDatabase.OpenFile( a_sAbsoluteFilePath );
   
   string a_sPropertySheetIncludeDocsFolder = "Content\\";
   string a_sPropertySheetIncludeFileName = Application.GetStrippedFileName( p_sPropertySheetDocumentationAbsoluteFilePath ) + ".txt";
   string a_sPropertySheetIncludeAbsoluteFilePath = p_sNodeDocumentationAddress + a_sPropertySheetIncludeDocsFolder + a_sPropertySheetIncludeFileName;
   //Console.Message( a_sPropertySheetIncludeFileName );

   if( a_oPropertySheetDocumentationLayoutDatabase )
   {
      // Include this documentation for every node, since all nodes are derived from Node and have
      // the following properties at minimum.

      a_sPropertySheetDocumentation += "<table>\n";
      a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Name" );

      if( p_sNodeName == "AddChannelModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Add Mesh Channel" );
      }
      else
      if( p_sNodeName == "AttributeChannelModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "BevelModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Bevel" );
      }
      else
      if( p_sNodeName == "BevelVertexModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Bevel/Extrude Vertex" );
      }
      else
      if( p_sNodeName == "BooleanNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Boolean Parameters" );
      }
      else
      if( p_sNodeName == "BoxPrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Box Properties" );
      }
      else
      if( p_sNodeName == "CalculateNormalsModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "CalculateNormalsModifier Properties" );
      }
      else
      if( p_sNodeName == "Camera" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Camera Behavior" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Camera Settings" );
      }
      else
      if( p_sNodeName == "CategoryGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "CirclePrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Circle Properties" );
      }
      else
      if( p_sNodeName == "ClearBuffersNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Buffer Flags" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Clear Values" );
      }
      else
      if( p_sNodeName == "CollapseVertexModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "ColorArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Color Array Parameters" );
      }
      else
      if( p_sNodeName == "ColorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Color Parameters" );
      }
      else
      if( p_sNodeName == "ConnectModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "ContainerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Container Parameters" );
      }
      else
      if( p_sNodeName == "CylinderPrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Cylinder Properties" );
      }
      else
      if( p_sNodeName == "DeclareFunctionNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "DeclareFunctionNode Code Formatting" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Function Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Subroutine Inputs" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Function Construction" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Function Parameter" );
      }
      else
      if( p_sNodeName == "DelaunayModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DelaunayModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Trimming Options" );
      }
      else
      if( p_sNodeName == "DeleteFaceModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DependencyGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "DisplaceModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Displace Options" );
      }
      else
      if( p_sNodeName == "DissolveFaceModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DissolveModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DissolveTriangleEdgesModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DynamicBooleanNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Boolean Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Boolean" );
      }
      else
      if( p_sNodeName == "DynamicColorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Color Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Color" );
      }
      else
      if( p_sNodeName == "DynamicFloatNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Float" );
      }
      else
      if( p_sNodeName == "DynamicIntegerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Integer" );
      }
      else
      if( p_sNodeName == "DynamicLightArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "DynamicLightArrayNode Options" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Array Member Properties" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Array Member Color" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Array Member Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Array Member Physics" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Array Member Flags" );
      }
      else
      if( p_sNodeName == "DynamicMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "DynamicSamplerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Sampler Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Sampler" );
      }
      else
      if( p_sNodeName == "DynamicTextureModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "DynamicVectorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Vector" );
      }
      else
      if( p_sNodeName == "EdgeModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Split Edge" );
      }
      else
      if( p_sNodeName == "ExportOptionsModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Export Options" );
      }
      else
      if( p_sNodeName == "ExpressionNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Expression Configuration" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Expression Code" );
      }
      else
      if( p_sNodeName == "Extrude" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Extrude" );
      }
      else
      if( p_sNodeName == "FaceAttributeModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "FileNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "FileNode Options" );
      }
      else
      if( p_sNodeName == "FloatArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Array Parameters" );
      }
      else
      if( p_sNodeName == "FloatNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
      }
      else
      if( p_sNodeName == "FolderGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "FrameBuffer" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "FrameBufferBind" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Bind Texture Settings" );
      }
      else
      if( p_sNodeName == "GeographicProjectionModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Geographic Projection" );
      }
      else
      if( p_sNodeName == "GeographicTextureModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Geographic Projection" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Geographic Texture" );
      }
      else
      if( p_sNodeName == "Group" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "InputNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Iterator Connections" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Conditional Code Generation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Code Formatting" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Configuration" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Vector Options" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Matrix Options" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Array Options" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "InputNode Type Aggregator Options" );
      }
      else
      if( p_sNodeName == "InsertQuadCenterVertexModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "InsertTriangleIntoTriangleModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "InsertVertexModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "IntegerArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Array Parameters" );
      }
      else
      if( p_sNodeName == "IntegerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
      }
      else
      if( p_sNodeName == "IteratorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "IteratorNode Code Formatting" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "IteratorNode Setup" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Initialize Expression" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Condition Expression" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Loop Expression" );
      }
      else
      if( p_sNodeName == "LOD" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Switching Options" );
      }
      else
      if( p_sNodeName == "Light" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Color" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Physics" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Flags" );
      }
      else
      if( p_sNodeName == "LightBooleanNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Boolean Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Boolean" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Boolean Modes" );
      }
      else
      if( p_sNodeName == "LightCameraStateNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Camera State" );
      }
      else
      if( p_sNodeName == "LightColorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Color Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Color" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Color Modes" );
      }
      else
      if( p_sNodeName == "LightCountNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Integer" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Count Modes" );
      }
      else
      if( p_sNodeName == "LightFloatNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Float" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Float Modes" );
      }
      else
      if( p_sNodeName == "LightIntegerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Integer" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Integer Modes" );
      }
      else
      if( p_sNodeName == "LightMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Matrix Modes" );
      }
      else
      if( p_sNodeName == "LightModelViewCameraMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "LightModelViewMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "LightProjectionCameraMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "LightProjectionMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "LightStackNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Stack Parameters" );
      }
      else
      if( p_sNodeName == "LightVectorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Vector" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Light Vector Modes" );
      }
      else
      if( p_sNodeName == "LoftPrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Loft Properties" );
      }
      else
      if( p_sNodeName == "Material" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Texture Data Sources" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Shader Program And Public Uniform Data Sources" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Material Physics" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Rendering Pipeline Parameters" );
      }
      else
      if( p_sNodeName == "MaterialColorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Color Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Color" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Material Color Modes" );
      }
      else
      if( p_sNodeName == "MaterialFloatNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Float" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Material Float Modes" );
      }
      else
      if( p_sNodeName == "MaterialIntegerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Integer" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Material Integer Modes" );
      }
      else
      if( p_sNodeName == "MaterialModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "MaterialModifier Options" );
      }
      else
      if( p_sNodeName == "MatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
      }
      else
      if( p_sNodeName == "MergeFacesModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Merge Source Mesh Options" );
      }
      else
      if( p_sNodeName == "Mesh" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Material Palette" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Guides" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Collisions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh On Render" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Vertex Attribute Channels" );
      }
      else
      if( p_sNodeName == "Model3D" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Database Unit Labels And Precision" );
      }
      else
      if( p_sNodeName == "NodeLink" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Internal Link Settings" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "External Link Settings" );
      }
      else
      if( p_sNodeName == "NormalTranslateModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Translate Along Normal" );
      }
      else
      if( p_sNodeName == "OrthoProjectionMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
      }
      else
      if( p_sNodeName == "ParametricMesh" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Material Palette" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Guides" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Collisions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh On Render" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Mesh Vertex Attribute Channels" );
      }
      if( p_sNodeName == "Path" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Path Material Palette" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Segment" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Point" );
      }
      else
      if( p_sNodeName == "PlanarProjectTexturePrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Channel Selector" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Planar Project Texture" );
      }
      else
      if( p_sNodeName == "Program" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Program Source Code" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Program Data Sources" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Geometry Program Options" );
      }
      else
      if( p_sNodeName == "ProgramOptions" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      if( p_sNodeName == "ProgramVariationNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Program Variation Source Code" );
      }
      else
      if( p_sNodeName == "ProjectGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "ProjectionModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Geographic Projection" );
      }
      else
      if( p_sNodeName == "RectanglePrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Rectangle Properties" );
      }
      else
      if( p_sNodeName == "RectanglePrimitiveVectorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Vector" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "RectanglePrimitive Vector Modes" );
      }
      else
      if( p_sNodeName == "ReferenceGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "RemoveChannelModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Remove Mesh Channel" );
      }
      else
      if( p_sNodeName == "RenderStateNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Render Traversal Control" );
      }
      else
      if( p_sNodeName == "SamplerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Sampler Parameters" );
      }
      else
      if( p_sNodeName == "ScreenAlignedGeometryNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Render Traversal Control" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Screen Projection Options" );
      }
      else
      if( p_sNodeName == "ScriptNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Script Options" );
      }
      else
      if( p_sNodeName == "SimplifyModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Simplify Options" );
      }
      else
      if( p_sNodeName == "SmoothModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "SpherePrimitive" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Sphere Properties" );
      }
      else
      if( p_sNodeName == "StatementNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Statement Parameters" );
      }
      else
      if( p_sNodeName == "StencilNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Render Traversal Control" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Stencil State" );
      }
      else
      if( p_sNodeName == "StringNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "String Parameters" );
      }
      else
      if( p_sNodeName == "StructureGroup" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Render Traversal Control" );
      }
      else
      if( p_sNodeName == "SubdivideQuadModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "SubdivideQuadModifier Options" );
      }
      else
      if( p_sNodeName == "SubroutineIntegerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Integer Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Integer" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Subroutine Integer Modes" );
      }
      else
      if( p_sNodeName == "SweepModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Sweep Properties" );
      }
      else
      if( p_sNodeName == "TerrainOptionsModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Texture Settings For This Mesh" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Texture Settings For Terrain Created By This Preview Mesh" );
      }
      else
      if( p_sNodeName == "Texture" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Texture Options" );
      }
      else
      if( p_sNodeName == "TextureCoordsModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Channel Selector" );
      }
      else
      if( p_sNodeName == "TimerNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Timer Modes" );
      }
      else
      if( p_sNodeName == "ToggleVertexSpokeEdgesModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "TransformModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "TransformModifier Options" );
      }
      else
      if( p_sNodeName == "TriangulateModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "TurnEdgeModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );
      }
      else
      if( p_sNodeName == "TypeAggregatorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "TypeAggregatorNode Code Formatting" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "TypeAggregatorNode Setup" );
      }
      else
      if( p_sNodeName == "UniformBufferBindNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "UniformBufferBindNode Settings" );
      }
      else
      if( p_sNodeName == "UniformBufferNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Traversal" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Bounding Box" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Group Transformation" );
      }
      else
      if( p_sNodeName == "VariableArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
      }
      else
      if( p_sNodeName == "VariableNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
      }
      else
      if( p_sNodeName == "VectorArrayNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Array Parameters" );
      }
      else
      if( p_sNodeName == "VectorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Parameters" );
      }
      else
      if( p_sNodeName == "ViewMatrixNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Dimensions" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Matrix Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Matrix" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Viewport Matrix Modes" );
      }
      else
      if( p_sNodeName == "ViewportFloatNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Float Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Float" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Viewport Float Modes" );
      }
      else
      if( p_sNodeName == "ViewportVectorNode" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Setup Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Variable Type Qualifiers" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Vector Parameters" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Dynamic Vector" );
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Viewport Vector Modes" );
      }
      else
      if( p_sNodeName == "WeldVertexModifier" )
      {
         a_sPropertySheetDocumentation += GetPropertySheetDocumentationFromFile( a_oPropertySheetDocumentationLayoutDatabase, "Modifier" );

         // Finis~
      }

      a_sPropertySheetDocumentation += "<\/table>\n";

      TextFile n_oPropertySheetInclude = new TextFile;
      
      if( n_oPropertySheetInclude.Open( a_sPropertySheetIncludeAbsoluteFilePath, 0 ) )
      {
         // Save the file, close it, and clean up.
         n_oPropertySheetInclude.Write( a_sPropertySheetDocumentation );
         n_oPropertySheetInclude.Close();
      }
      else
      {
         p_slMessageText.Add( a_sPropertySheetIncludeFileName );
         p_aiMessageCodes.Add( 3 );
      }

      delete n_oPropertySheetInclude;
   }
   else
   {
      p_slMessageText.Add( a_sAbsoluteFilePath );
      p_aiMessageCodes.Add( 3 );
   }

   return a_sPropertySheetDocumentation;
}
