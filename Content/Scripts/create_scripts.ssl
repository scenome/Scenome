////////////////////////////////////////////////////////////////////////////////
// $file             CREATE_SCRIPTS.SSL
// $author           Scenomics LLC
// $privacy          PUBLIC
// $description      This script file contains several functions and helper scripts for creating basic nodes, including groups, materials, lights, and meshes.
// $legal            Reserved * r_rLegal
//
// Copyright 2004-2014 Scenomics LLC. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////

import library "create_util.ssl";
import library "expression_util.ssl";
import library "file_util.ssl";
import library "graph_util.ssl";
import library "main_util.ssl";
import library "menu_util.ssl";
import library "message_util.ssl";
import library "opengl_util.ssl";
import library "select_util.ssl";
import library "template_util.ssl";
import library "variable_util.ssl";

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////
 
function void CreateGroupAbove_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Group" );
}

macro CreateGroupAbove()
[Category="Create Commands", Guid="{64E236E9-8F0F-478B-B4CC-225B217D1C2B}", Image=".\\icons\\new_group.bmp"]
{
   Graph.CreatePositionedGroupDerivedNode( Group, "above" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////
 
function void CreateGroupBelow_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Group" );
}

macro CreateGroupBelow()
[Category="Create Commands", Guid="{319104F6-541F-4E25-A486-C9112A90D281}", Image=".\\icons\\new_group.bmp"]
{
   Graph.CreatePositionedGroupDerivedNode( Group, "below" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateCollectionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   bool enabled = false;
   string hint;
   if( Model.GetSelectCount() )
   {
      enabled = true;
      hint = "Create a new Collection";
   }
   else
   {
      hint = "To enable this command, select at least one node";
   }
   commandInfo.SetEnabled( enabled );
   commandInfo.Status.SetHint( hint );
}

macro CreateCollectionNode()
[Category="Create Commands", Guid="{1F9220FB-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\selection_set.bmp"]
{
   if( Model.GetSelectCount() )
   {
      Model3DSelectBuffer selBuffer = Model.GetSelectBuffer();
      List selNodes = selBuffer.GetSelectedNodes();

      Group defaultParent = Model.GetActiveParent();

      CollectionNode collectionNode = new CollectionNode;
      collectionNode.Name = "NewSelectionSetNode";

      collectionNode.SetCollection( selNodes );

      Model.DeselectAll();
      Model.AddNode( collectionNode, defaultParent, -1 );
      Model.Select( collectionNode );
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateCameraNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Camera" );
}

macro CreateCameraNode()
[Category="Create Commands", Guid="{5BBF19F9-793F-47C8-BB34-8199507F3855}", Image=".\\icons\\create_camera_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, Camera, "NewCameraNode", nodes, -1 );

   ModelView a_oView = Model.ActiveView;

   // Configure the new camera nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      Camera newCamera = (Camera)nodes.Get( i );
      newCamera.Name = "Camera.New";

      if( a_oView.GetProjection() == 0 )
      {
         newCamera.SetPerspective();
         newCamera.Name = "Camera.Perspective";
      }

      if( a_oView.GetProjection() == 2 )
      {
         newCamera.SetTop();
         newCamera.Name = "Camera.Top";
      }

      if( a_oView.GetProjection() == 3 )
      {
         newCamera.SetFront();
         newCamera.Name = "Camera.Front";
      }

      if( a_oView.GetProjection() == 4 )
      {
         newCamera.SetSide();
         newCamera.Name = "Camera.Side";
      }

      Matrix cameraTransform = new Matrix;
      cameraTransform.Position[0] = a_oView.Position.X;
      cameraTransform.Position[1] = a_oView.Position.Y;
      cameraTransform.Position[2] = a_oView.Position.Z;
      cameraTransform.Orientation[0] = a_oView.Orientation.X;
      cameraTransform.Orientation[1] = a_oView.Orientation.Y;
      cameraTransform.Orientation[2] = a_oView.Orientation.Z;
      newCamera.SetTransform( cameraTransform );

      newCamera.Zoom = a_oView.Zoom;
      newCamera.NearClip = a_oView.NearClip;
      newCamera.FarClip = a_oView.FarClip;
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMeshNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ParametricMesh" );
}

macro CreateMeshNode()
[Category="Create Commands", Guid="{1F91F920-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_parametric_mesh.bmp"]
{
   // ** REFACTOR
   //List nodes;
   //ValidateNodeCreateContext.CreateNodes( Model, ParametricMesh, "NewParametricMeshNode", nodes, -1 );
   Group a_oGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   ParametricMesh a_oMesh = new ParametricMesh;
   a_oMesh.Name = "Mesh";
   Model.AddNode( a_oMesh, a_oGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Light" );
}

macro CreateLightNode()
[Category="Create Commands", Guid="{1F91F917-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\new_light.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, Light, "NewPointLightNode", nodes, 0 );

   // Configure the light nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      Light light = (Light)nodes.Get( i );
      light.Type = 0;
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDynamicSamplerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SamplerNode" );
}

macro CreateDynamicSamplerNode()
[Category="Create Commands", Guid="{76E6616A-5485-4152-991E-F21252C39E40}", Image=".\\icons\\new_sampler_node.bmp"]
{
   int a_nSelIndex = 0;
   List nodes = new List;
   Group a_oSelGroup = (Group)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   int a_nSamplerIndex = Create.GetSamplerIndex( a_oSelGroup );
   string a_sVariable = "SPA_Texture" + a_nSamplerIndex;
   ValidateNodeCreateContext.CreateNodes( Model, DynamicSamplerNode, a_sVariable, nodes, -1 );

   for( int a_nIndex = 0; a_nIndex < nodes.GetCount(); ++a_nIndex )
   {
      DynamicSamplerNode a_oSamplerNode = (DynamicSamplerNode)nodes.Get( a_nIndex );
      a_oSamplerNode.MakeUniform();
      a_oSamplerNode.Variable = a_sVariable;
      a_oSamplerNode.Name = a_oSamplerNode.GetDeclarationString();
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSamplerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SamplerNode" );
}

macro CreateSamplerNode()
[Category="Create Commands", Guid="{CADE968D-7305-4E73-A29B-FC803CB1B6B7}", Image=".\\icons\\new_sampler_node.bmp"]
{
   int a_nSelIndex = 0;
   List nodes = new List;
   Group a_oSelGroup = (Group)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   int a_nSamplerIndex = Create.GetSamplerIndex( a_oSelGroup );
   string a_sVariable = "SPA_Texture" + a_nSamplerIndex;
   ValidateNodeCreateContext.CreateNodes( Model, SamplerNode, a_sVariable, nodes, -1 );

   for( int a_nIndex = 0; a_nIndex < nodes.GetCount(); ++a_nIndex )
   {
      SamplerNode a_oSamplerNode = (SamplerNode)nodes.Get( a_nIndex );
      a_oSamplerNode.MakeUniform();
      a_oSamplerNode.Variable = a_sVariable;
      a_oSamplerNode.Name = a_oSamplerNode.GetDeclarationString();
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLightStackNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SamplerNode" );
}

macro CreateLightStackNode()
[Category="Create Commands", Guid="{C1469087-DCD6-4E3F-8B37-036B5BC05F14}", Image=".\\icons\\new_light_stack_node_icon.bmp"]
{
   List nodes = new List;
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   string a_sVariable = "lights[%i]";
   ValidateNodeCreateContext.CreateNodes( Model, LightStackNode, a_sVariable, nodes, -1 );

   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      LightStackNode a_oLightStackNode = (LightStackNode)nodes.Get( i );
      a_oLightStackNode.MakeUniform();
      a_oLightStackNode.Variable = a_sVariable;
      a_oLightStackNode.Name = "Collect Lights";
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixNodeOfDimension( int p_eCols, int p_eRows, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, MatrixNode, "NewMatrixNode", nodes, -1 );
   Create.ConfigureVariableNodeForSelectionContext( nodes, Create.GetBindingTypeFromSelectionContext() );

   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MatrixNode a_oMatrixNode = (MatrixNode)nodes.Get( i );
      a_oMatrixNode.Variable = p_sVariableName;
      a_oMatrixNode.Cols = p_eCols;
      a_oMatrixNode.Rows = p_eRows;
      a_oMatrixNode.UpdateName();
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateMatrix2x2Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix2x2Node()
[Category="Create Commands", Guid="{749F191E-AE51-4654-A8C2-EB0C4B279ECF}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec2(), "myMat2x2" );
}

function void CreateMatrix2x3Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix2x3Node()
[Category="Create Commands", Guid="{18ED455D-F765-459B-8F06-87E141DC4C9F}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec3(), "myMat2x3" );
}

function void CreateMatrix2x4Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix2x4Node()
[Category="Create Commands", Guid="{2F9A3618-B718-40E9-B491-12191AB824B8}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4(), "myMat2x4" );
}

function void CreateMatrix3x2Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix3x2Node()
[Category="Create Commands", Guid="{DD45A49E-A2F2-4B98-A47D-408744C28105}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec2(), "myMat3x2" );
}

function void CreateMatrix3x3Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix3x3Node()
[Category="Create Commands", Guid="{4D528D36-98DD-401A-9583-4AB401974F2F}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec3(), "myMat3x3" );
}

function void CreateMatrix3x4Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix3x4Node()
[Category="Create Commands", Guid="{613EBC7A-7463-4038-B49C-0BA69E2EF81D}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4(), "myMat3x4" );
}

function void CreateMatrix4x2Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix4x2Node()
[Category="Create Commands", Guid="{C40D004A-3276-4710-AC8B-12B799C021F8}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec2(), "myMat4x2" );
}

function void CreateMatrix4x3Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix4x3Node()
[Category="Create Commands", Guid="{DF66584E-0835-45CA-882D-46FD66FA06C1}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec3(), "myMat4x3" );
}

function void CreateMatrix4x4Node_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrix4x4Node()
[Category="Create Commands", Guid="{AE57B036-420E-4F42-B7E3-629D06AAC4A2}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4(), "myMat4x4" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixArrayNodeOfDimension( int p_eCols, int p_eRows, int p_nCount, string p_sVariableName )
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, MatrixArrayNode, "NewMatrixArrayNode", nodes, -1 );
   Create.ConfigureVariableNodeForSelectionContext( nodes, Create.GetBindingTypeFromSelectionContext() );

   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MatrixArrayNode a_oMatrixArrayNode = (MatrixArrayNode)nodes.Get( i );
      a_oMatrixArrayNode.Variable = p_sVariableName;
      a_oMatrixArrayNode.Cols = p_eCols;
      a_oMatrixArrayNode.Rows = p_eRows;
      a_oMatrixArrayNode.Count = p_nCount;
      a_oMatrixArrayNode.UpdateName();
   }
   Template.ConfigureVariableNodeForSelectionContext( nodes, Template.GetBindingTypeFromSelectionContext() );
   delete nodes;
}

function void CreateMatrixArrayNode2x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode2x2()
[Category="Create Commands", Guid="{CD53B20C-C92C-49E3-B1C0-259F4AD01A06}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec2(), 4, "myMatrixArray2x2" );
}

function void CreateMatrixArrayNode2x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode2x3()
[Category="Create Commands", Guid="{4FB7A796-56D8-4B72-A9F7-C3A6ECFC201D}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec3(), 4, "myMatrixArray2x3" );
}

function void CreateMatrixArrayNode2x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode2x4()
[Category="Create Commands", Guid="{25052D26-21C8-48CD-A93C-4A9956BFECFD}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4(), 4, "myMatrixArray2x4" );
}

function void CreateMatrixArrayNode3x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode3x2()
[Category="Create Commands", Guid="{41E8A4C7-34C2-4EA8-8720-677B75B95EEB}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec2(), 4, "myMatrixArray3x2" );
}

function void CreateMatrixArrayNode3x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode3x3()
[Category="Create Commands", Guid="{38A4AC05-3007-49DB-86CC-F0220C1F4831}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec3(), 4, "myMatrixArray3x3" );
}

function void CreateMatrixArrayNode3x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode3x4()
[Category="Create Commands", Guid="{780FF60D-636F-4DBD-9127-AAA114329C45}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4(), 4, "myMatrixArray3x4" );
}

function void CreateMatrixArrayNode4x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode4x2()
[Category="Create Commands", Guid="{2D5D6F51-37A3-4E0E-AB28-AD51D8836C5D}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec2(), 4, "myMatrixArray4x2" );
}

function void CreateMatrixArrayNode4x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode4x3()
[Category="Create Commands", Guid="{55E095F1-D0BF-4215-BC55-C647D351429C}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec3(), 4, "myMatrixArray4x3" );
}

function void CreateMatrixArrayNode4x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixNode" );
}

macro CreateMatrixArrayNode4x4()
[Category="Create Commands", Guid="{3F2663A7-1C95-4112-B789-20372AA97BF8}", Image=".\\icons\\new_matrix_node.bmp"]
{
   CreateMatrixArrayNodeOfDimension( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4(), 4, "myMatrixArray4x4" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixArrayNode" );
}

macro CreateMatrixArrayNode()
[Category="Create Commands", Guid="{CB57B807-224E-4EBD-8FBF-573F772D8298}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, MatrixArrayNode, "myMatrixArray4x4", nodes, -1 );

   // Configure the material nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      MatrixArrayNode a_oMatrixArrayNode = (MatrixArrayNode)nodes.Get( i );
      a_oMatrixArrayNode.Variable = "myMatrixArray";
      a_oMatrixArrayNode.Count = 4;
      a_oMatrixArrayNode.UpdateName();
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMaterialNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Material" );
}

macro CreateMaterialNode()
[Category="Create Commands", Guid="{1F91F956-F612-46D4-A453-4B81096121A9}", Image=".\\icons\\create_material_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, Material, "NewMaterialNode", nodes, -1 );

   // Configure the material nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      Material material = (Material)nodes.Get( i );
      material.IDColor.SetRGB( 255, 215, 0 );
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTextureNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Texture" );
}

macro CreateTextureNode()
[Category="Create Commands", Guid="{32050BC6-7763-4FDE-BBDB-1F0A0D4C0449}", Image=".\\icons\\new_texture.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, Texture, "NewTextureNode", nodes, -1 );

   // Configure the texture nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      Texture texture = (Texture)nodes.Get( i );
      texture.External = 1;
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLayoutNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LayoutNode" );
}

macro CreateLayoutNode()
[Category="Create Commands", Guid="{4422E897-4FEC-499A-8C8C-40D597D90AD7}", Image=".\\icons\\new_layout_node.bmp"]
{
   List nodes;
   int a_nSelIndex = 0;
   int a_nCreateIndex = -1;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( DeclarationNode ) )
   {
      a_nCreateIndex = 0;
   }
   ValidateNodeCreateContext.CreateNodes( Model, LayoutNode, "layout", nodes, a_nCreateIndex );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLayoutDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Layout Declaration" );
}

macro CreateLayoutDeclarationNode()
[Category="Create Commands", Guid="{EBEC8B0E-2A9A-4D9D-8252-BFD233373FE5}", Image=".\\icons\\new_layout_declaration_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Layout", nodes, -1 );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Layout();
   }

   // Create a LayoutNode
   LayoutNode a_oLayoutNode = new LayoutNode;
   a_oLayoutNode.Name = "Layout";

   // Add the complete declaration to the model.
   Model.AddNode( a_oLayoutNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanNode Declaration" );
}

macro CreateBooleanDeclarationNode()
[Category="Create Commands", Guid="{A6351121-B9DD-44F3-817A-5880C677833C}", Image=".\\icons\\new_bool_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Bool", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Boolean();
   }

   // Create a BooleanNode
   int a_nBindingType = Enum.Binding_Local();
   bool a_bInitialVal = true;
   BooleanNode a_oBooleanNode = Create.CreateBooleanNode( a_nBindingType, "myDeclaredBool", a_bInitialVal );
   Graph.RenameVariable( a_oBooleanNode );
   a_oBooleanNode.Name = a_oBooleanNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oBooleanNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a BooleanExpressionNode
   BooleanExpressionNode a_oBooleanExpressionNode =
      Create.CreateBooleanExpressionNode( "Boolean Expression", Enum.ExpressionSide_Right() );
   a_oBooleanExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oBooleanNode,
                           a_oBooleanExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oBooleanNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBooleanExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanArrayDeclarationNode()
[Category="Create Commands", Guid="{BCBDF9D9-C533-407B-9E56-F467E5079F8F}", Image=".\\icons\\new_bool_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare BoolArray", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Float();
   }

   int a_nArrayDimension = 4;
   BooleanArrayNode a_oBooleanArrayNode = new BooleanArrayNode;
   a_oBooleanArrayNode.MakeLocal();
   a_oBooleanArrayNode.Variable = "myDeclaredBoolArray";
   a_oBooleanArrayNode.Count = a_nArrayDimension;
   Graph.RenameVariable( a_oBooleanArrayNode );
   a_oBooleanArrayNode.Name = a_oBooleanArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oBooleanArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a BooleanArrayExpressionNode
   BooleanArrayExpressionNode a_oBooleanArrayExpressionNode =
      Create.CreateBooleanArrayExpressionNode( "Boolean Array Expression", Enum.ExpressionSide_Right() );
   a_oBooleanArrayExpressionNode.MakeExpression();
   a_oBooleanArrayExpressionNode.Count = a_nArrayDimension;
   a_oBooleanArrayExpressionNode.GenerateExpression( BooleanArrayExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oBooleanArrayNode,
                           a_oBooleanArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oBooleanArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBooleanArrayExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorDeclaration( int p_iDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   string a_sTitle = "Declare Bvec" + p_iDimension;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, a_sTitle, nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   BooleanVectorNode a_oBooleanVectorNode = new BooleanVectorNode;
   a_oBooleanVectorNode.MakeLocal();
   a_oBooleanVectorNode.Variable = "myDeclaredBooleanVector" + p_iDimension;
   a_oBooleanVectorNode.Dimension = p_iDimension;
   a_oBooleanVectorNode.Name = a_oBooleanVectorNode.GetDeclarationString();
   Graph.RenameVariable( a_oBooleanVectorNode );
   a_oBooleanVectorNode.Name = a_oBooleanVectorNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oBooleanVectorNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a BooleanVectorExpressionNode
   BooleanVectorExpressionNode a_oBooleanVectorExpressionNode =
      Create.CreateBooleanVectorExpressionNode( "Boolean Vector Expression", Enum.ExpressionSide_Right(), p_iDimension );
   a_oBooleanVectorExpressionNode.MakeExpression();
   a_oBooleanVectorExpressionNode.GenerateExpression( BooleanVectorExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oBooleanVectorNode,
                           a_oBooleanVectorExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oBooleanVectorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBooleanVectorExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

function void CreateBooleanVector2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector2DeclarationNode()
[Category="Create Commands", Guid="{63C26643-B0A5-4A55-985E-13E220F9A67D}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorDeclaration( 2 );
}

function void CreateBooleanVector3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector3DeclarationNode()
[Category="Create Commands", Guid="{3380E38E-24C4-4C26-A6F0-0C97E83A1499}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorDeclaration( 3 );
}

function void CreateBooleanVector4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector4DeclarationNode()
[Category="Create Commands", Guid="{D073009F-C433-40E5-A41F-D3B90A8951AB}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorDeclaration( 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorArrayDeclaration( int p_nArrayCount, int p_nVectorDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Boolean Vector Array", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   BooleanVectorArrayNode a_oBooleanVectorArrayNode = new BooleanVectorArrayNode;
   a_oBooleanVectorArrayNode.MakeLocal();
   a_oBooleanVectorArrayNode.Variable = "myBvec" + p_nVectorDimension + "Array";
   a_oBooleanVectorArrayNode.Count = p_nArrayCount;
   a_oBooleanVectorArrayNode.VectorDimension = p_nVectorDimension;
   a_oBooleanVectorArrayNode.Name = a_oBooleanVectorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oBooleanVectorArrayNode );
   a_oBooleanVectorArrayNode.Name = a_oBooleanVectorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oBooleanVectorArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerExpressionNode
   BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
      Create.CreateBooleanVectorArrayExpressionNode( "Boolean Vector Array Expression",
         Enum.ExpressionSide_Right(), p_nArrayCount, p_nVectorDimension );
   a_oBooleanVectorArrayExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oBooleanVectorArrayNode,
                           a_oBooleanVectorArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oBooleanVectorArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBooleanVectorArrayExpressionNode, a_oDeclarationNode, -1 );
   delete nodes;
}

function void CreateBooleanVector2ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector2ArrayDeclarationNode()
[Category="Create Commands", Guid="{D98C48CB-40BB-4067-B311-227FAD54342C}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec2() );
}

function void CreateBooleanVector3ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector3ArrayDeclarationNode()
[Category="Create Commands", Guid="{BE637B0E-3DD1-4FE7-BAC0-294D3B29C185}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec3() );
}

function void CreateBooleanVector4ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateBooleanVector4ArrayDeclarationNode()
[Category="Create Commands", Guid="{07CC1C40-A978-4BD8-9010-3838E803DC49}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateBooleanVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerDeclarationNode()
[Category="Create Commands", Guid="{275C607F-53E4-48A6-B126-65C5770D867B}", Image=".\\icons\\new_int_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Int", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Integer();
   }

   int a_nBindingType = Enum.Binding_Local();
   int a_nInitialVal = 1;
   IntegerNode a_oIntegerNode = Create.CreateIntegerNode( a_nBindingType, "myDeclaredInt", a_nInitialVal );
   a_oIntegerNode.Name = a_oIntegerNode.GetDeclarationString();
   Graph.RenameVariable( a_oIntegerNode );
   a_oIntegerNode.Name = a_oIntegerNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oIntegerNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerExpressionNode
   IntegerExpressionNode a_oIntegerExpressionNode =
      Create.CreateIntegerExpressionNode( "Integer Expression", Enum.ExpressionSide_Right() );
   a_oIntegerExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oIntegerNode,
                           a_oIntegerExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oIntegerNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oIntegerExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerArrayDeclarationNode()
[Category="Create Commands", Guid="{8742B2F7-28BC-4C87-9EE7-81525D12A768}", Image=".\\icons\\new_int_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare IntArray", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Integer();
   }

   int a_nArrayDimension = 4;
   IntegerArrayNode a_oIntegerArrayNode = new IntegerArrayNode;
   a_oIntegerArrayNode.MakeLocal();
   a_oIntegerArrayNode.Variable = "myDeclaredIntArray";
   a_oIntegerArrayNode.Count = a_nArrayDimension;
   a_oIntegerArrayNode.Name = a_oIntegerArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oIntegerArrayNode );
   a_oIntegerArrayNode.Name = a_oIntegerArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oIntegerArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerArrayExpressionNode
   IntegerArrayExpressionNode a_oIntegerArrayExpressionNode =
      Create.CreateIntegerArrayExpressionNode( "Integer Array Expression", Enum.ExpressionSide_Right() );
   a_oIntegerArrayExpressionNode.MakeExpression();
   a_oIntegerArrayExpressionNode.Count = a_nArrayDimension;
   a_oIntegerArrayExpressionNode.GenerateExpression( IntegerArrayExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oIntegerArrayNode,
                           a_oIntegerArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oIntegerArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oIntegerArrayExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorDeclaration( int p_iDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   string a_sTitle = "Declare Ivec" + p_iDimension;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, a_sTitle, nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   IntegerVectorNode a_oIntegerVectorNode = new IntegerVectorNode;
   a_oIntegerVectorNode.MakeLocal();
   a_oIntegerVectorNode.Variable = "myDeclaredIntegerVector" + p_iDimension;
   a_oIntegerVectorNode.Dimension = p_iDimension;
   a_oIntegerVectorNode.Name = a_oIntegerVectorNode.GetDeclarationString();
   Graph.RenameVariable( a_oIntegerVectorNode );
   a_oIntegerVectorNode.Name = a_oIntegerVectorNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oIntegerVectorNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a IntegerVectorExpressionNode
   IntegerVectorExpressionNode a_oIntegerVectorExpressionNode =
      Create.CreateIntegerVectorExpressionNode( "Integer Vector Expression", Enum.ExpressionSide_Right(), p_iDimension );
   a_oIntegerVectorExpressionNode.MakeExpression();
   a_oIntegerVectorExpressionNode.GenerateExpression( IntegerVectorExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oIntegerVectorNode,
                           a_oIntegerVectorExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oIntegerVectorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oIntegerVectorExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

function void CreateIntegerVector2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector2DeclarationNode()
[Category="Create Commands", Guid="{452B9C21-3FAB-4DD0-8706-93075DB53BA5}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorDeclaration( 2 );
}

function void CreateIntegerVector3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector3DeclarationNode()
[Category="Create Commands", Guid="{08FD6D2C-DE6F-4A71-9F52-FC8A7C01A989}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorDeclaration( 3 );
}

function void CreateIntegerVector4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector4DeclarationNode()
[Category="Create Commands", Guid="{C32C302C-98AB-4FFD-A3ED-CE71F1D04E1D}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorDeclaration( 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorArrayDeclaration( int p_nArrayCount, int p_nVectorDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Integer Vector Array", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   IntegerVectorArrayNode a_oIntegerVectorArrayNode = new IntegerVectorArrayNode;
   a_oIntegerVectorArrayNode.MakeLocal();
   a_oIntegerVectorArrayNode.Variable = "myIvec" + p_nVectorDimension + "Array";
   a_oIntegerVectorArrayNode.Count = p_nArrayCount;
   a_oIntegerVectorArrayNode.VectorDimension = p_nVectorDimension;
   a_oIntegerVectorArrayNode.Name = a_oIntegerVectorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oIntegerVectorArrayNode );
   a_oIntegerVectorArrayNode.Name = a_oIntegerVectorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oIntegerVectorArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerExpressionNode
   IntegerVectorArrayExpressionNode a_oIntegerVectorArrayExpressionNode =
      Create.CreateIntegerVectorArrayExpressionNode( "Integer Vector Array Expression",
         Enum.ExpressionSide_Right(), p_nArrayCount, p_nVectorDimension );
   a_oIntegerVectorArrayExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oIntegerVectorArrayNode,
                           a_oIntegerVectorArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oIntegerVectorArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oIntegerVectorArrayExpressionNode, a_oDeclarationNode, -1 );
   delete nodes;
}

function void CreateIntegerVector2ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector2ArrayDeclarationNode()
[Category="Create Commands", Guid="{5F7CEA3A-36DF-4E61-974B-5413A804D1ED}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec2() );
}

function void CreateIntegerVector3ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector3ArrayDeclarationNode()
[Category="Create Commands", Guid="{206D4260-9F07-4699-A7EE-191AD3C09FF7}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec3() );
}

function void CreateIntegerVector4ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateIntegerVector4ArrayDeclarationNode()
[Category="Create Commands", Guid="{FAE4D322-7651-48FC-8A6F-259A42D99BED}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerNode Declaration" );
}

macro CreateUnsignedIntegerDeclarationNode()
[Category="Create Commands", Guid="{0063AC7C-7E92-4545-966E-E9E09EE25A0F}", Image=".\\icons\\new_int_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Uint", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Integer();
   }

   // Create a UnsignedIntegerNode
   int a_nBindingType = Enum.Binding_Local();
   int a_iInitialVal = 1;
   UnsignedIntegerNode a_oUnsignedIntegerNode =
      Create.CreateUnsignedIntegerNode( a_nBindingType, "myDeclaredUint", a_iInitialVal );
   Graph.RenameVariable( a_oUnsignedIntegerNode );
   a_oUnsignedIntegerNode.Name = a_oUnsignedIntegerNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oUnsignedIntegerNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a UnsignedIntegerExpressionNode
   UnsignedIntegerExpressionNode a_oUnsignedIntegerExpressionNode =
      Create.CreateUnsignedIntegerExpressionNode( "Unsigned Integer Expression", Enum.ExpressionSide_Right() );
   a_oUnsignedIntegerExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oUnsignedIntegerNode,
                           a_oUnsignedIntegerExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oUnsignedIntegerNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oUnsignedIntegerExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerArrayDeclarationNode()
[Category="Create Commands", Guid="{9B8FBDDC-B9CB-4424-96C4-760FF0415382}", Image=".\\icons\\new_int_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Uint Array", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Integer();
   }

   int a_nArrayDimension = 4;
   UnsignedIntegerArrayNode a_oUnsignedIntegerArrayNode = new UnsignedIntegerArrayNode;
   a_oUnsignedIntegerArrayNode.MakeLocal();
   a_oUnsignedIntegerArrayNode.Variable = "myDeclaredUintArray";
   a_oUnsignedIntegerArrayNode.Count = a_nArrayDimension;
   a_oUnsignedIntegerArrayNode.Name = a_oUnsignedIntegerArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oUnsignedIntegerArrayNode );
   a_oUnsignedIntegerArrayNode.Name = a_oUnsignedIntegerArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oUnsignedIntegerArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an UnsignedIntegerArrayExpressionNode
   UnsignedIntegerArrayExpressionNode a_oUnsignedIntegerArrayExpressionNode =
      Create.CreateUnsignedIntegerArrayExpressionNode( "Uint Array Expression", Enum.ExpressionSide_Right() );
   a_oUnsignedIntegerArrayExpressionNode.MakeExpression();
   a_oUnsignedIntegerArrayExpressionNode.Count = a_nArrayDimension;
   a_oUnsignedIntegerArrayExpressionNode.GenerateExpression( UnsignedIntegerArrayExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oUnsignedIntegerArrayNode,
                           a_oUnsignedIntegerArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oUnsignedIntegerArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oUnsignedIntegerArrayExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorDeclaration( int p_iDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   string a_sTitle = "Declare Uvec" + p_iDimension;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, a_sTitle, nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   UnsignedIntegerVectorNode a_oUnsignedIntegerVectorNode = new UnsignedIntegerVectorNode;
   a_oUnsignedIntegerVectorNode.MakeLocal();
   a_oUnsignedIntegerVectorNode.Variable = "myDeclaredUvec" + p_iDimension;
   a_oUnsignedIntegerVectorNode.Dimension = p_iDimension;
   a_oUnsignedIntegerVectorNode.Name = a_oUnsignedIntegerVectorNode.GetDeclarationString();
   Graph.RenameVariable( a_oUnsignedIntegerVectorNode );
   a_oUnsignedIntegerVectorNode.Name = a_oUnsignedIntegerVectorNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oUnsignedIntegerVectorNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a UnsignedIntegerVectorExpressionNode
   UnsignedIntegerVectorExpressionNode a_oUnsignedIntegerVectorExpressionNode =
      Create.CreateUnsignedIntegerVectorExpressionNode( "Unsigned Integer Vector Expression", Enum.ExpressionSide_Right(), p_iDimension );
   a_oUnsignedIntegerVectorExpressionNode.MakeExpression();
   a_oUnsignedIntegerVectorExpressionNode.GenerateExpression( UnsignedIntegerVectorExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oUnsignedIntegerVectorNode,
                           a_oUnsignedIntegerVectorExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oUnsignedIntegerVectorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oUnsignedIntegerVectorExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

function void CreateUnsignedIntegerVector2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector2DeclarationNode()
[Category="Create Commands", Guid="{15E0AC50-061D-4321-ADEB-D7DB28395767}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorDeclaration( 2 );
}

function void CreateUnsignedIntegerVector3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector3DeclarationNode()
[Category="Create Commands", Guid="{16E7F48F-78CF-4A90-831A-C38DA8397F4C}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorDeclaration( 3 );
}

function void CreateUnsignedIntegerVector4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector4DeclarationNode()
[Category="Create Commands", Guid="{A86F70CD-B6BC-49D3-A0B6-F3CEDFA9A96E}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorDeclaration( 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVectorArrayDeclaration( int p_nArrayCount, int p_nVectorDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Unsigned Integer Vector Array", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   UnsignedIntegerVectorArrayNode a_oUnsignedIntegerVectorArrayNode = new UnsignedIntegerVectorArrayNode;
   a_oUnsignedIntegerVectorArrayNode.MakeLocal();
   a_oUnsignedIntegerVectorArrayNode.Variable = "myUvec" + p_nVectorDimension + "Array";
   a_oUnsignedIntegerVectorArrayNode.Count = p_nArrayCount;
   a_oUnsignedIntegerVectorArrayNode.VectorDimension = p_nVectorDimension;
   a_oUnsignedIntegerVectorArrayNode.Name = a_oUnsignedIntegerVectorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oUnsignedIntegerVectorArrayNode );
   a_oUnsignedIntegerVectorArrayNode.Name = a_oUnsignedIntegerVectorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oUnsignedIntegerVectorArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerExpressionNode
   UnsignedIntegerVectorArrayExpressionNode a_oUnsignedIntegerVectorArrayExpressionNode =
      Create.CreateUnsignedIntegerVectorArrayExpressionNode( "Unsigned Integer Vector Array Expression",
         Enum.ExpressionSide_Right(), p_nArrayCount, p_nVectorDimension );
   a_oUnsignedIntegerVectorArrayExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oUnsignedIntegerVectorArrayNode,
                           a_oUnsignedIntegerVectorArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oUnsignedIntegerVectorArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oUnsignedIntegerVectorArrayExpressionNode, a_oDeclarationNode, -1 );
   delete nodes;
}

function void CreateUnsignedIntegerVector2ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector2ArrayDeclarationNode()
[Category="Create Commands", Guid="{7E5ECC87-10B0-4961-B2A0-2D8F0C4FE4B4}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec2() );
}

function void CreateUnsignedIntegerVector3ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector3ArrayDeclarationNode()
[Category="Create Commands", Guid="{F130D9A1-62BF-46F0-B59E-50C9CE8F4C24}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec3() );
}

function void CreateUnsignedIntegerVector4ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateUnsignedIntegerVector4ArrayDeclarationNode()
[Category="Create Commands", Guid="{4048BA70-23A8-47AE-A926-AB367817B48C}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateUnsignedIntegerVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateFloatDeclarationNode()
[Category="Create Commands", Guid="{FEA88770-3414-409A-A199-EE3AD350C17B}", Image=".\\icons\\new_float_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Float", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Float();
   }

   FloatNode a_oFloatNode = new FloatNode;
   a_oFloatNode.BindingType = Enum.Binding_Local();
   a_oFloatNode.Variable = "myDeclaredFloat";
   a_oFloatNode.Name = a_oFloatNode.GetDeclarationString();
   Graph.RenameVariable( a_oFloatNode );
   a_oFloatNode.Name = a_oFloatNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oFloatNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a FloatExpressionNode
   FloatExpressionNode a_oFloatExpressionNode =
      Create.CreateFloatExpressionNode( "Float Expression", Enum.ExpressionSide_Right() );
   a_oFloatExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oFloatNode,
                           a_oFloatExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oFloatNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oFloatExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateFloatArrayDeclarationNode()
[Category="Create Commands", Guid="{16D718DF-32F6-4CED-9066-BE63F8E3E331}", Image=".\\icons\\new_float_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare FloatArray", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Float();
   }

   int a_nArrayDimension = 4;
   FloatArrayNode a_oFloatArrayNode = new FloatArrayNode;
   a_oFloatArrayNode.MakeLocal();
   a_oFloatArrayNode.Variable = "myDeclaredFloatArray";
   a_oFloatArrayNode.Count = a_nArrayDimension;
   a_oFloatArrayNode.Name = a_oFloatArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oFloatArrayNode );
   a_oFloatArrayNode.Name = a_oFloatArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oFloatArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a FloatArrayExpressionNode
   FloatArrayExpressionNode a_oFloatArrayExpressionNode =
      Create.CreateFloatArrayExpressionNode( "Float Array Expression", Enum.ExpressionSide_Right() );
   a_oFloatArrayExpressionNode.MakeExpression();
   a_oFloatArrayExpressionNode.Count = a_nArrayDimension;
   a_oFloatArrayExpressionNode.GenerateExpression( FloatArrayExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oFloatArrayNode,
                           a_oFloatArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oFloatArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oFloatArrayExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorDeclaration( int p_iDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   string a_sTitle = "Declare Vector" + p_iDimension;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, a_sTitle, nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   VectorNode a_oVectorNode = new VectorNode;
   a_oVectorNode.MakeLocal();
   a_oVectorNode.Variable = "myDeclaredVector" + p_iDimension;
   a_oVectorNode.Dimension = p_iDimension;
   a_oVectorNode.Name = a_oVectorNode.GetDeclarationString();
   Graph.RenameVariable( a_oVectorNode );
   a_oVectorNode.Name = a_oVectorNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oVectorNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a VectorExpressionNode
   VectorExpressionNode a_oVectorExpressionNode =
      Create.CreateVectorExpressionNode( "Vector Expression", Enum.ExpressionSide_Right(), p_iDimension );
   a_oVectorExpressionNode.MakeExpression();
   a_oVectorExpressionNode.GenerateExpression( VectorExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oVectorNode,
                           a_oVectorExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oVectorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oVectorExpressionNode, a_oDeclarationNode, -1 );

   delete nodes;
}

function void CreateVector2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector2DeclarationNode()
[Category="Create Commands", Guid="{E7109BEB-C418-4169-A81A-B85E740911FA}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorDeclaration( 2 );
}

function void CreateVector3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector3DeclarationNode()
[Category="Create Commands", Guid="{8E6B76D0-BEDE-4D67-B0E9-1C9356A00A38}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorDeclaration( 3 );
}

function void CreateVector4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector4DeclarationNode()
[Category="Create Commands", Guid="{3D562A4B-5534-48F6-80E9-A206A1B51752}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorDeclaration( 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVectorArrayDeclarationNode()
[Category="Create Commands", Guid="{AFAAD09D-4DA9-4EC9-B2A2-5265C8C39CD2}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare VectorArray", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   VectorArrayNode a_oVectorArrayNode = new VectorArrayNode;
   a_oVectorArrayNode.MakeLocal();
   a_oVectorArrayNode.Variable = "myDeclaredVectorArray";
   a_oVectorArrayNode.Count = 4;
   a_oVectorArrayNode.Name = a_oVectorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oVectorArrayNode );
   a_oVectorArrayNode.Name = a_oVectorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oVectorArrayNode.Variable;

   Model.AddNode( a_oVectorArrayNode, a_oDeclarationNode, -1 );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorArrayDeclaration( int p_nArrayCount, int p_nVectorDimension )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Vector Array", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Vector();
   }

   VectorArrayNode a_oVectorArrayNode = new VectorArrayNode;
   a_oVectorArrayNode.MakeLocal();
   a_oVectorArrayNode.Variable = "myFvec" + p_nVectorDimension + "Array";
   a_oVectorArrayNode.Count = p_nArrayCount;
   a_oVectorArrayNode.VectorDimension = p_nVectorDimension;
   a_oVectorArrayNode.Name = a_oVectorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oVectorArrayNode );
   a_oVectorArrayNode.Name = a_oVectorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oVectorArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create an IntegerExpressionNode
   VectorArrayExpressionNode a_oVectorArrayExpressionNode =
      Create.CreateVectorArrayExpressionNode( "Vector Array Expression",
         Enum.ExpressionSide_Right(), p_nArrayCount, p_nVectorDimension );
   a_oVectorArrayExpressionNode.MakeExpression();

   // Wire the expression.
   Create.WireDeclaration( a_oVectorArrayNode,
                           a_oVectorArrayExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oVectorArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oVectorArrayExpressionNode, a_oDeclarationNode, -1 );
   delete nodes;
}

function void CreateVector2ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector2ArrayDeclarationNode()
[Category="Create Commands", Guid="{480CC581-B73B-4C3C-BB1B-6B89D3FA65A6}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec2() );
}

function void CreateVector3ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector3ArrayDeclarationNode()
[Category="Create Commands", Guid="{D330E9B1-D4CB-4E1A-92CE-665960F746C1}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec3() );
}

function void CreateVector4ArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateVector4ArrayDeclarationNode()
[Category="Create Commands", Guid="{0E39175C-0D49-47DC-BD99-4EC180E66ABF}", Image=".\\icons\\new_vector_declaration_node.bmp"]
{
   CreateVectorArrayDeclaration( 4, Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateColorDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateColorDeclarationNode()
[Category="Create Commands", Guid="{6372F966-6106-4916-BA5D-F66D63A700A2}", Image=".\\icons\\new_color_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Color", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Color();
   }

   ColorNode a_oColorNode = new ColorNode;
   a_oColorNode.MakeLocal();
   a_oColorNode.Variable = "myDeclaredColor";
   a_oColorNode.Name = a_oColorNode.GetDeclarationString();
   Graph.RenameVariable( a_oColorNode );
   a_oColorNode.Name = a_oColorNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oColorNode.Variable;

   Model.AddNode( a_oColorNode, a_oDeclarationNode, -1 );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateColorArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateColorArrayDeclarationNode()
[Category="Create Commands", Guid="{39B2358D-C31A-418E-B5E3-F3288C830D56}", Image=".\\icons\\new_color_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare ColorArray", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Color();
   }

   ColorArrayNode a_oColorArrayNode = new ColorArrayNode;
   a_oColorArrayNode.MakeLocal();
   a_oColorArrayNode.Variable = "myDeclaredColorArray";
   a_oColorArrayNode.Name = a_oColorArrayNode.GetDeclarationString();
   Graph.RenameVariable( a_oColorArrayNode );
   a_oColorArrayNode.Name = a_oColorArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oColorArrayNode.Variable;
   Model.AddNode( a_oColorArrayNode, a_oDeclarationNode, -1 );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixDeclaration( int p_iCols, int p_iRows )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   string a_sMatrixDims = p_iCols + "x" + p_iRows;
   List a_lNodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Matrix" + a_sMatrixDims, a_lNodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < a_lNodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)a_lNodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Matrix();
   }
   int a_nBindingType = Enum.Binding_Local();
   Matrix a_oMatrix = new Matrix;
   MatrixNode a_oMatrixNode = Create.CreateMatrixNode( a_nBindingType, "myDeclaredMatrix" + a_sMatrixDims,
   p_iRows, p_iCols, a_oMatrix );
   Graph.RenameVariable( a_oMatrixNode );
   a_oMatrixNode.Name = a_oMatrixNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oMatrixNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a MatrixExpressionNode
   MatrixExpressionNode a_oMatrixExpressionNode =
      Create.CreateMatrixExpressionNode( "Matrix" + a_sMatrixDims + " Expression", Enum.ExpressionSide_Right(), p_iCols, p_iRows );
   a_oMatrixExpressionNode.MakeExpression();
   a_oMatrixExpressionNode.GenerateExpression( MatrixExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration( a_oMatrixNode,
                           a_oMatrixExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oMatrixNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oMatrixExpressionNode, a_oDeclarationNode, -1 );

   delete a_lNodes;
   delete a_oMatrix;
}

function void CreateMatrix2x2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix2x2DeclarationNode()
[Category="Create Commands", Guid="{98452571-214D-4B5B-A86B-DF1D37458E57}", Image=".\\icons\\new_matrix2x2_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 2, 2 );
}

function void CreateMatrix2x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix2x3DeclarationNode()
[Category="Create Commands", Guid="{E20A470F-BABF-409A-83A8-7A7B3A5AD84B}", Image=".\\icons\\new_matrix2x3_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 2, 3 );
}

function void CreateMatrix2x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix2x4DeclarationNode()
[Category="Create Commands", Guid="{23906C67-A42F-4397-9E68-E1AC659172A0}", Image=".\\icons\\new_matrix2x4_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 2, 4 );
}

function void CreateMatrix3x2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix3x2DeclarationNode()
[Category="Create Commands", Guid="{D325576E-1AD5-4971-AC7A-424D3863EC17}", Image=".\\icons\\new_matrix3x2_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 3, 2 );
}

function void CreateMatrix3x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix3x3DeclarationNode()
[Category="Create Commands", Guid="{84284B75-F1AD-4499-B075-B352C7CB735D}", Image=".\\icons\\new_matrix3x3_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 3, 3 );
}

function void CreateMatrix3x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix3x4DeclarationNode()
[Category="Create Commands", Guid="{6CAF3D30-30BF-41A6-8EBF-7596AFD61001}", Image=".\\icons\\new_matrix3x4_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 3, 4 );
}

macro CreateMatrix4x2DeclarationNode()
[Category="Create Commands", Guid="{879AD80C-EEBA-411F-A06F-99C51E046E33}", Image=".\\icons\\new_matrix4x2_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 4, 2 );
}

function void CreateMatrix4x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix4x3DeclarationNode()
[Category="Create Commands", Guid="{6B6935C4-257A-41F2-968D-08246A72CCCD}", Image=".\\icons\\new_matrix4x3_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 4, 3 );
}

function void CreateMatrix4x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrix4x4DeclarationNode()
[Category="Create Commands", Guid="{EF07816E-CA1F-486F-A640-7407A8E0E353}", Image=".\\icons\\new_matrix4x4_declaration_node.bmp"]
{
   CreateMatrixDeclaration( 4, 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixArrayDeclaration( int p_iCols, int p_iRows, int p_iCount )
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   string a_sMatrixDims = p_iCols + "x" + p_iRows;
   List a_lNodes = new List;

   ValidateNodeCreateContext.CreateNodes(
      Model,
      DeclarationNode,
      "Declare Matrix Array " + a_sMatrixDims,
      a_lNodes,
      a_nCreateAtThisIndex );

   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < a_lNodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)a_lNodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Matrix();
   }

   int a_nBindingType = Enum.Binding_Local();
   Matrix a_oMatrix = new Matrix;

   MatrixArrayNode a_oMatrixArrayNode =
      Create.CreateMatrixArrayNode(
         a_nBindingType,
         "myDeclaredMatrix" + a_sMatrixDims,
         p_iRows,
         p_iCols,
         p_iCount );

   Graph.RenameVariable( a_oMatrixArrayNode );
   a_oMatrixArrayNode.Name = a_oMatrixArrayNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oMatrixArrayNode.Variable;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a MatrixArrayExpressionNode
   MatrixArrayExpressionNode a_oMatrixArrayExpressionNode =
      Create.CreateMatrixArrayExpressionNode(
         "Matrix" + a_sMatrixDims + " Expression",
         Enum.ExpressionSide_Right(),
         p_iCols,
         p_iRows,
         4 );

   a_oMatrixArrayExpressionNode.MakeExpression();
   a_oMatrixArrayExpressionNode.GenerateExpression( MatrixArrayExpressionGenerator );

   // Wire the expression.
   Create.WireDeclaration(
      a_oMatrixArrayNode,
      a_oMatrixArrayExpressionNode,
      a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oMatrixArrayNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oDeclarationNode, -1 );
   Model.AddNode( a_oMatrixArrayExpressionNode, a_oDeclarationNode, -1 );

   delete a_lNodes;
   delete a_oMatrix;
}

function void CreateMatrixArray2x2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray2x2DeclarationNode()
[Category="Create Commands", Guid="{A17BA88E-5E98-4C91-BF09-18DF4E65AA95}", Image=".\\icons\\new_matrix2x2_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateMatrixArray2x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray2x3DeclarationNode()
[Category="Create Commands", Guid="{AF5064A2-1755-4776-8B49-0B497A60ACD3}", Image=".\\icons\\new_matrix2x3_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateMatrixArray2x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray2x4DeclarationNode()
[Category="Create Commands", Guid="{4111E445-87C4-42D1-B49C-3254072CA75D}", Image=".\\icons\\new_matrix2x4_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4(), 4 );
}

function void CreateMatrixArray3x2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray3x2DeclarationNode()
[Category="Create Commands", Guid="{AF345FE1-673A-471B-9B35-A73C76DEB28F}", Image=".\\icons\\new_matrix3x2_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateMatrixArray3x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray3x3DeclarationNode()
[Category="Create Commands", Guid="{C386E2CD-C392-4ADF-899A-32EB0A2BBD5C}", Image=".\\icons\\new_matrix3x3_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateMatrixArray3x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray3x4DeclarationNode()
[Category="Create Commands", Guid="{D8355091-B9D7-4B73-AD3C-4AFE44C31318}", Image=".\\icons\\new_matrix3x4_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4(), 4 );
}

function void CreateMatrixArray4x2DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray4x2DeclarationNode()
[Category="Create Commands", Guid="{A15FFE1E-A2D3-4283-A49C-957E8F279B02}", Image=".\\icons\\new_matrix4x2_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateMatrixArray4x3DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray4x3DeclarationNode()
[Category="Create Commands", Guid="{C52EEF06-65BD-46AA-BCCC-77E41D26A01D}", Image=".\\icons\\new_matrix4x3_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateMatrixArray4x4DeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateMatrixArray4x4DeclarationNode()
[Category="Create Commands", Guid="{4A8443B1-B379-41A3-A831-9228E83FE661}", Image=".\\icons\\new_matrix4x4_declaration_node.bmp"]
{
   CreateMatrixArrayDeclaration( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4(), 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSamplerDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateSamplerDeclarationNode()
[Category="Create Commands", Guid="{4E7B3991-F433-47DA-8BB8-0BD97D727365}", Image=".\\icons\\new_sampler_declaration_node.bmp"]
{
   Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   int a_nCreateAtThisIndex = Create.GetCreateIndex( a_oSelGroup );

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Sampler", nodes, a_nCreateAtThisIndex );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Sampler();
   }

   DynamicSamplerNode a_oSamplerNode = new DynamicSamplerNode;
   a_oSamplerNode.MakeUniform();
   int a_nSamplerIndex = Create.GetSamplerIndex( a_oSelGroup );
   a_oSamplerNode.Variable = "SPA_Texture" + a_nSamplerIndex;
   a_oSamplerNode.Name = a_oSamplerNode.GetDeclarationString();
   Graph.RenameVariable( a_oSamplerNode );
   a_oSamplerNode.Name = a_oSamplerNode.UpdateName();
   a_oDeclarationNode.Name = "Declare " + a_oSamplerNode.Variable;
   Model.AddNode( a_oSamplerNode, a_oDeclarationNode, -1 );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStructInstanceDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateStructInstanceDeclarationNode()
[Category="Create Commands", Guid="{2795448F-207E-4D70-90CE-2E0AC0835679}", Image=".\\icons\\new_struct_instance_declaration_node.bmp"]
{
   bool a_bIsArray = false;
   Create.CreateStructInstanceDeclaration( null, a_bIsArray, "" );
}

function void CreateStructInstanceArrayDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateStructInstanceArrayDeclarationNode()
[Category="Create Commands", Guid="{B663CF1A-6382-42DB-A489-F23696552AC3}", Image=".\\icons\\new_struct_instance_declaration_node.bmp"]
{
   bool a_bIsArray = true;
   Create.CreateStructInstanceDeclaration( null, a_bIsArray, "Array" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInterfaceBlockDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateInterfaceBlockDeclarationNode()
[Category="Create Commands", Guid="{2AF56D54-FE7F-43A8-82B8-98A1DC5C2BC2}", Image=".\\icons\\new_interface_block_declaration_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Group a_oSelGroup;
   if( a_oSelNode && a_oSelNode.IsDerived( ShaderDeclarationNode ) )
   {
      a_oSelGroup = (Group)a_oSelNode;
   }

   if( a_oSelNode && a_oSelNode.IsDerived( VertexDeclarationNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNode =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare Out Interface Block",
            "Data",
            "DataOut",
            "out",
            false );

      Model.AddNode( a_oInterfaceBlockNode, a_oSelGroup, -1 );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( ControlDeclarationNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNodeIn =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare In Interface Block",
            "Data",
            "DataIn",
            "in",
            true );

      InterfaceBlockNode a_oInterfaceBlockNodeOut =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare Out Interface Block",
            "Data",
            "DataOut",
            "out",
            true );

      Model.AddNode( a_oInterfaceBlockNodeIn, a_oSelGroup, -1 );
      Model.AddNode( a_oInterfaceBlockNodeOut, a_oSelGroup, -1 );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( EvaluationDeclarationNode ) ||
      a_oSelNode && a_oSelNode.IsDerived( GeometryDeclarationNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNodeIn =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare In Interface Block",
            "Data",
            "DataIn",
            "in",
            true );

      InterfaceBlockNode a_oInterfaceBlockNodeOut =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare Out Interface Block",
            "Data",
            "DataOut",
            "out",
            false );

      Model.AddNode( a_oInterfaceBlockNodeIn, a_oSelGroup, -1 );
      Model.AddNode( a_oInterfaceBlockNodeOut, a_oSelGroup, -1 );
   }
   else
   if( a_oSelNode && a_oSelNode.IsDerived( FragmentDeclarationNode ) )
   {
      InterfaceBlockNode a_oInterfaceBlockNode =
         Create.CreateInterfaceBlockDeclaration(
            null,
            "Declare In Interface Block",
            "Data",
            "DataIn",
            "in",
            false );

      Model.AddNode( a_oInterfaceBlockNode, a_oSelGroup, -1 );
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformBufferDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto TypeInfoArray types;
   types.Add( IncludeSourceNode );
   types.Add( ShaderDeclarationNode );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateUniformBufferDeclarationNode()
[Category="Create Commands", Guid="{E5164986-E913-4F9C-9358-E0179922DD98}", Image=".\\icons\\new_uniform_buffer_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, UniformBufferNode, "myUniformBuffer", nodes, -1 );
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      UniformBufferNode a_oUniformBufferNode = (UniformBufferNode)nodes.Get(node);
      a_oUniformBufferNode.Block.BlockName = "myUniformBuffer";
      a_oUniformBufferNode.QualifierList.ModifyQualifier( true, Enum.GLSL_Qualifier_Uniform() );
      a_oUniformBufferNode.UpdateName();
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DeclarationNode" );
}

macro CreateFunctionDeclarationNode()
[Category="Create Commands", Guid="{C65A65E1-198E-4875-B3B1-B979A1AC252A}", Image=".\\icons\\new_function_declaration_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DeclarationNode, "Declare Function", nodes, -1 );
   DeclarationNode a_oDeclarationNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oDeclarationNode = (DeclarationNode)nodes.Get(node);
      a_oDeclarationNode.DeclarationType = Enum.DeclarationType_Function();
   }
   DeclareFunctionNode a_oDeclareFunctionNode = new DeclareFunctionNode;
   a_oDeclareFunctionNode.Name = "myFunction";
   Model.AddNode( a_oDeclareFunctionNode, a_oDeclarationNode, -1 );
   StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
   a_oStatementBlockNode.Name = "Body";
   Model.AddNode( a_oStatementBlockNode, a_oDeclarationNode, -1 );
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInterfaceBlockNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InterfaceBlockNode" );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateInterfaceBlockNode()
[Category="Create Commands", Guid="{F40345EA-A3C9-446B-8628-469912C91921}", Image=".\\icons\\new_interface_block_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InterfaceBlockNode, "NewInterfaceBlockNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateAccessControlNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "AccessControlNode" );
}

macro CreateAccessControlNode()
[Category="Create Commands", Guid="{F657D43C-F082-49D0-9F0A-5072E65F01AE}", Image=".\\icons\\new_access_control_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, AccessControlNode, "Public:", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateExtensionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ExtensionNode" );
}

macro CreateExtensionNode()
[Category="Create Commands", Guid="{F12E5F91-43F4-42B8-A69E-BA291AA6E25D}", Image=".\\icons\\new_extension_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ExtensionNode, "NewExtensionNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a ShaderSourceNode that references an ASCII file on the hard disk" );
}

macro CreateShaderSourceNode()
[Category="Create Commands", Guid="{BE973E87-E0F8-4768-80BE-4E46683CD39C}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.LoadFileFromDisk( a_oNode, ShaderSourceNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceInclude_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a ShaderSourceNode that references an ASCII file on the hard disk" );
}

macro CreateShaderSourceInclude()
[Category="Create Commands", Guid="{BC2B382E-36CF-4CE6-AF73-AF3FACD6498C}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Global(), "" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceVertex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a VertexSourceNode representing a vertex shader" );
   GPU.ValidateShadingLanguageVersion( 110, commandInfo );
}

macro CreateShaderSourceVertex()
[Category="Create Commands", Guid="{5EF408CE-ED02-4571-81FE-92F19CC7DE9C}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Vertex(), "Vertex Shader" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceControl_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a ControlSourceNode representing a control shader" );
   GPU.ValidateShadingLanguageVersion( 400, commandInfo );
}

macro CreateShaderSourceControl()
[Category="Create Commands", Guid="{BCD2C67C-124F-4C9F-87E5-7872FA5388C2}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Control(), "Control Shader" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceEvaluation_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a ControlSourceNode representing an evaluation shader" );
   GPU.ValidateShadingLanguageVersion( 400, commandInfo );
}

macro CreateShaderSourceEvaluation()
[Category="Create Commands", Guid="{FD898324-1690-469D-AE9A-5CE4BD88D55E}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Evaluation(), "Evaluation Shader" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceGeometry_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a GeometrySourceNode representing a geometry shader" );
   GPU.ValidateShadingLanguageVersion( 150, commandInfo );
}

macro CreateShaderSourceGeometry()
[Category="Create Commands", Guid="{22F6835F-3C78-4008-AFC1-ADC6FD5DAF53}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Geometry(), "Geometry Shader" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderSourceFragment_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode,
      "Creates a FragmentSourceNode representing a fragment shader" );
   GPU.ValidateShadingLanguageVersion( 110, commandInfo );
}

macro CreateShaderSourceFragment()
[Category="Create Commands", Guid="{C0D8E84B-DC9E-437D-AAED-BC3FE6E692F7}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   int a_nSelIndex = 0;
   ScriptNode a_oScriptNode = (ScriptNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Graph.CreateGeneratedShaderStage( a_oScriptNode, Enum.CodeGenerationScope_Fragment(), "Fragment Shader" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreatePreprocessorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "PreprocessorNode" );
}

macro CreatePreprocessorNode()
[Category="Create Commands", Guid="{52C454FC-0279-45D5-9C6A-0317DB42E90F}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, PreprocessorNode, "NewPreprocessorNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderPragmaNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderPragmaNode" );
}

macro CreateShaderPragmaNode()
[Category="Create Commands", Guid="{D61544D2-8339-4F3A-B2EC-71ED194C8450}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderPragmaNode, "#pragma optimize(on)", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderDefineNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderDefineNode" );
}

macro CreateShaderDefineNode()
[Category="Create Commands", Guid="{19EFDE6D-76EF-4BA9-8C44-0D615A11CECC}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderDefineNode, "#define", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderIfndefNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderIfndefNode" );
}

macro CreateShaderIfndefNode()
[Category="Create Commands", Guid="{30D94DF7-73BD-4D6E-80C3-87A83593AAEE}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderIfndefNode, "#ifndef", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderEndifNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderEndifNode" );
}

macro CreateShaderEndifNode()
[Category="Create Commands", Guid="{EC572E83-3920-4A3E-8D48-68FF94F84FEB}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderEndifNode, "#endif", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderDeclarationNode" );
}

macro CreateShaderDeclarationNode()
[Category="Create Commands", Guid="{DA130BF7-1F50-4544-8201-83170E164C67}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderDeclarationNode, "Declarations", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVertexSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VertexSourceNode" );
}

macro CreateVertexSourceNode()
[Category="Create Commands", Guid="{089016A9-CD37-4479-A1A5-C9D51D9D59FB}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, VertexSourceNode, "Vertex", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateControlSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ControlSourceNode" );
}

macro CreateControlSourceNode()
[Category="Create Commands", Guid="{3026894E-A1E4-42AF-85F0-49800FA71523}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ControlSourceNode, "Control", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateEvaluationSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "EvaluationSourceNode" );
}

macro CreateEvaluationSourceNode()
[Category="Create Commands", Guid="{38D750DA-EEC3-4BE8-A9E5-F167C81C5410}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, EvaluationSourceNode, "Evaluation", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGeometrySourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GeometrySourceNode" );
}

macro CreateGeometrySourceNode()
[Category="Create Commands", Guid="{C37D508C-21CA-43FE-A85D-961C1EFE7A9B}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GeometrySourceNode, "Geometry", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFragmentSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FragmentSourceNode" );
}

macro CreateFragmentSourceNode()
[Category="Create Commands", Guid="{0DAF7A62-E89B-4243-BBD0-0F51632E547E}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FragmentSourceNode, "Fragment", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVertexDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VertexDeclarationNode" );
}

macro CreateVertexDeclarationNode()
[Category="Create Commands", Guid="{429FCD78-9180-4CFA-BF60-013BC2AD04A2}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, VertexDeclarationNode, "Vertex", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateControlDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ControlDeclarationNode" );
}

macro CreateControlDeclarationNode()
[Category="Create Commands", Guid="{2C1E3000-9E18-4471-A646-D0DAFAEEA9AF}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ControlDeclarationNode, "Control", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateEvaluationDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "EvaluationDeclarationNode" );
}

macro CreateEvaluationDeclarationNode()
[Category="Create Commands", Guid="{0E793D4E-CA1D-4BAB-9251-9994807D03A4}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, EvaluationDeclarationNode, "Evaluation", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGeometryDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GeometryDeclarationNode" );
}

macro CreateGeometryDeclarationNode()
[Category="Create Commands", Guid="{DA9577AB-F2A1-41D7-8F54-51A9EBEECA6B}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GeometryDeclarationNode, "Geometry", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFragmentDeclarationNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FragmentDeclarationNode" );
}

macro CreateFragmentDeclarationNode()
[Category="Create Commands", Guid="{85ADC2F7-3104-4D22-B317-2A951A6F4A27}", Image=".\\icons\\new_shader_declaration_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FragmentDeclarationNode, "Fragment", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderUndefNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderUndefNode" );
}

macro CreateShaderUndefNode()
[Category="Create Commands", Guid="{C767870C-E555-49B1-AA39-E0AEF8B09280}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderUndefNode, "#undef", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderIncludeNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto TypeInfoArray types;
   types.Add( ShaderSourceNode );
   types.Add( ShaderDeclarationNode );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );
   if( a_bEnabled )
   {
      commandInfo.Status.SetHint( "Creates a new NodeLink that implements a #include directive." );
   }
   else
   {
      commandInfo.Status.SetHint( "Select a node of type ShaderSourceNode, ShaderDeclarationNode, or a derived type." );
   }
}

macro CreateShaderIncludeNode()
[Category="Create Commands", Guid="{0739EE11-55CF-4154-88BC-ACCDDC18E779}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   NodeLink a_oInclude = new NodeLink;
   if( !Graph.SetIncludeFile( a_oInclude ) )
   {
      delete a_oInclude;
   }
   else
   {
      Group a_oSelGroup = (Group)Model.GetFirstSelectedNode().GetNode();
      Model.AddNode( a_oInclude, a_oSelGroup, -1 );
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderVersionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderVersionNode" );
}

macro CreateShaderVersionNode()
[Category="Create Commands", Guid="{5EE2A915-3AD8-4D06-B760-9503CBC63EA0}", Image=".\\icons\\new_preprocessor_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderVersionNode, "#version 400", nodes, 0 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderCommentNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Single-Line Comment" );
}

macro CreateShaderCommentNode()
[Category="Create Commands", Guid="{73157D58-375F-42AE-A6D0-5327C37599FB}", Image=".\\icons\\new_shader_comment_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderCommentNode, "Comment", nodes, 0 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMultiLineComment_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "Multi-Line Comment" );
   if( Model.GetSelectCount() == 0 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select at least one node." );
   }
}

macro CreateMultiLineComment()
[Category="Create Commands", Guid="{B14C4609-28CD-4D43-AD2F-BD225D6B532E}", Image=".\\icons\\new_shader_comment_node.bmp"]
{
   ShaderCommentNode a_oOpenComment = new ShaderCommentNode;
   a_oOpenComment.Name = "Open";
   a_oOpenComment.SingleLineComment = false;

   ShaderCommentNode a_oCloseComment = new ShaderCommentNode;
   a_oCloseComment.Name = "Close";
   a_oCloseComment.SingleLineComment = false;

   a_oOpenComment.CommentClosure = a_oCloseComment;

   int a_nSelIndex = 0;
   Group a_oSelNode = (Group)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Model.AddNode( a_oOpenComment, a_oSelNode, 0 );
   Model.AddNode( a_oCloseComment, a_oSelNode, 1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateShaderImportNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ShaderImportNode" );
}

macro CreateShaderImportNode()
[Category="Create Commands", Guid="{EEFB35D3-72DF-46E3-9BDD-EEC38B4489AA}", Image=".\\icons\\new_shader_import_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ShaderImportNode, "ShaderImportNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMainFunctionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderSourceNode,
      "Creates a new MainFunctionNode" );

   // Get the selected ShaderSourceNode.
   int a_nSelIndex = 0 ;
   ShaderSourceNode a_oShaderSourceNode;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( ShaderSourceNode ) )
   {
      a_oShaderSourceNode = (ShaderSourceNode)a_oSelNode;
   }

   if( !( a_oShaderSourceNode ) )
   {
      return;
   }

   // Check if the shader stage requires a MainFunctionNode.
   // "Global" shader stage cannot have a MainFunctionNode.
   if( a_oShaderSourceNode.CodeGenerationScope == Enum.CodeGenerationScope_Global() )
   {
      commandInfo.Status.SetHint( "A MainFunctionNode can only be added to a shader stage such as vertex or fragment." );
      commandInfo.SetEnabled( false );
   }

   // Check if there are any MainFunctionNodes.
   auto List a_lMainFunctionNodes;
   Graph.GetNodesFromDatabase( a_oShaderSourceNode, a_lMainFunctionNodes, MainFunctionNode );
   if( a_lMainFunctionNodes.GetCount() )
   {
      commandInfo.Status.SetHint( "There is already a MainFunctionNode for this shader stage." );
      commandInfo.SetEnabled( false );
   }
}

macro CreateMainFunctionNode()
[Category="Create Commands", Guid="{5999FD84-B296-49D1-BAAB-467B7952A834}", Image=".\\icons\\new_main_function_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, MainFunctionNode, "Main Function", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBinaryOperatorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BinaryOperatorNode" );
   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.Status.SetHint( "Please select a single location for this operator" );
      commandInfo.SetEnabled( false );
   }
   Node a_oSelNode = (Node)Model.GetSelectedNode( 0 ).GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
   {
      Group a_oSelGroup = (Group)a_oSelNode;
      if( a_oSelGroup.ChildCount == 0 )
      {
         commandInfo.Status.SetHint( "This expression does not yet have a left value" );
         commandInfo.SetEnabled( false );
      }
      else
      if( a_oSelGroup.ChildCount >= 2 )
      {
         commandInfo.Status.SetHint( "This expression cannot have additional operators" );
         commandInfo.SetEnabled( false );
      }
   }
}

macro CreateBinaryOperatorNode()
[Category="Create Commands", Guid="{07A8F813-60CD-4CCF-83CD-5DB6FD9FB23E}", Image=".\\icons\\new_binary_operator_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, BinaryOperatorNode, "Operator", nodes, -1 );
   Group a_oSelNode = (Group)Model.GetSelectedNode( 0 ).GetNode();
   Node a_oFirstChild = (Node)a_oSelNode.Children[0];
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      BinaryOperatorNode a_oBinaryOperatorNode = (BinaryOperatorNode)nodes.Get( node );
      if( a_oFirstChild )
      {
         a_oBinaryOperatorNode.LeftDataSource = a_oFirstChild;
      }
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanExpressionNode" );
}

macro CreateBooleanExpressionNode()
[Category="Create Commands", Guid="{9120314A-4403-4A10-9A7A-A1BA16205C33}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanExpressionNode, "Boolean Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanArrayExpressionNode" );
}

macro CreateBooleanArrayExpressionNode()
[Category="Create Commands", Guid="{D4B72937-AC93-4A0F-A07D-441AD0C4FB44}", Image=".\\icons\\new_boolean_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanArrayExpressionNode, "Boolean Array Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorExpressionNode" );
}

macro CreateBooleanVectorExpressionNode()
[Category="Create Commands", Guid="{F64D0E83-4C77-441C-9459-F9B9D7AF31FC}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorExpressionNode, "Boolean Vector Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVectorArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "BooleanVectorArrayExpressionNode" );
}

macro CreateBooleanVectorArrayExpressionNode()
[Category="Create Commands", Guid="{840DBCA2-645E-4271-9EB6-E53B59F4486A}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, BooleanVectorArrayExpressionNode, "Boolean Vector Array Expression", nodes, -1 );

   for( int a_nNodes = 0; a_nNodes < nodes.GetCount(); ++a_nNodes )
   {
      BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
         (BooleanVectorArrayExpressionNode)nodes.Get( a_nNodes );
      a_oBooleanVectorArrayExpressionNode.Dimension = 4;
      a_oBooleanVectorArrayExpressionNode.Count = 1;
      string a_sExpression;
      auto BooleanVectorArrayExpressionGenerator a_oBooleanVectorArrayExpressionGenerator;
      a_oBooleanVectorArrayExpressionGenerator.GenerateExpressionString(
         a_oBooleanVectorArrayExpressionNode,
         a_sExpression );
      a_oBooleanVectorArrayExpressionNode.Expression = a_sExpression;
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerExpressionNode" );
}

macro CreateIntegerExpressionNode()
[Category="Create Commands", Guid="{6C4FE46C-8C17-4CFE-AC9F-3B214668F411}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerExpressionNode, "Integer Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerArrayExpressionNode" );
}

macro CreateIntegerArrayExpressionNode()
[Category="Create Commands", Guid="{4D40B7D1-8AAA-406A-A92C-FFC596AA0AE0}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerArrayExpressionNode, "Integer Array Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorExpressionNode" );
}

macro CreateIntegerVectorExpressionNode()
[Category="Create Commands", Guid="{424CDFF8-45CC-4F7E-9982-1DB59D7EAF78}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorExpressionNode, "Integer Vector Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "IntegerVectorArrayExpressionNode" );
}

macro CreateIntegerVectorArrayExpressionNode()
[Category="Create Commands", Guid="{165D4A66-F35D-4FCF-83A2-628F74F79C08}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IntegerVectorArrayExpressionNode, "Integer Vector Array Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "UnsignedIntegerExpressionNode" );
}

macro CreateUnsignedIntegerExpressionNode()
[Category="Create Commands", Guid="{3B567CEB-FFEF-4097-9148-466B07D52A29}", Image=".\\icons\\new_integer_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, UnsignedIntegerExpressionNode, "Unsigned Integer Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FloatExpressionNode" );
}

macro CreateFloatExpressionNode()
[Category="Create Commands", Guid="{A8388E21-1DF1-4BD2-87C7-49ECBACC10A1}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FloatExpressionNode, "Float Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFloatArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FloatArrayExpressionNode" );
}

macro CreateFloatArrayExpressionNode()
[Category="Create Commands", Guid="{CBB84FC5-214B-44E6-B352-22ED0BC6341F}", Image=".\\icons\\new_float_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FloatArrayExpressionNode, "Float Array Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorExpressionNode" );
}

macro CreateVectorExpressionNode()
[Category="Create Commands", Guid="{2709BDAC-C4AB-4976-AD7A-D8F22F4CBA4D}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, VectorExpressionNode, "Vector Expression", nodes, -1 );

   for( int a_nNodes = 0; a_nNodes < nodes.GetCount(); ++a_nNodes )
   {
      VectorExpressionNode a_oVectorExpressionNode = (VectorExpressionNode)nodes.Get( a_nNodes );
      a_oVectorExpressionNode.Dimension = 3;
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateVectorArrayExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "VectorArrayExpressionNode" );
}

macro CreateVectorArrayExpressionNode()
[Category="Create Commands", Guid="{F72B5D34-2FFA-4830-AD2B-6934EF751440}", Image=".\\icons\\new_vector_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, VectorArrayExpressionNode, "Vector Array Expression", nodes, -1 );

   for( int a_nNodes = 0; a_nNodes < nodes.GetCount(); ++a_nNodes )
   {
      VectorArrayExpressionNode a_oVectorArrayExpressionNode = (VectorArrayExpressionNode)nodes.Get( a_nNodes );
      a_oVectorArrayExpressionNode.Dimension = 4;
      a_oVectorArrayExpressionNode.Count = 1;
      string a_sExpression;
      auto VectorArrayExpressionGenerator a_oVectorArrayExpressionGenerator;
      a_oVectorArrayExpressionGenerator.GenerateExpressionString( a_oVectorArrayExpressionNode, a_sExpression );
      a_oVectorArrayExpressionNode.Expression = a_sExpression;
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateMatrixExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "MatrixExpressionNode" );
}

macro CreateMatrixExpressionNode()
[Category="Create Commands", Guid="{61ACD334-21C2-4DC2-A273-BD93BA7F7B11}", Image=".\\icons\\new_matrix_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, MatrixExpressionNode, "Matrix Expression", nodes, -1 );

   for( int a_nNodes = 0; a_nNodes < nodes.GetCount(); ++a_nNodes )
   {
      MatrixExpressionNode a_oMatrixExpressionNode = (MatrixExpressionNode)nodes.Get( a_nNodes );
      a_oMatrixExpressionNode.Cols = 4;
      a_oMatrixExpressionNode.Rows = 4;
   }
   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateStructExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "StructExpressionNode" );
}

macro CreateStructExpressionNode()
[Category="Create Commands", Guid="{CC4199B3-954C-4336-9A87-CEAB0442A69D}", Image=".\\icons\\new_struct_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, StructExpressionNode, "Struct Expression", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateAppDefinitionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "AppDefinitionNode" );
}

macro CreateAppDefinitionNode()
[Category="Create Commands", Guid="{D350E59F-CA50-41BC-8B7C-9559B03BCD28}", Image=".\\icons\\new_app_definition_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, AppDefinitionNode, "NewAppDefinitionNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateAppScaffoldNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "AppScaffoldNode" );
}

macro CreateAppScaffoldNode()
[Category="Create Commands", Guid="{28BB6769-66C3-4E2C-86E8-DD0433E3D531}", Image=".\\icons\\new_app_scaffold_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, AppScaffoldNode, "NewAppScaffoldNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ConfigNode" );
}

macro CreateConfigNode()
[Category="Create Commands", Guid="{B3935247-F44E-4BF6-9793-EA22F49A705A}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ConfigNode, "NewConfigNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateApplicationConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "ApplicationConfigNode" );
}

macro CreateApplicationConfigNode()
[Category="Create Commands", Guid="{6A2825ED-D85A-48D5-B35F-4429A6A1F5B7}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, ApplicationConfigNode, "NewApplicationConfigNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInstallerConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InstallerConfigNode" );
}

macro CreateInstallerConfigNode()
[Category="Create Commands", Guid="{14D2DB37-8451-4987-B747-34ACD7B82616}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InstallerConfigNode, "NewInstallerConfigNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInstallerDirectiveNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InstallerDirectiveNode" );
}

macro CreateInstallerDirectiveNode()
[Category="Create Commands", Guid="{B5E4602F-534B-4BE6-89C4-82DBF77DF8FD}", Image=".\\icons\\new_installer_directive_node.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, InstallerDirectiveNode, "NewInstallerDirectiveNode", nodes, -1 );
   
   for( int sel = 0; sel < Model.GetSelectCount(); ++sel )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( sel ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( SectionConfigNode ) )
      {
         SectionConfigNode a_oSectionConfigNode = (SectionConfigNode)a_oSelNode;
         InstallerDirectiveNode a_oInstallerDirectiveNode = (InstallerDirectiveNode)nodes.Get( sel );

         if( a_oSectionConfigNode.Section == 5 )
         {
            a_oInstallerDirectiveNode.Name = "IconsLayout";
         }
         else
         if( a_oSectionConfigNode.Section == 7 )
         {
            a_oInstallerDirectiveNode.Name = "InstallDelete";
         }
         else
         if( a_oSectionConfigNode.Section == 8 )
         {
            a_oInstallerDirectiveNode.Name = "LanguageName";
            a_oInstallerDirectiveNode.LangOptions.Directive = "LanguageName";
         }
         else
         if( a_oSectionConfigNode.Section == 9 )
         {
            a_oInstallerDirectiveNode.Name = "LanguagesLayout";
         }
         else
         if( a_oSectionConfigNode.Section == 11 )
         {
            a_oInstallerDirectiveNode.Name = "RegistryLayout";
         }
         else
         if( a_oSectionConfigNode.Section == 12 )
         {
            a_oInstallerDirectiveNode.Name = "RunLayout";
         }
         else
         if( a_oSectionConfigNode.Section == 13 )
         {
            a_oInstallerDirectiveNode.Name = "AppName";
            a_oInstallerDirectiveNode.Setup.Directive = "AppName";
         }
         else
         if( a_oSectionConfigNode.Section == 16 )
         {
            a_oInstallerDirectiveNode.Name = "UninstallDelete";
         }
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateSectionConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "SectionConfigNode" );
}

macro CreateSectionConfigNode()
[Category="Create Commands", Guid="{A51823B5-AEE4-413F-B4B5-B9DC6383AF18}", Image=".\\icons\\generic_script_icon.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, SectionConfigNode, "[Setup]", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFileConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FileConfigNode" );
}

macro CreateFileConfigNode()
[Category="Create Commands", Guid="{79DA18E6-6646-41B3-AFCA-5B85D2656390}", Image=".\\icons\\create_file_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FileConfigNode, "NewFileConfigNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFolderConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "FolderConfigNode" );
}

macro CreateFolderConfigNode()
[Category="Create Commands", Guid="{CF92F152-535A-4352-B272-344A08973F98}", Image=".\\icons\\new_folder_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, FolderConfigNode, "NewFolder", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateHelpConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "HelpConfigNode" );
}

macro CreateHelpConfigNode()
[Category="Create Commands", Guid="{F7B0140C-A5DA-46AA-B48D-17EB376564B8}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, HelpConfigNode, "Help", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateCommandConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "CommandConfigNode" );
}

macro CreateCommandConfigNode()
[Category="Create Commands", Guid="{6579D446-F656-467F-977B-997CCB6836C8}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, CommandConfigNode, "Commands", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateLibraryConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "LibraryConfigNode" );
}

macro CreateLibraryConfigNode()
[Category="Create Commands", Guid="{47053F86-EA62-422C-AA83-DA952D12045E}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, LibraryConfigNode, "Library", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTypeConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TypeConfigNode" );
}

macro CreateTypeConfigNode()
[Category="Create Commands", Guid="{D6985539-4597-4CD1-B7AD-23C2FBEA3C71}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TypeConfigNode, "Types", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDataConfigNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DataConfigNode" );
}

macro CreateDataConfigNode()
[Category="Create Commands", Guid="{A407BFCA-1530-40CF-9588-52029368ADA6}", Image=".\\icons\\new_config_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, DataConfigNode, "Data", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInterfaceElementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "InterfaceElementNode" );
}

macro CreateInterfaceElementNode()
[Category="Create Commands", Guid="{53DD9583-2FA2-4395-B95E-E9B3ED26BA8A}", Image=".\\icons\\new_interface_element_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InterfaceElementNode, "NewInterfaceElementNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateInterfaceSectionNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   if( Model.GetSelectCount() )
   {
      Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( InterfaceElementNode ) )
      {
         InterfaceElementNode a_oIsInterfaceItem = (InterfaceElementNode)a_oSelNode;
         if( a_oIsInterfaceItem.Element != Enum.InterfaceElements_Interface() )
         {
            commandInfo.SetEnabled( false );
            commandInfo.Status.SetHint( "You can only add an InterfaceSectionNode to an 'Interface' element type." );
         }
      }
   }
}

macro CreateInterfaceSectionNode()
[Category="Create Commands", Guid="{02F5110B-D40A-4D90-ACAC-A9AE12BD32D7}", Image=".\\icons\\new_interface_section_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, InterfaceSectionNode, "NewInterfaceSectionNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateGraphMemberNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "GraphMemberNode" );
}

macro CreateGraphMemberNode()
[Category="Create Commands", Guid="{6CFB79BF-4F24-4909-B742-89F8CFDA4526}", Image=".\\icons\\new_graph_member_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, GraphMemberNode, "NewGraphMemberNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformBooleanNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform bool variable." );
}

macro CreateUniformBooleanNode()
[Category="Create Commands", Guid="{6758062A-A771-4D29-B470-7FF4D60CF447}", Image=".\\icons\\new_boolean_node.bmp"]
{
   BooleanNode a_oBooleanNode = Create.CreateBooleanNode( 2, "myBool", true );
   Create.AddNodeByContext( a_oBooleanNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformIntegerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform int variable." );
}

macro CreateUniformIntegerNode()
[Category="Create Commands", Guid="{644639D4-AB61-43D8-961F-C6A8B49EDB3B}", Image=".\\icons\\new_integer_node.bmp"]
{
   IntegerNode a_oIntegerNode = Create.CreateIntegerNode( 2, "myInt", 0 );
   Create.AddNodeByContext( a_oIntegerNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformIntegerArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform int array variable." );
}

macro CreateUniformIntegerArrayNode()
[Category="Create Commands", Guid="{6B56759F-14ED-4500-8F62-0383B4439C36}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto IntArray a_aiValues;
   a_aiValues.Add( 1 );
   IntegerArrayNode a_oIntegerArrayNode = Create.CreateIntegerArrayNode( 2, "myInt", a_aiValues );
   Create.AddNodeByContext( a_oIntegerArrayNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformFloatNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform float variable." );
}

macro CreateUniformFloatNode()
[Category="Create Commands", Guid="{A9996CCE-4156-4A17-8325-F0BC2AE4F5A9}", Image=".\\icons\\new_float_node.bmp"]
{
   FloatNode a_oFloatNode = Create.CreateFloatNode( 2, "myFloat", 0.0 );
   Create.AddNodeByContext( a_oFloatNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformFloatArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform float array variable." );
}

macro CreateUniformFloatArrayNode()
[Category="Create Commands", Guid="{92654DAB-ADD7-4C9E-82DD-0A68C18345B7}", Image=".\\icons\\new_float_node.bmp"]
{
   auto VariantArray a_adArrayValues;
   a_adArrayValues.Count = 1;
   a_adArrayValues.Objects[0].Double = 0.0;

   FloatArrayNode a_oFloatArrayNode = Create.CreateFloatArrayNode( 2, "myFloat", a_adArrayValues );
   Create.AddNodeByContext( a_oFloatArrayNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformVectorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform vec4 variable." );
}

macro CreateUniformVectorNode()
[Category="Create Commands", Guid="{DE76FA14-0EFC-435F-AC44-C5ADFADDEB87}", Image=".\\icons\\new_vector_node.bmp"]
{
   Vec4 n_vVec4 = new Vec4;
   int a_iDimension = 4;
   VectorNode a_oVectorNode = Create.CreateVectorNode( 2, "myVec", a_iDimension, n_vVec4 );
   Create.AddNodeByContext( a_oVectorNode );
   delete n_vVec4;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformVectorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform vec4 array variable." );
}

macro CreateUniformVectorArrayNode()
[Category="Create Commands", Guid="{44F8ADCA-F716-4C99-A28E-8100E644BD3F}", Image=".\\icons\\new_vector_node.bmp"]
{
   auto VariantArray a_adArrayValues;
   a_adArrayValues.Count = 4;
   a_adArrayValues.Objects[0].Double = 1.0;
   a_adArrayValues.Objects[1].Double = 1.0;
   a_adArrayValues.Objects[2].Double = 1.0;
   a_adArrayValues.Objects[3].Double = 1.0;

   VectorArrayNode a_oVectorArrayNode = Create.CreateVectorArrayNode( 2, "myVec", a_adArrayValues );
   Create.AddNodeByContext( a_oVectorArrayNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformColorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform vec4 variable representing an RGBA color." );
}

macro CreateUniformColorNode()
[Category="Create Commands", Guid="{4AF41DB2-08CB-4B75-9845-87B98624D703}", Image=".\\icons\\new_color_node.bmp"]
{
   Color a_oColor = new Color;
   a_oColor.R = 32;
   a_oColor.G = 32;
   a_oColor.B = 32;
   a_oColor.A = 255;
   int a_iDimension = 4;
   ColorNode a_oColorNode = Create.CreateColorNode( 2, "myColor", a_oColor );
   Create.AddNodeByContext( a_oColorNode );
   delete a_oColor;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformColorArrayNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform vec4 variable representing an array of RGBA colors." );
}

macro CreateUniformColorArrayNode()
[Category="Create Commands", Guid="{636A9CA9-B293-4355-94A6-9E6D394DFF87}", Image=".\\icons\\new_color_node.bmp"]
{
   auto VariantArray a_acArrayValues;
   a_acArrayValues.Count = 4;
   a_acArrayValues.Objects[0].Int = 255;
   a_acArrayValues.Objects[1].Int = 255;
   a_acArrayValues.Objects[2].Int = 255;
   a_acArrayValues.Objects[3].Int = 255;

   ColorArrayNode a_oColorArrayNode = Create.CreateColorArrayNode( 2, "myColor", a_acArrayValues );
   Create.AddNodeByContext( a_oColorArrayNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformMatrixNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform mat4 variable." );
}

macro CreateUniformMatrixNode()
[Category="Create Commands", Guid="{1FBFCBED-604A-4EC2-8DC4-AE524984104D}", Image=".\\icons\\new_matrix_node.bmp"]
{
   Matrix a_oMatrix = new Matrix;
   MatrixNode a_oMatrixNode = Create.CreateMatrixNode( 2, "myMatrix", 4, 4, a_oMatrix );
   Create.AddNodeByContext( a_oMatrixNode );
   delete a_oMatrix;
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUniformSamplerNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   Create.VariableNodeContextFilter( commandInfo, "Creates a new uniform sampler variable." );
}

macro CreateUniformSamplerNode()
[Category="Create Commands", Guid="{2EF34A31-07AD-4EA8-8216-6D633D7EA6F1}", Image=".\\icons\\new_sampler_node.bmp"]
{
   int a_nSelIndex = 0;
   Group a_oSelGroup = (Group)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   int a_nSamplerIndex = Create.GetSamplerIndex( a_oSelGroup );
   string a_sVariable = "SPA_Texture" + a_nSamplerIndex;

   SamplerNode a_oSamplerNode = Create.CreateSamplerNode( 2, a_sVariable, 1 );
   Create.AddNodeByContext( a_oSamplerNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateScriptFile_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, FolderConfigNode,
      "Creates a new script file on disk." );
}

macro CreateScriptFile()
[Category="Create Commands", Guid="{1BE16F55-53C5-4125-B36A-CF333AB28408}", Image=".\\icons\\generic_script_icon.bmp"]
{
   for( int sel = 0; sel < Model.GetSelectCount(); ++sel )
   {
      FolderConfigNode a_oFolderConfigNode =
         (FolderConfigNode)Model.GetSelectedNode( sel ).GetNode();

      string a_sNewScriptFile = Application.BrowseFileSave( 3,
         "Script Source Files (*.ssl)|*.ssl|All Files (*.*)|*.*||", a_oFolderConfigNode.GetAbsolutePath(),
         "Enter the name of the script file you wish to create:" );

      auto FilePath a_oNewFilePath = new FilePath( a_sNewScriptFile );

      if( a_oNewFilePath.GetPath() == "" )
      {
         return;
      }
      else
      if( a_oNewFilePath.FileExists() )
      {
         Application.MessageBox( 0, "You cannot overwrite an existing file while creating a new file.", "Warning" );
         return;
      }

      if( SpaFileUtil.CreateAsciiFile( a_sNewScriptFile ) )
      {
         FileConfigNode a_oFileConfigNode = new FileConfigNode;
         a_oNewFilePath.RemoveFilePath();
         a_oFileConfigNode.Name = a_oNewFilePath.GetPath();
         a_oFileConfigNode.BasePath = a_oNewFilePath.GetPath();
         Model.AddNode( a_oFileConfigNode, a_oFolderConfigNode, -1 );
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTypeRepNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "TypeRepNode" );
}

macro CreateTypeRepNode()
[Category="Create Commands", Guid="{853912C3-7AA0-4687-83C4-0AEC0CE1FD15}", Image=".\\icons\\new_type_rep_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, TypeRepNode, "NewTypeRepNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateCommandRepNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "CommandRepNode" );
}

macro CreateCommandRepNode()
[Category="Create Commands", Guid="{C2C3F1BB-C28E-4402-9075-5E2CA18764D2}", Image=".\\icons\\new_command_rep_node.bmp"]
{
   List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, CommandRepNode, "NewCommandRepNode", nodes, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateDataMemberNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCreateContext.TestContext( commandInfo, "DataMemberNode" );
}

macro CreateDataMemberNode()
[Category="Create Commands", Guid="{1288BA6A-CA7B-42E4-8978-923666C3AE11}", Image=".\\icons\\new_data_member_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   int a_nDataMemberType = 0;

   if( a_oSelNode && a_oSelNode.IsDerived( DataMemberNode ) )
   {
      DataMemberNode a_oSelData = (DataMemberNode)a_oSelNode;
      if( a_oSelData.PropertyItemType == Enum.PropertyItemType_Enumeration() )
      {
         a_nDataMemberType = Enum.PropertyItemType_EnumerationItem();
      }
   }

   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, DataMemberNode, "NewDataMemberNode", nodes, -1 );

   // Configure the light nodes.
   for( int i = 0; i < nodes.GetCount(); ++i )
   {
      DataMemberNode a_oDataMemberNode = (DataMemberNode)nodes.Get( i );
      a_oDataMemberNode.PropertyItemType = a_nDataMemberType;
   }

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVariableExpressionNode_OnUpdate( CommandPresentationModuleInfo commandInfo,
   string p_sExpressionType )
{
   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Select a single node." );
      return;
   }

   auto TypeInfoArray types;
   types.Add( ShaderDeclarationNode );
   types.Add( MainFunctionNode );
   types.Add( DeclareFunctionNode );
   types.Add( StatementBlockNode );
   types.Add( IncludeSourceNode );
   types.Add( Group );
   bool a_bEnabled = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bEnabled );
   if( a_bEnabled )
   {
      commandInfo.Status.SetHint( "Creates a new " + p_sExpressionType + " assignment expression" );
   }
   else
   {
      string a_sHint = "Select a node of type IncludeSourceNode, ShaderDeclarationNode, MainFunctionNode, DeclareFunctionNode, or StatementBlockNode.";
      commandInfo.Status.SetHint( a_sHint );
      return;
   }
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bool" );
}

macro CreateBooleanAssignmentExpression()
[Category="Expression Commands", Guid="{386E90CD-BB80-44EA-9C50-CD8D11F173C8}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   Template.CreateBooleanExpressionNodeAssignment();
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bool array" );
}

macro CreateBooleanArrayAssignmentExpression()
[Category="Expression Commands", Guid="{ED1D32E1-29B6-4B55-A00C-0C6ACAEE3732}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   // Set the size to zero so that we can choose a BoolArray of any dimension.
   Template.CreateBooleanArrayExpressionNodeAssignment( 0 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec2" );
}

macro CreateBooleanVector2AssignmentExpression()
[Category="Expression Commands", Guid="{4ACD58EC-2F9A-4689-A605-B338BE7D9409}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorExpressionNodeAssignment( Enum.GLSL_DataType_Vec2() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec3" );
}

macro CreateBooleanVector3AssignmentExpression()
[Category="Expression Commands", Guid="{23236303-0197-4CE7-8416-29454EA34C55}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorExpressionNodeAssignment( Enum.GLSL_DataType_Vec3() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec4" );
}

macro CreateBooleanVector4AssignmentExpression()
[Category="Expression Commands", Guid="{13675076-FF63-4C9F-876C-176A3DF44FD0}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorExpressionNodeAssignment( Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec2 array" );
}

macro CreateBooleanVector2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{DB7C136C-DD93-45C3-9950-4DBE3D11F792}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec3 array" );
}

macro CreateBooleanVector3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{630C6F73-7D7F-42D4-8AEE-3DD340EE8040}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateBooleanVector4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "bvec4 array" );
}

macro CreateBooleanVector4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{4DD77038-E2E3-4EAB-965B-1451408A4997}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateBooleanVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "int" );
}

macro CreateIntegerAssignmentExpression()
[Category="Expression Commands", Guid="{9FBF8FF5-AF7D-49B2-96B3-33FA7AF52014}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   Template.CreateIntegerExpressionNodeAssignment();
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "int array" );
}

macro CreateIntegerArrayAssignmentExpression()
[Category="Expression Commands", Guid="{A5548E48-693B-416E-AFD0-05059ABFE6FD}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   // Set the size to zero so that we can choose an IntArray of any dimension.
   Template.CreateIntegerArrayExpressionNodeAssignment( 0 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec2" );
}

macro CreateIntegerVector2AssignmentExpression()
[Category="Expression Commands", Guid="{DD60C6E7-40E2-4867-8910-335CBCC13884}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorExpressionNodeAssignment( 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec3" );
}

macro CreateIntegerVector3AssignmentExpression()
[Category="Expression Commands", Guid="{C9608988-E295-4E31-8F5F-ADEA26B73B5B}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorExpressionNodeAssignment( 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec4" );
}

macro CreateIntegerVector4AssignmentExpression()
[Category="Expression Commands", Guid="{F38EC5E1-00CC-4F66-9EE5-675EB9D0EEDF}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorExpressionNodeAssignment( 4 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVectorArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec4 array" );
}

macro CreateIntegerVectorArrayAssignmentExpression()
[Category="Expression Commands", Guid="{CB478D70-ACFA-4BC2-8119-2BB72B6DA45A}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec2 array" );
}

macro CreateIntegerVector2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{6CAB51E0-34F5-47EE-96D8-F81DF8C0E4D2}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec3 array" );
}

macro CreateIntegerVector3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{B93CAB6C-7718-4B27-A57E-6F56722817A7}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerVector4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "ivec4 array" );
}

macro CreateIntegerVector4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{48CFDC5A-A0E4-4CB5-A3F3-90CB1E4C2512}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uint" );
}

macro CreateUnsignedIntegerAssignmentExpression()
[Category="Expression Commands", Guid="{949446FF-83EC-4070-ADBB-05026F0580D9}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerExpressionNodeAssignment();
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uint array" );
}

macro CreateUnsignedIntegerArrayAssignmentExpression()
[Category="Expression Commands", Guid="{83E75AE5-44E2-4A52-9E94-358DA780B34F}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   // Set the size to zero so that we can choose a UintArray of any dimension.
   Template.CreateUnsignedIntegerArrayExpressionNodeAssignment( 0 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec2" );
}

macro CreateUnsignedIntegerVector2AssignmentExpression()
[Category="Expression Commands", Guid="{4F9FC334-5596-48E3-B435-65F5C7B85CB6}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorExpressionNodeAssignment( 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec3" );
}

macro CreateUnsignedIntegerVector3AssignmentExpression()
[Category="Expression Commands", Guid="{1D390051-03D2-47BF-A117-D20EAE5C12F3}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorExpressionNodeAssignment( 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec4" );
}

macro CreateUnsignedIntegerVector4AssignmentExpression()
[Category="Expression Commands", Guid="{42271959-99FF-4C9A-B9AF-5B270B12DA22}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorExpressionNodeAssignment( 4 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec2 array" );
}

macro CreateUnsignedIntegerVector2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{3C039612-5F8D-4B9E-A85A-0E0F8A238BB0}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec3 array" );
}

macro CreateUnsignedIntegerVector3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{D11EA2E3-5AB6-4072-89FC-DEE1D64994A4}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateUnsignedIntegerVector4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec4 array" );
}

macro CreateUnsignedIntegerVector4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{C1E33A50-1C22-4328-A85C-60E37EF737EA}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateUnsignedIntegerVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateFloatAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "float" );
}

macro CreateFloatAssignmentExpression()
[Category="Expression Commands", Guid="{71B2D207-C47D-4043-B520-BAD01900E0B1}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   Template.CreateFloatExpressionNodeAssignment();
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateFloatArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "float array" );
}

macro CreateFloatArrayAssignmentExpression()
[Category="Expression Commands", Guid="{67E656DF-B6A3-42E8-A30A-AA080FD6D42A}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   Template.CreateFloatArrayExpressionNodeAssignment( 0 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "vec2" );
}

macro CreateVector2AssignmentExpression()
[Category="Expression Commands", Guid="{56B5AB4F-7A5C-4CF9-84B1-956D29EDCCBE}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateVectorExpressionNodeAssignment( 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "vec3" );
}

macro CreateVector3AssignmentExpression()
[Category="Expression Commands", Guid="{D373D62C-25C4-45C8-A80D-E00002FEB91A}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateVectorExpressionNodeAssignment( 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "vec4" );
}

macro CreateVector4AssignmentExpression()
[Category="Expression Commands", Guid="{BADC7B78-E8DE-4AE9-9936-AB9C7FE14222}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateVectorExpressionNodeAssignment( 4 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec2 array" );
}

macro CreateVector2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{E3E8089E-4868-494E-8E96-ADEE1FB699A1}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   Template.CreateVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec3 array" );
}

macro CreateVector3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{25BE3D48-0002-4DDE-8200-78ACEC01BDBF}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   Template.CreateVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateVector4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "uvec4 array" );
}

macro CreateVector4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{A4EA3531-D2BE-419C-B3E5-7AE8F6B7AE80}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   Template.CreateVectorArrayExpressionNodeAssignment( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x2" );
}

macro CreateMatrix2x2AssignmentExpression()
[Category="Expression Commands", Guid="{65663DC0-208C-4C31-B2BA-8B24A0B10877}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 2, 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x3" );
}

macro CreateMatrix2x3AssignmentExpression()
[Category="Expression Commands", Guid="{C05AF81B-C699-4336-8580-0C3008FC6870}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 2, 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x4" );
}

macro CreateMatrix2x4AssignmentExpression()
[Category="Expression Commands", Guid="{AD2481E4-474B-44CE-B24B-BCE06F103A94}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 2, 4 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x2" );
}

macro CreateMatrix3x2AssignmentExpression()
[Category="Expression Commands", Guid="{2CC04FE2-9B98-4645-B17F-92E56DF456BF}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 3, 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x3" );
}

macro CreateMatrix3x3AssignmentExpression()
[Category="Expression Commands", Guid="{088BE52E-4F49-4A72-936D-72F32088240A}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 3, 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x4" );
}

macro CreateMatrix3x4AssignmentExpression()
[Category="Expression Commands", Guid="{E7346692-571F-44D8-A35B-99BD7022A412}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 3, 4 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x2AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x2" );
}

macro CreateMatrix4x2AssignmentExpression()
[Category="Expression Commands", Guid="{18D4E889-C44B-49F8-9D91-6D422A59EC19}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 4, 2 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x3AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x3" );
}

macro CreateMatrix4x3AssignmentExpression()
[Category="Expression Commands", Guid="{A3122397-CC66-450A-B659-EB5322ADFE40}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 4, 3 );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x4AssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x4" );
}

macro CreateMatrix4x4AssignmentExpression()
[Category="Expression Commands", Guid="{E0B456DD-4B44-4913-A892-F93B861F2526}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   Template.CreateMatrixExpressionNodeAssignment( 4, 4 );
}

function void PopulateWithTypeNames( StrList p_slTypes )
{
   p_slTypes.Add( "R VAL" );
   p_slTypes.Add( "Bool" );
   p_slTypes.Add( "BoolArray" );
   p_slTypes.Add( "Bvec2" );
   p_slTypes.Add( "Bvec3" );
   p_slTypes.Add( "Bvec4" );
   p_slTypes.Add( "Bvec2Array" );
   p_slTypes.Add( "Bvec3Array" );
   p_slTypes.Add( "Bvec4Array" );
   p_slTypes.Add( "Int" );
   p_slTypes.Add( "IntArray" );
   p_slTypes.Add( "Ivec2" );
   p_slTypes.Add( "Ivec3" );
   p_slTypes.Add( "Ivec4" );
   p_slTypes.Add( "Ivec2Array" );
   p_slTypes.Add( "Ivec3Array" );
   p_slTypes.Add( "Ivec4Array" );
   p_slTypes.Add( "Uint" );
   p_slTypes.Add( "UintArray" );
   p_slTypes.Add( "Uvec2" );
   p_slTypes.Add( "Uvec3" );
   p_slTypes.Add( "Uvec4" );
   p_slTypes.Add( "Uvec2Array" );
   p_slTypes.Add( "Uvec3Array" );
   p_slTypes.Add( "Uvec4Array" );
   p_slTypes.Add( "Float" );
   p_slTypes.Add( "FloatArray" );
   p_slTypes.Add( "Vec2" );
   p_slTypes.Add( "Vec3" );
   p_slTypes.Add( "Vec4" );
   p_slTypes.Add( "Vec2Array" );
   p_slTypes.Add( "Vec3Array" );
   p_slTypes.Add( "Vec4Array" );
   p_slTypes.Add( "Color" );
   p_slTypes.Add( "ColorArray" );
   p_slTypes.Add( "Mat2x2" );
   p_slTypes.Add( "Mat2x3" );
   p_slTypes.Add( "Mat2x4" );
   p_slTypes.Add( "Mat3x2" );
   p_slTypes.Add( "Mat3x3" );
   p_slTypes.Add( "Mat3x4" );
   p_slTypes.Add( "Mat4x2" );
   p_slTypes.Add( "Mat4x3" );
   p_slTypes.Add( "Mat4x4" );
   p_slTypes.Add( "Mat2x2Array" );
   p_slTypes.Add( "Mat2x3Array" );
   p_slTypes.Add( "Mat2x4Array" );
   p_slTypes.Add( "Mat3x2Array" );
   p_slTypes.Add( "Mat3x3Array" );
   p_slTypes.Add( "Mat3x4Array" );
   p_slTypes.Add( "Mat4x2Array" );
   p_slTypes.Add( "Mat4x3Array" );
   p_slTypes.Add( "Mat4x4Array" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x2 array" );
}

macro CreateMatrix2x2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{1D82FB94-FBC8-48B4-89FD-9F7E91571A8F}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 2, 2, 4, "Matrix2x2 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x3 array" );
}

macro CreateMatrix2x3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{8507A108-EB09-41AE-85EC-F4BEDA483BD0}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 2, 3, 4, "Matrix2x3 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix2x4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat2x4 array" );
}

macro CreateMatrix2x4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{A59D8723-7DCD-4338-B625-8F3CEE053E75}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 2, 4, 4, "Matrix2x4 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x2 array" );
}

macro CreateMatrix3x2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{01FFB27B-6279-4C97-AD56-CD29AFFDF683}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 3, 2, 4, "Matrix3x2 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x3 array" );
}

macro CreateMatrix3x3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{B0F4012D-5512-476A-8EE7-452F84CAA266}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 3, 3, 4, "Matrix3x2 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix3x4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat3x4 array" );
}

macro CreateMatrix3x4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{D22F4465-21E3-42BF-A4D7-5A03E409394C}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 3, 4, 4, "Matrix3x4 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x2ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x2 array" );
}

macro CreateMatrix4x2ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{9D4A2F89-9D56-4EF3-9796-514A6AC18B72}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 4, 2, 4, "Matrix4x2 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x3ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x3 array" );
}

macro CreateMatrix4x3ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{0AE849C4-4ACA-4447-99F2-D8D68D0693F8}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   Template.CreateMatrixArrayExpressionNodeAssignment( 4, 3, 4, "Matrix4x3 Array Assignment Expression" );
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateMatrix4x4ArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "mat4x4 array" );
}

macro CreateMatrix4x4ArrayAssignmentExpression()
[Category="Expression Commands", Guid="{ECD3DF78-E644-4F68-848E-CB38731138E8}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   auto StrList a_slTypes;
   PopulateWithTypeNames( a_slTypes );
   for( int i = 0; i < a_slTypes.GetCount(); ++i )
   {
      Template.CreateMatrixArrayExpressionNodeAssignment( 4, 4, 4, a_slTypes.GetAt( i ) );
   }
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateStructAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "struct" );
}

macro CreateStructAssignmentExpression()
[Category="Expression Commands", Guid="{626E8053-7CCB-4E1A-B8BC-6F83DBF3600C}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   Template.CreateStructExpressionNodeAssignment();
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateStructArrayAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateVariableExpressionNode_OnUpdate( commandInfo, "struct array" );
}

macro CreateStructArrayAssignmentExpression()
[Category="Expression Commands", Guid="{428AF2EE-36A6-410B-8C16-40A6655C442D}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   List nodes = new List;
   ValidateNodeCreateContext.CreateNodes( Model, ExpressionNode, "Declare Struct Instance Array", nodes, -1 );
   ExpressionNode a_oExpressionNode;
   for( int node = 0; node < nodes.GetCount(); ++node )
   {
      a_oExpressionNode = (ExpressionNode)nodes.Get(node);
   }

   // Create a StructExpressionNode
   StructExpressionNode a_oLeftStructExpressionNode =
      Create.CreateStructExpressionNode( "Struct Expression", Enum.ExpressionSide_Left(), "" );
   a_oLeftStructExpressionNode.MakeExpression();
   a_oLeftStructExpressionNode.GenerateExpression( StructExpressionGenerator );
   a_oLeftStructExpressionNode.IsArray = true;
   a_oLeftStructExpressionNode.ArrayDimension = 4;

   // Create a BinaryOperatorNode
   BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
   a_oBinaryOperatorNode.Name = "Assign";
   a_oBinaryOperatorNode.Operator = Enum.BinaryOperator_Assign();

   // Create a StructExpressionNode
   StructExpressionNode a_oRightStructExpressionNode =
      Create.CreateStructExpressionNode( "Struct Expression", Enum.ExpressionSide_Right(), "" );
   a_oRightStructExpressionNode.MakeExpression();
   a_oRightStructExpressionNode.GenerateExpression( StructExpressionGenerator );
   a_oRightStructExpressionNode.IsArray = true;
   a_oRightStructExpressionNode.ArrayDimension = 4;

   // Wire the expression.
   Create.WireExpression(  a_oLeftStructExpressionNode,
                           a_oRightStructExpressionNode,
                           a_oBinaryOperatorNode );

   // Add the complete declaration to the model.
   Model.AddNode( a_oLeftStructExpressionNode, a_oExpressionNode, -1 );
   Model.AddNode( a_oBinaryOperatorNode, a_oExpressionNode, -1 );
   Model.AddNode( a_oRightStructExpressionNode, a_oExpressionNode, -1 );

   delete nodes;
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void ValidateExpressionCreateContext( CommandPresentationModuleInfo commandInfo,
   string p_sOperator )
{
   SpaSelectUtil.ValidateSelectionForExpression( commandInfo, p_sOperator );
}

function void CreateAddExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateExpressionCreateContext( commandInfo, "add [ x + y ]" );
}

function void CreateSubtractExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateExpressionCreateContext( commandInfo, "subtract [ x - y ]" );
}

function void CreateMultiplyExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateExpressionCreateContext( commandInfo, "multiply [ x * y ]" );
}

function void CreateDivideExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateExpressionCreateContext( commandInfo, "divide [ x / y ]" );
}

function void CreateModulusExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateExpressionCreateContext( commandInfo, "modulus [ x % y ]" );
}

function void CreateOperatorExpression( string p_sOperator, int p_eOperator )
{
   Group a_oSelectedGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   TypeInformation a_oTypeInfo;
   if( a_oSelectedGroup.IsDerived( VariableExpressionNode ) )
   {
      a_oTypeInfo = a_oSelectedGroup.GetType();
   }
   else
   {
      a_oTypeInfo = FloatExpressionNode;
   }

   auto ExpressionInfo a_oExpressionInfo;
   if( a_oSelectedGroup && a_oSelectedGroup.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oSelExpression =
         (VariableExpressionNode)a_oSelectedGroup;
      a_oSelExpression.GetParams( a_oExpressionInfo );
   }

   if( p_eOperator == Enum.BinaryOperator_Modulus() )
   {
      a_oTypeInfo = IntegerExpressionNode;
   }

   Create.NewExpression(
      a_oTypeInfo,
      a_oTypeInfo,
      p_sOperator,
      p_eOperator,
      a_oExpressionInfo,
      a_oSelectedGroup );

   if( a_oSelectedGroup.IsDerived( ScalarExpressionNode ) )
   {
      ScalarExpressionNode a_oScalarExpressionNode =
         (ScalarExpressionNode)Model.EditNode( a_oSelectedGroup );
      a_oScalarExpressionNode.Clear();
      a_oScalarExpressionNode.NodeSelector.Clear();
      a_oScalarExpressionNode.MakeConstructor();
      a_oScalarExpressionNode.Name =
         Graph.GenerateConstructorName( a_oScalarExpressionNode );
   }
   else
   if( a_oSelectedGroup.IsDerived( VectorExpressionNode ) )
   {
      VectorExpressionNode a_oVectorExpressionNode =
         (VectorExpressionNode)Model.EditNode( a_oSelectedGroup );
      int a_nDimension = a_oVectorExpressionNode.Dimension;
      a_oVectorExpressionNode.Clear();
      a_oVectorExpressionNode.Expression = "";
      a_oVectorExpressionNode.Dimension = a_nDimension;
      a_oVectorExpressionNode.MakeConstructor();
      a_oVectorExpressionNode.DataSource = null;
      a_oVectorExpressionNode.NodeSelector.Clear();
      a_oVectorExpressionNode.Name =
         Graph.GenerateConstructorName( a_oVectorExpressionNode );
   }
   else
   if( a_oSelectedGroup.IsDerived( MatrixExpressionNode ) )
   {
      MatrixExpressionNode a_oMatrixExpressionNode =
         (MatrixExpressionNode)Model.EditNode( a_oSelectedGroup );
      int a_nCols = a_oMatrixExpressionNode.Cols;
      int a_nRows = a_oMatrixExpressionNode.Rows;
      a_oMatrixExpressionNode.Clear();
      a_oMatrixExpressionNode.Expression = "";
      a_oMatrixExpressionNode.Cols = a_nCols;
      a_oMatrixExpressionNode.Rows = a_nRows;
      a_oMatrixExpressionNode.NodeSelector.Clear();
      a_oMatrixExpressionNode.MakeConstructor();
      a_oMatrixExpressionNode.Name =
         Graph.GenerateConstructorName( a_oMatrixExpressionNode );
   }
}

macro CreateAddExpression()
[Category="Expression Commands", Guid="{6457ECC1-D823-4F16-85A3-3F064530CD54}", Image=".\\icons\\new_add_expression.bmp"]
{
   CreateOperatorExpression( "Add", Enum.BinaryOperator_Add() );
}

macro CreateSubtractExpression()
[Category="Expression Commands", Guid="{C919C5E9-06D6-4848-9DCF-14B4D7B6F101}", Image=".\\icons\\new_subtract_expression.bmp"]
{
   CreateOperatorExpression( "Subtract", Enum.BinaryOperator_Subtract() );
}

macro CreateMultiplyExpression()
[Category="Expression Commands", Guid="{774DA178-BD7B-4CBE-846B-9DAEE7F52034}", Image=".\\icons\\new_multiply_expression.bmp"]
{
   CreateOperatorExpression( "Multiply", Enum.BinaryOperator_Multiply() );
}

macro CreateDivideExpression()
[Category="Expression Commands", Guid="{2F04FE5C-0D09-4F53-BC09-8D36F607A965}", Image=".\\icons\\new_divide_expression.bmp"]
{
   CreateOperatorExpression( "Divide", Enum.BinaryOperator_Divide() );
}

macro CreateModulusExpression()
[Category="Expression Commands", Guid="{CFFFB52B-E8D7-47DE-A7F0-57065E07D410}", Image=".\\icons\\new_modulus_expression.bmp"]
{
   CreateOperatorExpression( "Mod", Enum.BinaryOperator_Modulus() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_VertexShader_GlVertexID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_VertexID." );
}

macro CreateBuiltIn_VertexShader_GlVertexID()
[Category="Create Commands", Guid="{A37B9F8A-0BDE-4C9B-8970-B9EB144AC86E}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_VertexID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_VertexShader_GlInstanceID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_InstanceID." );
}

macro CreateBuiltIn_VertexShader_GlInstanceID()
[Category="Create Commands", Guid="{1225A0DF-3CCC-4675-8176-3F30D31CE458}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_InstanceID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_VertexShader_GlPerVertex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, VertexDeclarationNode, "Creates out gl_PerVertex." );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateBuiltIn_VertexShader_GlPerVertex()
[Category="Create Commands", Guid="{92653F96-E7FF-4C3B-8128-21EE60C34141}", Image=".\\icons\\new_interface_block_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Group a_oSelGroup = (Group)a_oSelNode;

   // Add built-in child item.
   auto List a_lChildNodes;
   Create.CreateGlInterfaceItems( a_lChildNodes );

   InterfaceBlockNode a_oInterfaceBlockNode =
      Create.CreateInterfaceBlockDeclaration(
         a_lChildNodes,
         "Declare gl_PerVertex",
         "gl_PerVertex",
         "",
         "out",
         false );

   Model.AddNode( a_oInterfaceBlockNode, a_oSelGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlPatchVerticesIn_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_PatchVerticesIn." );
}

macro CreateBuiltIn_ControlShader_GlPatchVerticesIn()
[Category="Create Commands", Guid="{5AF2CA2C-F1EF-4700-97EC-2D2D019BC2DD}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerArrayVariable( Enum.Binding_Input(), "gl_PatchVerticesIn", 0, false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlPrimitiveID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_PrimitiveID." );
}

macro CreateBuiltIn_ControlShader_GlPrimitiveID()
[Category="Create Commands", Guid="{070D164A-EE98-44AC-A6A4-49BA7BC7AF5D}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerArrayVariable( Enum.Binding_Input(), "gl_PrimitiveID", 0, false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlInvocationID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_InvocationID." );
}

macro CreateBuiltIn_ControlShader_GlInvocationID()
[Category="Create Commands", Guid="{4462D7D6-0729-436A-8DFA-49B988AE0422}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_InvocationID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlTessLevelOuter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates patch out float gl_TessLevelOuter[4]." );
}

macro CreateBuiltIn_ControlShader_GlTessLevelOuter()
[Category="Create Commands", Guid="{802A5BD1-1AB9-460E-9A31-0C91F649E255}", Image=".\\icons\\new_float_node.bmp"]
{
   int a_nMaxOuterDim = 4;
   Create.CreateTessellationBuiltIn( "gl_TessLevelInner", a_nMaxOuterDim, Enum.GLSL_Qualifier_Out() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlTessLevelInner_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates patch out float gl_TessLevelInner[2]." );
}

macro CreateBuiltIn_ControlShader_GlTessLevelInner()
[Category="Create Commands", Guid="{8BF9019D-66B4-415D-9E01-710F1040BC6B}", Image=".\\icons\\new_float_node.bmp"]
{
   int a_nMaxInnerDim = 2;
   Create.CreateTessellationBuiltIn( "gl_TessLevelInner", a_nMaxInnerDim, Enum.GLSL_Qualifier_Out() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_ControlShader_GlPerVertex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ControlDeclarationNode, "Creates in gl_PerVertex and out gl_PerVertex." );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateBuiltIn_ControlShader_GlPerVertex()
[Category="Create Commands", Guid="{D1AB81EA-BA6D-4B92-B343-40FB682D1504}", Image=".\\icons\\new_interface_block_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Group a_oSelGroup = (Group)a_oSelNode;

   auto List a_lInputChildNodes;
   Create.CreateGlInterfaceItems( a_lInputChildNodes );

   auto List a_lOutputChildNodes;
   Create.CreateGlInterfaceItems( a_lOutputChildNodes );

   InterfaceBlockNode a_oInterfaceBlockNodeIn =
      Create.CreateInterfaceBlockDeclaration(
         a_lInputChildNodes,
         "Declare in gl_PerVertex",
         "gl_PerVertex",
         "gl_in",
         "in",
         true );

   InterfaceBlockNode a_oInterfaceBlockNodeOut =
      Create.CreateInterfaceBlockDeclaration(
         a_lOutputChildNodes,
         "Declare out gl_PerVertex",
         "gl_PerVertex",
         "gl_out",
         "out",
         true );

   Model.AddNode( a_oInterfaceBlockNodeIn, a_oSelGroup, -1 );
   Model.AddNode( a_oInterfaceBlockNodeOut, a_oSelGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_EvaluationShader_GlTessCoord_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in vec3 gl_TessCoord." );
}

macro CreateBuiltIn_EvaluationShader_GlTessCoord()
[Category="Create Commands", Guid="{81F73B05-8507-4B28-9C79-7A9D554FB09F}", Image=".\\icons\\new_vector_node.bmp"]
{
   int a_nDimension = 3;
   Create.GlBuiltInVectorVariable( Enum.Binding_Input(), "gl_TessCoord", a_nDimension );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_EvaluationShader_GlTessLevelOuter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates patch in float gl_TessLevelOuter[4]." );
}

macro CreateBuiltIn_EvaluationShader_GlTessLevelOuter()
[Category="Create Commands", Guid="{14183B2A-AC6E-4F33-ACC3-149F8B90E37A}", Image=".\\icons\\new_float_node.bmp"]
{
   int a_nMaxOuterDim = 4;
   Create.CreateTessellationBuiltIn( "gl_TessLevelOuter", a_nMaxOuterDim, Enum.GLSL_Qualifier_In() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_EvaluationShader_GlTessLevelInner_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates patch in float gl_TessLevelInner[2]." );
}

macro CreateBuiltIn_EvaluationShader_GlTessLevelInner()
[Category="Create Commands", Guid="{9EE760D5-34A6-42CE-8902-7DFD36ED1D50}", Image=".\\icons\\new_float_node.bmp"]
{
   int a_nMaxInnerDim = 2;
   Create.CreateTessellationBuiltIn( "gl_TessLevelInner", a_nMaxInnerDim, Enum.GLSL_Qualifier_In() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_EvaluationShader_GlPerVertex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, EvaluationDeclarationNode, "Creates in gl_PerVertex and out gl_PerVertex." );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateBuiltIn_EvaluationShader_GlPerVertex()
[Category="Create Commands", Guid="{D58E95C2-471D-4EDD-A1A8-0DF8718D8183}", Image=".\\icons\\new_interface_block_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Group a_oSelGroup = (Group)a_oSelNode;

   auto List a_lInputChildNodes;
   Create.CreateGlInterfaceItems( a_lInputChildNodes );

   auto List a_lOutputChildNodes;
   Create.CreateGlInterfaceItems( a_lOutputChildNodes );

   InterfaceBlockNode a_oInterfaceBlockNodeIn =
      Create.CreateInterfaceBlockDeclaration(
         a_lInputChildNodes,
         "Declare in gl_PerVertex",
         "gl_PerVertex",
         "gl_in",
         "in",
         true );

   InterfaceBlockNode a_oInterfaceBlockNodeOut =
      Create.CreateInterfaceBlockDeclaration(
         a_lOutputChildNodes,
         "Declare out gl_PerVertex",
         "gl_PerVertex",
         "",
         "out",
         false );

   Model.AddNode( a_oInterfaceBlockNodeIn, a_oSelGroup, -1 );
   Model.AddNode( a_oInterfaceBlockNodeOut, a_oSelGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlPrimitiveIDIn_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_PrimitiveIDIn." );
}

macro CreateBuiltIn_GeometryShader_GlPrimitiveIDIn()
[Category="Create Commands", Guid="{2C53E3AA-D064-4CD2-9013-74268B498E9B}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_PrimitiveIDIn", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlInvocationID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_InvocationID." );
}

macro CreateBuiltIn_GeometryShader_GlInvocationID()
[Category="Create Commands", Guid="{FB7CA2F2-9255-4AD9-B8A7-57B90B004AFB}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_InvocationID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlPrimitiveID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates out int gl_PrimitiveID." );
}

macro CreateBuiltIn_GeometryShader_GlPrimitiveID()
[Category="Create Commands", Guid="{3778B569-DDCA-43CE-B78B-C1C69505EDB6}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Output(), "gl_PrimitiveID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlLayer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates out int gl_Layer." );
}

macro CreateBuiltIn_GeometryShader_GlLayer()
[Category="Create Commands", Guid="{50979184-8A5A-4DBB-A4B8-801CA96808A2}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Output(), "gl_Layer", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlViewportIndex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates out int gl_ViewportIndex." );
}

macro CreateBuiltIn_GeometryShader_GlViewportIndex()
[Category="Create Commands", Guid="{ECF9C61F-01CD-485F-AAEC-07E68A4EAAA1}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Output(), "gl_ViewportIndex", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_GeometryShader_GlPerVertex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, GeometryDeclarationNode, "Creates in gl_PerVertex and out gl_PerVertex." );
   GPU.ValidateShadingLanguageVersion( 140, commandInfo );
}

macro CreateBuiltIn_GeometryShader_GlPerVertex()
[Category="Create Commands", Guid="{DF0AE88D-C80E-44FD-B7FF-827F2010DB82}", Image=".\\icons\\new_interface_block_node.bmp"]
{
   int a_nSelIndex = 0;
   Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
   Group a_oSelGroup = (Group)a_oSelNode;

   auto List a_lInputChildNodes;
   Create.CreateGlInterfaceItems( a_lInputChildNodes );

   auto List a_lOutputChildNodes;
   Create.CreateGlInterfaceItems( a_lOutputChildNodes );

   InterfaceBlockNode a_oInterfaceBlockNodeIn =
      Create.CreateInterfaceBlockDeclaration(
         a_lInputChildNodes,
         "Declare in gl_PerVertex",
         "gl_PerVertex",
         "gl_in",
         "in",
         true );

   InterfaceBlockNode a_oInterfaceBlockNodeOut =
      Create.CreateInterfaceBlockDeclaration(
         a_lOutputChildNodes,
         "Declare out gl_PerVertex",
         "gl_PerVertex",
         "",
         "out",
         false );

   Model.AddNode( a_oInterfaceBlockNodeIn, a_oSelGroup, -1 );
   Model.AddNode( a_oInterfaceBlockNodeOut, a_oSelGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlFragCoord_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in vec4 gl_FragCoord." );
}

macro CreateBuiltIn_FragmentShader_GlFragCoord()
[Category="Create Commands", Guid="{168C658A-84A8-47FD-B85D-71F05A9A5547}", Image=".\\icons\\new_vector_node.bmp"]
{
   int a_nDimension = 4;
   Create.GlBuiltInVectorVariable( Enum.Binding_Input(), "gl_FragCoord", a_nDimension );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlFrontFacing_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in bool gl_FrontFacing." );
}

macro CreateBuiltIn_FragmentShader_GlFrontFacing()
[Category="Create Commands", Guid="{30973BAC-6DBA-4E42-BBC0-58A59A19B3B7}", Image=".\\icons\\new_boolean_node.bmp"]
{
   Create.GlBuiltInBooleanVariable( Enum.Binding_Input(), "gl_FrontFacing" );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlClipDistance_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in float gl_ClipDistance." );
}

macro CreateBuiltIn_FragmentShader_GlClipDistance()
[Category="Create Commands", Guid="{4476F7F7-AC9D-4FE7-B517-34BB1A97B7D6}", Image=".\\icons\\new_float_node.bmp"]
{
   int a_nArraySize = 0;
   Create.GlBuiltInFloatArrayVariable( Enum.Binding_Input(), "gl_ClipDistance", a_nArraySize );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlPointCoord_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in vec2 gl_PointCoord." );
}

macro CreateBuiltIn_FragmentShader_GlPointCoord()
[Category="Create Commands", Guid="{41BD0361-6565-4185-8F94-6F1431DC9429}", Image=".\\icons\\new_vector_node.bmp"]
{
   int a_nDimension = 2;
   Create.GlBuiltInVectorVariable( Enum.Binding_Input(), "gl_PointCoord", a_nDimension );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlPrimitiveID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_PrimitiveID." );
}

macro CreateBuiltIn_FragmentShader_GlPrimitiveID()
[Category="Create Commands", Guid="{C053ADFA-C008-4F88-8210-EE459423703E}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_PrimitiveID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlSampleID_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_SampleID." );
}

macro CreateBuiltIn_FragmentShader_GlSampleID()
[Category="Create Commands", Guid="{48BE4FFA-01B8-4BC5-B2EB-BD275C02AB3F}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_SampleID", false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlSamplePosition_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in vec2 gl_SamplePosition." );
}

macro CreateBuiltIn_FragmentShader_GlSamplePosition()
[Category="Create Commands", Guid="{0F50D569-FB0E-451D-A870-E9B729C9BBD1}", Image=".\\icons\\new_vector_node.bmp"]
{
   int a_nDimension = 2;
   Create.GlBuiltInVectorVariable( Enum.Binding_Input(), "gl_SamplePosition", a_nDimension );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlSampleMaskIn_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_SampleMaskIn." );
}

macro CreateBuiltIn_FragmentShader_GlSampleMaskIn()
[Category="Create Commands", Guid="{207F2CA4-737B-4292-8F1A-00D0C9DFFB69}", Image=".\\icons\\new_integer_node.bmp"]
{
   int a_nArraySize = 0;
   Create.GlBuiltInIntegerArrayVariable( Enum.Binding_Input(), "gl_SampleMaskIn", a_nArraySize, false );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlLayer_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_Layer." );
}

macro CreateBuiltIn_FragmentShader_GlLayer()
[Category="Create Commands", Guid="{8B33C30C-F540-422E-AC64-E86AAFF9B23E}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_Layer", true );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlViewportIndex_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates in int gl_ViewportIndex." );
}

macro CreateBuiltIn_FragmentShader_GlViewportIndex()
[Category="Create Commands", Guid="{70AA5AB2-1EEE-43ED-85F9-397E978C16AE}", Image=".\\icons\\new_integer_node.bmp"]
{
   Create.GlBuiltInIntegerVariable( Enum.Binding_Input(), "gl_ViewportIndex", true );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlFragDepth_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates out float gl_FragDepth." );
}

macro CreateBuiltIn_FragmentShader_GlFragDepth()
[Category="Create Commands", Guid="{CE389644-6203-44C6-8370-9EC2DECA06D4}", Image=".\\icons\\new_float_node.bmp"]
{
   double a_dInitialVal = 0.0;
   Create.GlBuiltInFloatVariable( Enum.Binding_Output(), "gl_FragDepth", a_dInitialVal );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateBuiltIn_FragmentShader_GlSampleMask_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ShaderDeclarationNode, "Creates out int gl_SampleMaskIn." );
}

macro CreateBuiltIn_FragmentShader_GlSampleMask()
[Category="Create Commands", Guid="{4E94C8CD-CA0A-4627-AC84-CB7C12FF1214}", Image=".\\icons\\new_integer_node.bmp"]
{
   int a_nArraySize = 0;
   Create.GlBuiltInIntegerArrayVariable( Enum.Binding_Output(), "gl_SampleMask", a_nArraySize, false );
}

////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////

function void ValidateScalarConversionContext( CommandPresentationModuleInfo commandInfo,
   VariableExpressionNode p_oVariableExpressionNode, string p_sInfo )
{
   if( Model.GetSelectCount() > 1 )
   {
      commandInfo.Status.SetHint( "Please select a single VariableExpressionNode" );
      commandInfo.SetEnabled( false );
      return;
   }

   if( ValidateNodeCommandContext.TestContext( commandInfo, VariableExpressionNode, p_sInfo ) )
   {
      SpaSelectUtil.IsExpressionConvertible( commandInfo, p_oVariableExpressionNode );
   }
}

////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////

function void ConvertScalarExpression( TypeInformation p_oNewExpressionType,
   TypeInformation p_oExpressionGenerator )
{
   if( !( p_oNewExpressionType.IsDerived( VariableExpressionNode ) ) )
   {
      string a_sMessage = "p_oNewExpressionType must be derived from <VariableExpressionNode>.";
      Console.Assert( a_sMessage );
      return;
   }

   if( !( p_oExpressionGenerator.IsDerived( VariableExpressionGenerator ) ) )
   {
      string a_sMessage = "p_oExpressionGenerator must be derived from <VariableExpressionGenerator>.";
      Console.Assert( a_sMessage );
      return;
   }

   VariableExpressionNode a_oVariableExpressionNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();

   int a_nExpressionSide = a_oVariableExpressionNode.ExpressionSide;
   int a_nChildIndex = a_oVariableExpressionNode.ChildIndex();
   BinaryOperatorNode a_oBinaryOperatorNode =
      (BinaryOperatorNode)a_oVariableExpressionNode.OperatorDataSource;

   VariableExpressionNode a_oNewVariableExpressionNode =
      (VariableExpressionNode)p_oNewExpressionType.CreateObject();
   a_oNewVariableExpressionNode.Name = a_oVariableExpressionNode.Name;
   a_oNewVariableExpressionNode.ExpressionSide = a_nExpressionSide;

   if( a_nExpressionSide == Enum.ExpressionSide_Left() )
   {
      a_oBinaryOperatorNode.LeftDataSource = a_oNewVariableExpressionNode;
   }
   else
   {
      a_oBinaryOperatorNode.RightDataSource = a_oNewVariableExpressionNode;
   }

   a_oNewVariableExpressionNode.OperatorDataSource = a_oBinaryOperatorNode;
   a_oNewVariableExpressionNode.GenerateExpression( p_oExpressionGenerator );
   Model.AddNode( a_oNewVariableExpressionNode, a_oVariableExpressionNode.Parent(), a_nChildIndex );

   a_oVariableExpressionNode.Clear(); // Always clear before deleting.
   Model.DeleteNode( a_oVariableExpressionNode );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ConvertToBooleanExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto BooleanExpressionNode a_oBooleanExpressionNode;
   string a_sInfo = "Replaces the selected operand with an BooleanExpressionNode.";
   ValidateScalarConversionContext( commandInfo, a_oBooleanExpressionNode, a_sInfo );
}

macro ConvertToBooleanExpression()
[Category="Create Commands", Guid="{BD387861-3D87-4DC1-9EAA-FFE7D79819E4}", Image=".\\icons\\new_boolean_node.bmp"]
{
   ConvertScalarExpression( BooleanExpressionNode, BooleanExpressionGenerator );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ConvertToIntegerExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto IntegerExpressionNode a_oIntegerExpressionNode;
   string a_sInfo = "Replaces the selected operand with an IntegerExpressionNode.";
   ValidateScalarConversionContext( commandInfo, a_oIntegerExpressionNode, a_sInfo );
}

macro ConvertToIntegerExpression()
[Category="Create Commands", Guid="{1E31FD07-3F23-418E-AEF2-F803B3281ACB}", Image=".\\icons\\new_integer_node.bmp"]
{
   ConvertScalarExpression( IntegerExpressionNode, IntegerExpressionGenerator );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ConvertToUnsignedIntegerExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto UnsignedIntegerExpressionNode a_oUnsignedIntegerExpressionNode;
   string a_sInfo = "Replaces the selected operand with an UnsignedIntegerExpressionNode.";
   ValidateScalarConversionContext( commandInfo, a_oUnsignedIntegerExpressionNode, a_sInfo );
}

macro ConvertToUnsignedIntegerExpression()
[Category="Create Commands", Guid="{102DCF51-9FA0-402D-8D35-259C31C72DF4}", Image=".\\icons\\new_integer_node.bmp"]
{
   ConvertScalarExpression( UnsignedIntegerExpressionNode, UnsignedIntegerExpressionGenerator );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ConvertToFloatExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto FloatExpressionNode a_oFloatExpressionNode;
   string a_sInfo = "Replaces the selected operand with a FloatExpressionNode.";
   ValidateScalarConversionContext( commandInfo, a_oFloatExpressionNode, a_sInfo );
}

macro ConvertToFloatExpression()
[Category="Create Commands", Guid="{F6AE03E5-6BDB-442B-9145-8FA638B4F3F3}", Image=".\\icons\\new_float_node.bmp"]
{
   ConvertScalarExpression( FloatExpressionNode, FloatExpressionGenerator );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function int ConvertToVectorExpression( TypeInformation p_oNewExpressionType,
   TypeInformation p_oExpressionGenerator, int p_eExpressionDimension )
{
   if( !( p_oNewExpressionType.IsDerived( VariableExpressionNode ) ) )
   {
      string a_sMessage = "p_oNewExpressionType must be derived from <VariableExpressionNode>.";
      Console.Assert( a_sMessage );
      return 0;
   }

   if( !( p_oExpressionGenerator.IsDerived( VariableExpressionGenerator ) ) )
   {
      string a_sMessage = "p_oExpressionGenerator must be derived from <VariableExpressionGenerator>.";
      Console.Assert( a_sMessage );
      return 0;
   }

   VariableExpressionNode a_oVariableExpressionNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();
   int a_nExpressionSide = a_oVariableExpressionNode.ExpressionSide;
   int a_nChildIndex = a_oVariableExpressionNode.ChildIndex();
   BinaryOperatorNode a_oBinaryOperatorNode =
      (BinaryOperatorNode)a_oVariableExpressionNode.OperatorDataSource;

   VariableExpressionNode a_oNewVariableExpressionNode =
      (VariableExpressionNode)p_oNewExpressionType.CreateObject();
   a_oNewVariableExpressionNode.Name = a_oVariableExpressionNode.Name;
   a_oNewVariableExpressionNode.ExpressionSide = a_nExpressionSide;
   a_oNewVariableExpressionNode.Dimension = p_eExpressionDimension;

   bool a_bRight;
   bool a_bLeft;
   if( a_nExpressionSide == Enum.ExpressionSide_Left() )
   {
      a_oBinaryOperatorNode.LeftDataSource = a_oNewVariableExpressionNode;
      a_bLeft = true;
   }
   else
   {
      a_oBinaryOperatorNode.RightDataSource = a_oNewVariableExpressionNode;
      a_bRight = true;
   }

   a_oNewVariableExpressionNode.OperatorDataSource = a_oBinaryOperatorNode;
   a_oNewVariableExpressionNode.GenerateExpression( p_oExpressionGenerator );

   if( Model.AddNode( a_oNewVariableExpressionNode, a_oVariableExpressionNode.Parent(), a_nChildIndex ) )
   {
      a_oVariableExpressionNode.Clear(); // Always clear before deleting.
      Model.DeleteNode( a_oVariableExpressionNode );
      return 1;
   }
   else
   {
      // Create failed, roll back changes to previous state.
      if( a_bLeft )
      {
         a_oBinaryOperatorNode.LeftDataSource = a_oVariableExpressionNode;
      }
      else
      if( a_bRight )
      {
         a_oBinaryOperatorNode.RightDataSource = a_oVariableExpressionNode;
      }
      delete a_oNewVariableExpressionNode;
      return 0;
   }

   return 0;
}

function string GetVectorConvertString( int p_eDim )
{
   return "Replaces the selected operand with a Vector" + p_eDim + "ExpressionNode.";
}

function void ValidateVectorConversionContext( CommandPresentationModuleInfo commandInfo, TypeInformation p_oNewVectorType, int p_eVectorDim )
{
   if( ValidateNodeCommandContext.TestContext( commandInfo, VariableExpressionNode,
      GetVectorConvertString( p_eVectorDim ) ) )
   {
      auto VariableExpressionNode a_oVariableExpressionNode = (VariableExpressionNode)p_oNewVectorType.CreateObject();
      a_oVariableExpressionNode.Dimension = p_eVectorDim;
      SpaSelectUtil.IsExpressionConvertible( commandInfo, a_oVariableExpressionNode );
   }
}

function void ConvertToBoolVector2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, BooleanVectorExpressionNode, Enum.GLSL_DataType_Vec2() );
}

macro ConvertToBoolVector2Expression()
[Category="Create Commands", Guid="{BE4B77AE-9588-49DD-9127-6B88B764F568}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, Enum.GLSL_DataType_Vec2() );
}

function void ConvertToBoolVector3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, BooleanVectorExpressionNode, Enum.GLSL_DataType_Vec3() );
}

macro ConvertToBoolVector3Expression()
[Category="Create Commands", Guid="{1EE488D0-1A1B-4E51-A114-E00E71EEE25E}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, Enum.GLSL_DataType_Vec3() );
}

function void ConvertToBoolVector4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, BooleanVectorExpressionNode, Enum.GLSL_DataType_Vec4() );
}

macro ConvertToBoolVector4Expression()
[Category="Create Commands", Guid="{1B6F1D79-B65B-4B06-97B0-F9E9D0F7B792}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, Enum.GLSL_DataType_Vec4() );
}

function void ConvertToIntVector2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, IntegerVectorExpressionNode, Enum.GLSL_DataType_Vec2() );
}

macro ConvertToIntVector2Expression()
[Category="Create Commands", Guid="{5FB25FDC-7F82-4B70-A786-224E526154EA}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec2() );
}

function void ConvertToIntVector3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, IntegerVectorExpressionNode, Enum.GLSL_DataType_Vec3() );
}

macro ConvertToIntVector3Expression()
[Category="Create Commands", Guid="{F2A8CA11-FE8C-45A4-805D-D28C5B2AADF2}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec3() );
}

function void ConvertToIntVector4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, IntegerVectorExpressionNode, Enum.GLSL_DataType_Vec4() );
}

macro ConvertToIntVector4Expression()
[Category="Create Commands", Guid="{3627A482-AAC2-4B15-862C-32EE12CF7C37}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec4() );
}

function void ConvertToUintVector2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, UnsignedIntegerVectorExpressionNode, Enum.GLSL_DataType_Vec2() );
}

macro ConvertToUintVector2Expression()
[Category="Create Commands", Guid="{3A94E46E-821B-4C6C-B23D-C1E7BE0A8533}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec2() );
}

function void ConvertToUintVector3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, UnsignedIntegerVectorExpressionNode, Enum.GLSL_DataType_Vec3() );
}

macro ConvertToUintVector3Expression()
[Category="Create Commands", Guid="{928FD370-3A82-4656-9FF1-C18C795E9564}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec3() );
}

function void ConvertToUintVector4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, UnsignedIntegerVectorExpressionNode, Enum.GLSL_DataType_Vec4() );
}

macro ConvertToUintVector4Expression()
[Category="Create Commands", Guid="{C4EFEB4C-B924-406E-B1F3-C2FEEF15F761}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, Enum.GLSL_DataType_Vec4() );
}

function void ConvertToVector2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, VectorExpressionNode, Enum.GLSL_DataType_Vec2() );
}

macro ConvertToVector2Expression()
[Category="Create Commands", Guid="{D313B00C-BCCB-4094-91FB-B5FD52EB7D57}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( VectorExpressionNode, VectorExpressionGenerator, Enum.GLSL_DataType_Vec2() );
}

function void ConvertToVector3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, VectorExpressionNode, Enum.GLSL_DataType_Vec3() );
}

macro ConvertToVector3Expression()
[Category="Create Commands", Guid="{B934C26C-A7D1-4A8F-8891-D34D59C20352}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( VectorExpressionNode, VectorExpressionGenerator, Enum.GLSL_DataType_Vec3() );
}

function void ConvertToVector4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateVectorConversionContext( commandInfo, VectorExpressionNode, Enum.GLSL_DataType_Vec4() );
}

macro ConvertToVector4Expression()
[Category="Create Commands", Guid="{E5B83A5E-6AE9-4D9E-A96C-A77061A15FA7}", Image=".\\icons\\new_vector_node.bmp"]
{
   ConvertToVectorExpression( VectorExpressionNode, VectorExpressionGenerator, Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ValidateMatrixConversionContext( CommandPresentationModuleInfo commandInfo, int p_nCols, int p_nRows )
{
   if( ValidateNodeCommandContext.TestContext( commandInfo, VariableExpressionNode,
      "Replaces the selected operand with a MatrixExpressionNode." ) )
   {
      auto MatrixExpressionNode a_oMatrixExpressionNode;
      a_oMatrixExpressionNode.Cols = p_nCols;
      a_oMatrixExpressionNode.Rows = p_nRows;
      SpaSelectUtil.IsExpressionConvertible( commandInfo, a_oMatrixExpressionNode );
   }
}

function int ConvertToMatrixExpression( int p_nCols, int p_nRows )
{
   VariableExpressionNode a_oVariableExpressionNode =
      (VariableExpressionNode)Model.GetFirstSelectedNode().GetNode();
   int a_nExpressionSide = a_oVariableExpressionNode.ExpressionSide;
   int a_nChildIndex = a_oVariableExpressionNode.ChildIndex();
   BinaryOperatorNode a_oBinaryOperatorNode =
      (BinaryOperatorNode)a_oVariableExpressionNode.OperatorDataSource;

   MatrixExpressionNode a_oMatrixExpressionNode =
      Create.CreateMatrixExpressionNode( a_oVariableExpressionNode.Name,
         a_nExpressionSide, p_nCols, p_nRows );

   if( a_nExpressionSide == Enum.ExpressionSide_Left() )
   {
      a_oBinaryOperatorNode.LeftDataSource = a_oMatrixExpressionNode;
   }
   else
   {
      a_oBinaryOperatorNode.RightDataSource = a_oMatrixExpressionNode;
   }

   a_oMatrixExpressionNode.OperatorDataSource = a_oBinaryOperatorNode;
   Model.AddNode( a_oMatrixExpressionNode, a_oVariableExpressionNode.Parent(), a_nChildIndex );

   a_oVariableExpressionNode.Clear(); // Always clear before deleting.
   Model.DeleteNode( a_oVariableExpressionNode );
   return 1;
}

function void ConvertToMatrix2x2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec2() );
}

macro ConvertToMatrix2x2Expression()
[Category="Create Commands", Guid="{02193EB5-A6FA-456B-BD0B-52AD730ACA05}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec2() );
}

function void ConvertToMatrix2x3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec3() );
}

macro ConvertToMatrix2x3Expression()
[Category="Create Commands", Guid="{1DAD2A27-6101-4440-B8DE-3AEBF5A61141}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec3() );
}

function void ConvertToMatrix2x4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

macro ConvertToMatrix2x4Expression()
[Category="Create Commands", Guid="{4AF21654-7C96-4AE3-B817-0D2C28EAE79C}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec2(), Enum.GLSL_DataType_Vec4() );
}

function void ConvertToMatrix3x2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec2() );
}

macro ConvertToMatrix3x2Expression()
[Category="Create Commands", Guid="{A995F888-26F2-4AE2-9769-F5691B713950}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec2() );
}

function void ConvertToMatrix3x3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec3() );
}

macro ConvertToMatrix3x3Expression()
[Category="Create Commands", Guid="{38E56586-B1AF-42F6-AE8B-C2FB3CDE103C}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec3() );
}

function void ConvertToMatrix3x4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

macro ConvertToMatrix3x4Expression()
[Category="Create Commands", Guid="{5021F460-34AF-41F0-B51A-8B0D770E5F3D}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec3(), Enum.GLSL_DataType_Vec4() );
}

function void ConvertToMatrix4x2Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec2() );
}

macro ConvertToMatrix4x2Expression()
[Category="Create Commands", Guid="{6E3B59D1-2940-46DC-B781-C8662A8CDCC2}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec2() );
}

function void ConvertToMatrix4x3Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec3() );
}

macro ConvertToMatrix4x3Expression()
[Category="Create Commands", Guid="{9B7889C9-1A4E-404F-9A4F-EAB60122564E}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec3() );
}

function void ConvertToMatrix4x4Expression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateMatrixConversionContext( commandInfo, Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

macro ConvertToMatrix4x4Expression()
[Category="Create Commands", Guid="{5E8FD44F-0880-4585-860F-75D3E09CB3D4}", Image=".\\icons\\new_matrix_node.bmp"]
{
   ConvertToMatrixExpression( Enum.GLSL_DataType_Vec4(), Enum.GLSL_DataType_Vec4() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo,
   string p_sOperatorString )
{
   SpaSelectUtil.ValidateSelectionForExpression( commandInfo, p_sOperatorString );
}

function void CreateComparisonExpression( string p_sName, int p_eBinaryOperator )
{
   Group a_oSelectedGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   TypeInformation a_oTypeInfo = BooleanExpressionNode;

   // Make sure we create the right type of operands for the operator.
   // Some operators are less flexible than others.
   if( !( a_oTypeInfo.IsDerived( StructExpressionNode ) ) )
   {
      if(   p_eBinaryOperator == Enum.BinaryOperator_BitwiseExclusiveOr() ||
            p_eBinaryOperator == Enum.BinaryOperator_BitwiseAnd() ||
            p_eBinaryOperator == Enum.BinaryOperator_BitwiseInclusiveOr() )
      {
         a_oTypeInfo = IntegerExpressionNode;
      }
   }

   auto ExpressionInfo a_oExpressionInfo;
   if( a_oSelectedGroup.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oVariableExpressionNode =
         (VariableExpressionNode)Model.EditNode( a_oSelectedGroup );
      a_oVariableExpressionNode.GetParams( a_oExpressionInfo );
      a_oVariableExpressionNode.Clear();
      a_oVariableExpressionNode.MakeConstructor();
   }

   Create.NewExpression(
      a_oTypeInfo,
      a_oTypeInfo,
      p_sName,
      p_eBinaryOperator,
      a_oExpressionInfo,
      a_oSelectedGroup );
}

function void CreateGreaterThanComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, ">" );
}

macro CreateGreaterThanComparisonExpression()
[Category="Create Commands", Guid="{DBAB246B-9274-4939-8B16-790AE76BF5ED}", Image=".\\icons\\new_greater_than_expression.bmp"]
{
   CreateComparisonExpression( "Greater Than", Enum.BinaryOperator_GreaterThan() );
}

function void CreateLessThanComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "<" );
}

macro CreateLessThanComparisonExpression()
[Category="Create Commands", Guid="{7CE5DD6C-0042-41B7-B497-4A6D82B16F83}", Image=".\\icons\\new_less_than_expression.bmp"]
{
   CreateComparisonExpression( "Less Than", Enum.BinaryOperator_LessThan() );
}

function void CreateGreaterThanOrEqualToComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, ">=" );
}

macro CreateGreaterThanOrEqualToComparisonExpression()
[Category="Create Commands", Guid="{96950DBD-DE98-41D7-9121-437E3756CE7D}", Image=".\\icons\\new_greater_than_or_equal_to_expression.bmp"]
{
   CreateComparisonExpression( "Greater Than Or Equal To", Enum.BinaryOperator_GreaterThanOrEqualTo() );
}

function void CreateLessThanOrEqualToComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "<=" );
}

macro CreateLessThanOrEqualToComparisonExpression()
[Category="Create Commands", Guid="{C593DA55-DBB5-414C-AA70-0E029B9D21AA}", Image=".\\icons\\new_less_than_or_equal_to_expression.bmp"]
{
   CreateComparisonExpression( "Less Than Or Equal To", "<=" );
}

function void CreateIsEqualToComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "==" );
}

macro CreateIsEqualToComparisonExpression()
[Category="Create Commands", Guid="{C1D434A1-6208-4C0D-85FE-AA55258D1401}", Image=".\\icons\\new_is_equal_to_expression.bmp"]
{
   CreateComparisonExpression( "Is Equal To", Enum.BinaryOperator_IsEqualTo() );
}

function void CreateNotEqualToComparisonExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "!=" );
}

macro CreateNotEqualToComparisonExpression()
[Category="Create Commands", Guid="{6D4473F4-E1CB-4EB6-9D1B-4FB7F2598F5B}", Image=".\\icons\\new_not_equal_to_expression.bmp"]
{
   CreateComparisonExpression( "Not Equal To", Enum.BinaryOperator_NotEqualTo() );
}

function void CreateLogicalAndExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "&&" );
}

macro CreateLogicalAndExpression()
[Category="Create Commands", Guid="{18709D76-83EC-4E0E-AEBC-F26F26C2B239}", Image=".\\icons\\new_logical_and_expression.bmp"]
{
   CreateComparisonExpression( "Logical And", Enum.BinaryOperator_LogicalAnd() );
}

function void CreateLogicalInclusiveOrExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "||" );
}

macro CreateLogicalInclusiveOrExpression()
[Category="Create Commands", Guid="{70C8980A-FBD9-427E-98DE-DC680C2070F9}", Image=".\\icons\\new_logical_inclusive_or_expression.bmp"]
{
   CreateComparisonExpression( "Logical Inclusive Or", Enum.BinaryOperator_LogicalInclusiveOr() );
}

function void CreateLogicalExclusiveOrExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "^^" );
}

macro CreateLogicalExclusiveOrExpression()
[Category="Create Commands", Guid="{5D4D20B5-3D5B-403B-984E-5E4C98B46EFB}", Image=".\\icons\\new_logical_exclusive_or_expression.bmp"]
{
   CreateComparisonExpression( "Logical Exclusive Or", Enum.BinaryOperator_LogicalExclusiveOr() );
}

function void CreateBitwiseExclusiveOrExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "^" );
}

macro CreateBitwiseExclusiveOrExpression()
[Category="Create Commands", Guid="{FC2536BF-5254-40C3-9450-6CD8318BCD51}", Image=".\\icons\\new_bitwise_exclusive_or_expression.bmp"]
{
   CreateComparisonExpression( "Bitwise Exclusive Or", Enum.BinaryOperator_BitwiseExclusiveOr() );
}

function void CreateBitwiseAndExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "&" );
}

macro CreateBitwiseAndExpression()
[Category="Create Commands", Guid="{6ED8E377-DF6B-434A-ADC3-900727C3B5AB}", Image=".\\icons\\new_bitwise_and_expression.bmp"]
{
   CreateComparisonExpression( "Bitwise And", Enum.BinaryOperator_BitwiseAnd() );
}

function void CreateBitwiseInclusiveOrExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateComparisonExpression_OnUpdate( commandInfo, "|" );
}

macro CreateBitwiseInclusiveOrExpression()
[Category="Create Commands", Guid="{F46D1A2E-37D2-4058-934D-B907EE3E13E9}", Image=".\\icons\\new_bitwise_inclusive_or_expression.bmp"]
{
   CreateComparisonExpression( "Bitwise Inclusive Or", Enum.BinaryOperator_BitwiseInclusiveOr() );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateAssignmentExpression_OnUpdate( CommandPresentationModuleInfo commandInfo,
   string p_sOperatorString )
{
   SpaSelectUtil.ValidateSelectionForExpression( commandInfo, p_sOperatorString );
}

function void CreateAssignmentExpression( string p_sName, int p_eBinaryOperator )
{
   Group a_oSelectedGroup = (Group)Model.GetFirstSelectedNode().GetNode();
   TypeInformation a_oTypeInfo = a_oSelectedGroup.GetType();

   // Make sure we create the right type of operands for the operator.
   // Some operators are less flexible than others.
   if( !( a_oTypeInfo.IsDerived( StructExpressionNode ) ) )
   {
      if(   p_eBinaryOperator == Enum.BinaryOperator_BitShiftLeftAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_BitShiftRightAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_BitwiseExclusiveOrAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_BitwiseInclusiveOrAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_ModulusAssign() )
      {
         a_oTypeInfo = IntegerExpressionNode;
      }
      else
      if(   p_eBinaryOperator == Enum.BinaryOperator_AddAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_AddAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_MultiplyAssign() ||
            p_eBinaryOperator == Enum.BinaryOperator_DivideAssign() )
      {
         if( a_oTypeInfo.IsDerived( BooleanExpressionNode ) )
         {
            a_oTypeInfo = IntegerExpressionNode;
         }
      }
   }

   auto ExpressionInfo a_oExpressionInfo;
   if( a_oSelectedGroup.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oVariableExpressionNode =
         (VariableExpressionNode)Model.EditNode( a_oSelectedGroup );
      a_oVariableExpressionNode.GetParams( a_oExpressionInfo );
      a_oVariableExpressionNode.Clear();
      a_oVariableExpressionNode.MakeConstructor();
   }

   Create.NewExpression(
      a_oTypeInfo,
      a_oTypeInfo,
      p_sName,
      p_eBinaryOperator,
      a_oExpressionInfo,
      a_oSelectedGroup );
}

function void CreateAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "=" );
}

macro CreateAssignExpression()
[Category="Create Commands", Guid="{A4851A8D-A1B0-4DED-BA91-9187C926987E}", Image=".\\icons\\new_assign_expression.bmp"]
{
   CreateAssignmentExpression( "Assign", Enum.BinaryOperator_Assign() );
}

function void CreateAddAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "+=" );
}

macro CreateAddAssignExpression()
[Category="Create Commands", Guid="{F77F0120-E223-4D31-A048-B5C3851F9F60}", Image=".\\icons\\set_binary_operator_add_assign.bmp"]
{
   CreateAssignmentExpression( "Add Assign", Enum.BinaryOperator_AddAssign() );
}

function void CreateSubtractAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "-=" );
}

macro CreateSubtractAssignExpression()
[Category="Create Commands", Guid="{2C9E1ECE-DF8F-4556-A553-30CDA71BC86F}", Image=".\\icons\\set_binary_operator_subtract_assign.bmp"]
{
   CreateAssignmentExpression( "Subtract Assign", Enum.BinaryOperator_AddAssign() );
}

function void CreateMultiplyAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "*=" );
}

macro CreateMultiplyAssignExpression()
[Category="Create Commands", Guid="{5474CCC7-9939-4988-AF7C-B0A9F66F005A}", Image=".\\icons\\set_binary_operator_multiply_assign.bmp"]
{
   CreateAssignmentExpression( "Multiply Assign", Enum.BinaryOperator_MultiplyAssign() );
}

function void CreateDivideAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "/=" );
}

macro CreateDivideAssignExpression()
[Category="Create Commands", Guid="{02617687-63D9-4E8B-A2BC-AAF9ECBA2C53}", Image=".\\icons\\set_binary_operator_divide_assign.bmp"]
{
   CreateAssignmentExpression( "Divide Assign", Enum.BinaryOperator_DivideAssign() );
}

function void CreateBitShiftLeftAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "<<=" );
}

macro CreateBitShiftLeftAssignExpression()
[Category="Create Commands", Guid="{65201B8B-5043-4C4E-9533-2CF271515B26}", Image=".\\icons\\set_binary_operator_bit_shift_left_assign.bmp"]
{
   CreateAssignmentExpression( "Bit Shift Left Assign", Enum.BinaryOperator_BitShiftLeftAssign() );
}

function void CreateBitShiftRightAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, ">>=" );
}

macro CreateBitShiftRightAssignExpression()
[Category="Create Commands", Guid="{B4522592-C4D7-44B5-A225-9D44E6DAFBA8}", Image=".\\icons\\set_binary_operator_bit_shift_right_assign.bmp"]
{
   CreateAssignmentExpression( "Bit Shift Right Assign", Enum.BinaryOperator_BitShiftRightAssign() );
}

function void CreateBitwiseExclusiveOrAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "^=" );
}

macro CreateBitwiseExclusiveOrAssignExpression()
[Category="Create Commands", Guid="{5D3EC8D1-B0AF-4252-ABC9-84AF9EDF670F}", Image=".\\icons\\set_binary_operator_bit_wise_exclusive_or_assign.bmp"]
{
   CreateAssignmentExpression( "Bitwise Exclusive Or Assign", Enum.BinaryOperator_BitwiseExclusiveOrAssign() );
}

function void CreateBitwiseInclusiveOrAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "|=" );
}

macro CreateBitwiseInclusiveOrAssignExpression()
[Category="Create Commands", Guid="{B9CCB879-B090-4198-9723-0E2D1D0A9CA5}", Image=".\\icons\\set_binary_operator_bit_wise_inclusive_or_assign.bmp"]
{
   CreateAssignmentExpression( "Bitwise Inclusive Or Assign", Enum.BinaryOperator_BitwiseInclusiveOrAssign() );
}

function void CreateBitwiseAndAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "&=" );
}

macro CreateBitwiseAndAssignExpression()
[Category="Create Commands", Guid="{0ED5CB7A-3847-4405-9214-B6EECD35E199}", Image=".\\icons\\set_binary_operator_bit_wise_and_assign.bmp"]
{
   CreateAssignmentExpression( "Bitwise And Assign", Enum.BinaryOperator_BitwiseAndAssign() );
}

function void CreateModulusAssignExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateAssignmentExpression_OnUpdate( commandInfo, "%=" );
}

macro CreateModulusAssignExpression()
[Category="Create Commands", Guid="{C873417D-F5FF-416C-A41E-0514D84C8010}", Image=".\\icons\\set_binary_operator_modulus_assign.bmp"]
{
   CreateAssignmentExpression( "Modulus Assign", Enum.BinaryOperator_ModulusAssign() );
}

/*
////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionDeclaration_OnUpdate( CommandPresentationModuleInfo commandInfo,
   string p_sTypeInfo )
{
   auto TypeInfoArray types;
   types.Add( IncludeSourceNode );
   types.Add( ShaderDeclarationNode );
   bool a_bCorrectTypeSelected = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bCorrectTypeSelected );
   
   if( !a_bCorrectTypeSelected )
   {
      commandInfo.Status.SetHint( "Select a node of type IncludeSourceNode or any type of ShaderDeclarationNode." );
      return;
   }

   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node." );
      return;
   }

   commandInfo.Status.SetHint( "Creates a function that returns a " + p_sTypeInfo );
}

function int CreateFunctionDeclaration( VariableExpressionNode p_oReturn )
{
   // Allocate a DeclareFunctionNode. Give it a basic name.
   DeclareFunctionNode a_oDeclareFunctionNode = new DeclareFunctionNode;
   a_oDeclareFunctionNode.Name = "myFunction";
   if( p_oReturn )
   {
      a_oDeclareFunctionNode.ReturnTypeDataSource = p_oReturn;
   }

   // Allocate a ParameterListNode, StatementBlockNode ( for the 
   // function body ) and a JumpStatementNode.
   ParameterListNode a_oParameterListNode = new ParameterListNode;
   a_oParameterListNode.Name = "Parameters";
   StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
   a_oStatementBlockNode.Name = "Body";

   if( p_oReturn )
   {
      p_oReturn.MakeReturn();
      //p_oReturn.Expression = p_oReturn.GenerateExpres
   }

   // Get the selected group. This is where we'll parent the new nodes.
   Group a_oSelGroup;
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
   {
      a_oSelGroup = (Group)a_oSelNode;
   }

   // Fail if the selected node isn't a group.
   if( !( a_oSelGroup ) )
   {
      delete a_oDeclareFunctionNode;
      delete a_oParameterListNode;
      return 0;
   }

   // Add our data to the model.
   Model.AddNode( a_oParameterListNode, a_oDeclareFunctionNode, -1 );
   Model.AddNode( a_oStatementBlockNode, a_oDeclareFunctionNode, -1 );
   
   // Add the return type expression to the jump statement, if applicable.
   if( p_oReturn )
   {
      //Model.AddNode( a_oJumpStatementNode, a_oStatementBlockNode, -1 );
      Model.AddNode( p_oReturn, a_oStatementBlockNode, -1 );
   }

   // Add the DeclareFunctionNode to the model.
   Model.AddNode( a_oDeclareFunctionNode, a_oSelGroup, -1 );
   // Good!
   return 1;
}

*/

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionPrototype_OnUpdate(

   CommandPresentationModuleInfo commandInfo,
   string p_sTypeInfo

   )
{
   auto TypeInfoArray types;
   types.Add( IncludeSourceNode );
   types.Add( ShaderDeclarationNode );
   bool a_bCorrectTypeSelected = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bCorrectTypeSelected );
   
   if( !a_bCorrectTypeSelected )
   {
      commandInfo.Status.SetHint( "Select a node of type IncludeSourceNode or any type of ShaderDeclarationNode." );
      return;
   }

   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node." );
      return;
   }

   commandInfo.Status.SetHint( "Creates a <" + p_sTypeInfo + "> function prototype" );
}

function Node CreateFunctionPrototype(

   TypeInformation p_oExpressionType,
   TypeInformation p_poCodeGeneratorType

   )
{
   // This function returns a Node object, but we add it to the
   // model here. We do this so that calling functions can modify
   // the object without being responsible for memory managment.
   Node a_oNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( !a_oNode || !( a_oNode.IsDerived( Group ) ) )
   {
      return null;
   }
   Group a_oSelGroup = (Group)a_oNode;

   Node a_oNewNode = ValidateNodeCreateContext.CreateNodeOfType( p_oExpressionType, "" );
   if( a_oNewNode && a_oNewNode.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oFunctionPrototype =
         (VariableExpressionNode)a_oNewNode;
      a_oFunctionPrototype.MakeFunctionPrototype();
      a_oFunctionPrototype.FunctionName = "MyFunction";
      a_oFunctionPrototype.Name =
         a_oFunctionPrototype.GetFunctionDescriptionString( p_poCodeGeneratorType );
      ParameterListNode a_oFunctionParameters = new ParameterListNode;
      a_oFunctionParameters.Name = "Parameters";
      a_oFunctionPrototype.AddChild( a_oFunctionParameters );

      Model.AddNode( a_oFunctionPrototype, a_oSelGroup, -1 );
   }
   else
   {
      delete a_oNewNode;
      return null;
   }

   return a_oNewNode;
}

function void CreateFunctionPrototypeBool_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bool" );
}

macro CreateFunctionPrototypeBool()
[Category="Create Commands", Guid="{B9639D3C-7DD6-4476-8EF5-4C655CF76F04}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   CreateFunctionPrototype( BooleanExpressionNode, BooleanExpressionGenerator );
}

function void CreateFunctionPrototypeBoolArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bool array" );
}

macro CreateFunctionPrototypeBoolArray()
[Category="Create Commands", Guid="{3A869787-D428-4523-AD24-D3542E375318}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   BooleanArrayExpressionNode a_oBooleanArrayExpressionNode =
      (BooleanArrayExpressionNode)CreateFunctionPrototype( BooleanArrayExpressionNode, BooleanArrayExpressionGenerator );
   a_oBooleanArrayExpressionNode.Count = 4;
   a_oBooleanArrayExpressionNode.FunctionName = "MyFunction";
   a_oBooleanArrayExpressionNode.Name =
      a_oBooleanArrayExpressionNode.GetFunctionDescriptionString( BooleanArrayExpressionGenerator );
}

function void CreateBooleanVectorFunctionPrototype( int p_eDimension )
{
   BooleanVectorExpressionNode a_oBooleanVectorExpressionNode =
      (BooleanVectorExpressionNode)CreateFunctionPrototype( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator );
   a_oBooleanVectorExpressionNode.Dimension = p_eDimension;
   a_oBooleanVectorExpressionNode.FunctionName = "MyFunction";
   a_oBooleanVectorExpressionNode.Name =
      a_oBooleanVectorExpressionNode.GetFunctionDescriptionString( BooleanVectorExpressionGenerator );
}

function void CreateFunctionPrototypeBoolVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec2" );
}

macro CreateFunctionPrototypeBoolVec2()
[Category="Create Commands", Guid="{2BDF5F22-7481-4545-B405-1E044F954DC0}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateBooleanVectorFunctionPrototype( Enum.GLSL_DataType_Vec2() );
}

function void CreateFunctionPrototypeBoolVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec3" );
}

macro CreateFunctionPrototypeBoolVec3()
[Category="Create Commands", Guid="{94DCCE97-201D-49DF-A4E4-7107BE95E7E3}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateBooleanVectorFunctionPrototype( Enum.GLSL_DataType_Vec3() );
}

function void CreateFunctionPrototypeBoolVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec4" );
}

macro CreateFunctionPrototypeBoolVec4()
[Category="Create Commands", Guid="{67396665-5DFF-4322-BE79-F8773B9C5E5E}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateBooleanVectorFunctionPrototype( Enum.GLSL_DataType_Vec4() );
}

function void CreateBooleanVectorArrayFunctionPrototype( int p_eDimension, int p_nCount )
{
   BooleanVectorArrayExpressionNode a_oBooleanVectorArrayExpressionNode =
      (BooleanVectorArrayExpressionNode)CreateFunctionPrototype( BooleanVectorArrayExpressionNode, BooleanVectorArrayExpressionGenerator );
   a_oBooleanVectorArrayExpressionNode.Dimension = p_eDimension;
   a_oBooleanVectorArrayExpressionNode.Count = p_nCount;
   a_oBooleanVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oBooleanVectorArrayExpressionNode.Name =
      a_oBooleanVectorArrayExpressionNode.GetFunctionDescriptionString( BooleanVectorArrayExpressionGenerator );
}

function void CreateFunctionPrototypeBoolVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec2 array" );
}

macro CreateFunctionPrototypeBoolVec2Array()
[Category="Create Commands", Guid="{B3F593FB-6428-41E6-B134-E22B68094B71}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateBooleanVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateFunctionPrototypeBoolVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec3 array" );
}

macro CreateFunctionPrototypeBoolVec3Array()
[Category="Create Commands", Guid="{158E2890-1E35-4589-B9B7-8AB22BE52DE6}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateBooleanVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateFunctionPrototypeBoolVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "bvec4 array" );
}

macro CreateFunctionPrototypeBoolVec4Array()
[Category="Create Commands", Guid="{65105DAE-8BD7-41BA-ABE8-79E4EC01AA98}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateBooleanVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec4(), 4 );
}

function void CreateFunctionPrototypeInt_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "int" );
}

macro CreateFunctionPrototypeInt()
[Category="Create Commands", Guid="{100BD29E-1CB6-4E79-B506-111F561FA6D4}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   CreateFunctionPrototype( IntegerExpressionNode, IntegerExpressionGenerator );
}

function void CreateFunctionPrototypeIntArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "int array" );
}

macro CreateFunctionPrototypeIntArray()
[Category="Create Commands", Guid="{851EF4B0-915E-432B-8BA9-BE0D21D101A6}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   IntegerArrayExpressionNode a_oIntegerArrayExpressionNode =
      (IntegerArrayExpressionNode)CreateFunctionPrototype( IntegerArrayExpressionNode, IntegerArrayExpressionGenerator );
   a_oIntegerArrayExpressionNode.Count = 4;
   a_oIntegerArrayExpressionNode.FunctionName = "MyFunction";
   a_oIntegerArrayExpressionNode.Name =
      a_oIntegerArrayExpressionNode.GetFunctionDescriptionString( IntegerArrayExpressionGenerator );
}

function void CreateIntegerVectorFunctionPrototype( int p_eDimension )
{
   IntegerVectorExpressionNode a_oIntegerVectorExpressionNode =
      (IntegerVectorExpressionNode)CreateFunctionPrototype( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator );
   a_oIntegerVectorExpressionNode.Dimension = p_eDimension;
   a_oIntegerVectorExpressionNode.FunctionName = "MyFunction";
   a_oIntegerVectorExpressionNode.Name =
      a_oIntegerVectorExpressionNode.GetFunctionDescriptionString( IntegerVectorExpressionGenerator );
}

function void CreateFunctionPrototypeIntVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec2" );
}

macro CreateFunctionPrototypeIntVec2()
[Category="Create Commands", Guid="{91AFE3F8-30D8-455D-8BBE-74245B4E6911}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec2() );
}

function void CreateFunctionPrototypeIntVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec3" );
}

macro CreateFunctionPrototypeIntVec3()
[Category="Create Commands", Guid="{0C67FD3F-D4F7-474C-AAD7-BB097643CC26}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec3() );
}

function void CreateFunctionPrototypeIntVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec4" );
}

macro CreateFunctionPrototypeIntVec4()
[Category="Create Commands", Guid="{A0F6B735-9212-4C9F-9D64-DA01AE785BA0}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec4() );
}

function void CreateIntegerVectorArrayFunctionPrototype( int p_eDimension, int p_nCount )
{
   IntegerVectorArrayExpressionNode a_oIntegerVectorArrayExpressionNode =
      (IntegerVectorArrayExpressionNode)CreateFunctionPrototype( IntegerVectorArrayExpressionNode, IntegerVectorArrayExpressionGenerator );
   a_oIntegerVectorArrayExpressionNode.Dimension = p_eDimension;
   a_oIntegerVectorArrayExpressionNode.Count = p_nCount;
   a_oIntegerVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oIntegerVectorArrayExpressionNode.Name =
      a_oIntegerVectorArrayExpressionNode.GetFunctionDescriptionString( IntegerVectorArrayExpressionGenerator );
}

function void CreateFunctionPrototypeIntVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec2 array" );
}

macro CreateFunctionPrototypeIntVec2Array()
[Category="Create Commands", Guid="{3F4198D1-EDB2-4942-A6B9-5E5ECB0826B1}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateFunctionPrototypeIntVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec3 array" );
}

macro CreateFunctionPrototypeIntVec3Array()
[Category="Create Commands", Guid="{D156D66F-31BD-4E37-8DCA-DA92DB44B2BB}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateFunctionPrototypeIntVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "ivec4 array" );
}

macro CreateFunctionPrototypeIntVec4Array()
[Category="Create Commands", Guid="{A2651CE6-F96E-44EC-AA25-2B7808262FAE}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec4(), 4 );
}

function void CreateFunctionPrototypeUint_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uint" );
}

macro CreateFunctionPrototypeUint()
[Category="Create Commands", Guid="{C797CBF9-B2B7-45B2-96D9-F2846432EB25}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   CreateFunctionPrototype( UnsignedIntegerExpressionNode, UnsignedIntegerExpressionGenerator );
}

function void CreateFunctionPrototypeUintArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uint array" );
}

macro CreateFunctionPrototypeUintArray()
[Category="Create Commands", Guid="{498E3DF0-782F-4B3B-A38C-AFDC62FE7D0B}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   UnsignedIntegerArrayExpressionNode a_oUnsignedIntegerArrayExpressionNode =
      (UnsignedIntegerArrayExpressionNode)CreateFunctionPrototype( UnsignedIntegerArrayExpressionNode,
         UnsignedIntegerArrayExpressionGenerator );
   a_oUnsignedIntegerArrayExpressionNode.Count = 4;
   a_oUnsignedIntegerArrayExpressionNode.FunctionName = "MyFunction";
   a_oUnsignedIntegerArrayExpressionNode.Name =
      a_oUnsignedIntegerArrayExpressionNode.GetFunctionDescriptionString( UnsignedIntegerArrayExpressionGenerator );
}

function void CreateUnsignedIntegerVectorFunctionPrototype( int p_eDimension )
{
   UnsignedIntegerVectorExpressionNode a_oUnsignedIntegerVectorExpressionNode =
      (UnsignedIntegerVectorExpressionNode)CreateFunctionPrototype( UnsignedIntegerVectorExpressionNode,
         UnsignedIntegerVectorExpressionGenerator );
   a_oUnsignedIntegerVectorExpressionNode.Dimension = p_eDimension;
   a_oUnsignedIntegerVectorExpressionNode.FunctionName = "MyFunction";
   a_oUnsignedIntegerVectorExpressionNode.Name =
      a_oUnsignedIntegerVectorExpressionNode.GetFunctionDescriptionString( UnsignedIntegerVectorExpressionGenerator );
}

function void CreateFunctionPrototypeUintVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec2" );
}

macro CreateFunctionPrototypeUintVec2()
[Category="Create Commands", Guid="{694D5484-17D9-45BC-91AA-F0BC60CE9DA1}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec2() );
}

function void CreateFunctionPrototypeUintVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec3" );
}

macro CreateFunctionPrototypeUintVec3()
[Category="Create Commands", Guid="{E2ECEE41-5A70-46B6-8D56-46364795454E}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec3() );
}

function void CreateFunctionPrototypeUintVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec4" );
}

macro CreateFunctionPrototypeUintVec4()
[Category="Create Commands", Guid="{E5D78467-90E3-4A53-93B5-CC44BCFBC0AD}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorFunctionPrototype( Enum.GLSL_DataType_Vec4() );
}

function void CreateUnsignedIntegerVectorArrayFunctionPrototype( int p_eDimension, int p_nCount )
{
   UnsignedIntegerVectorArrayExpressionNode a_oUnsignedIntegerVectorArrayExpressionNode =
      (UnsignedIntegerVectorArrayExpressionNode)CreateFunctionPrototype( UnsignedIntegerVectorArrayExpressionNode,
         UnsignedIntegerVectorArrayExpressionGenerator );
   a_oUnsignedIntegerVectorArrayExpressionNode.Dimension = p_eDimension;
   a_oUnsignedIntegerVectorArrayExpressionNode.Count = p_nCount;
   a_oUnsignedIntegerVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oUnsignedIntegerVectorArrayExpressionNode.Name =
      a_oUnsignedIntegerVectorArrayExpressionNode.GetFunctionDescriptionString( UnsignedIntegerVectorArrayExpressionGenerator );
}

function void CreateFunctionPrototypeUintVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec2 array" );
}

macro CreateFunctionPrototypeUintVec2Array()
[Category="Create Commands", Guid="{043EFA6D-CC9B-48FF-B3C6-923F7EC3FB23}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec2(), 4 );
}

function void CreateFunctionPrototypeUintVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec3 array" );
}

macro CreateFunctionPrototypeUintVec3Array()
[Category="Create Commands", Guid="{2E9B3860-09C1-4E52-BC6A-A5976143FC6C}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec3(), 4 );
}

function void CreateFunctionPrototypeUintVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "uvec4 array" );
}

macro CreateFunctionPrototypeUintVec4Array()
[Category="Create Commands", Guid="{04CFBDD6-2DE1-47F2-8FD2-AC79591B43D4}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   CreateUnsignedIntegerVectorArrayFunctionPrototype( Enum.GLSL_DataType_Vec4(), 4 );
}

function void CreateFunctionPrototypeFloat_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "float" );
}

macro CreateFunctionPrototypeFloat()
[Category="Create Commands", Guid="{C8F00552-0A7E-47A2-B892-FEDB6AB52E12}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   CreateFunctionPrototype( FloatExpressionNode, FloatExpressionGenerator );
}

function void CreateFunctionPrototypeFloatArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "float array" );
}

macro CreateFunctionPrototypeFloatArray()
[Category="Create Commands", Guid="{DED98844-03BE-40C4-938E-76A30029480E}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   FloatArrayExpressionNode a_oFloatArrayExpressionNode =
      (FloatArrayExpressionNode)CreateFunctionPrototype( FloatArrayExpressionNode, FloatArrayExpressionGenerator );
   a_oFloatArrayExpressionNode.Count = 4;
   a_oFloatArrayExpressionNode.FunctionName = "MyFunction";
   a_oFloatArrayExpressionNode.Name =
      a_oFloatArrayExpressionNode.GetFunctionDescriptionString( FloatArrayExpressionGenerator );
}

function void CreateFunctionPrototypeVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec2" );
}

macro CreateFunctionPrototypeVec2()
[Category="Create Commands", Guid="{30746A55-973B-41FC-87A7-A2424A80F1A2}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   VectorExpressionNode a_oVectorExpressionNode =
      (VectorExpressionNode)CreateFunctionPrototype( VectorExpressionNode, VectorExpressionGenerator );
   a_oVectorExpressionNode.MakeVec2();
   a_oVectorExpressionNode.FunctionName = "MyFunction";
   a_oVectorExpressionNode.Name =
      a_oVectorExpressionNode.GetFunctionDescriptionString( VectorExpressionGenerator );
}

function void CreateFunctionPrototypeVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec3" );
}

macro CreateFunctionPrototypeVec3()
[Category="Create Commands", Guid="{409FEBCF-FEAC-47CB-A573-94315C399357}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   VectorExpressionNode a_oVectorExpressionNode =
      (VectorExpressionNode)CreateFunctionPrototype( VectorExpressionNode, VectorExpressionGenerator );
   a_oVectorExpressionNode.MakeVec3();
   a_oVectorExpressionNode.FunctionName = "MyFunction";
   a_oVectorExpressionNode.Name =
      a_oVectorExpressionNode.GetFunctionDescriptionString( VectorExpressionGenerator );
}

function void CreateFunctionPrototypeVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec3" );
}

macro CreateFunctionPrototypeVec4()
[Category="Create Commands", Guid="{433AFAF1-38A0-40D1-BD6B-947E772DE222}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   VectorExpressionNode a_oVectorExpressionNode =
      (VectorExpressionNode)CreateFunctionPrototype( VectorExpressionNode, VectorExpressionGenerator );
   a_oVectorExpressionNode.MakeVec4();
   a_oVectorExpressionNode.FunctionName = "MyFunction";
   a_oVectorExpressionNode.Name =
      a_oVectorExpressionNode.GetFunctionDescriptionString( VectorExpressionGenerator );
}

function void CreateFunctionPrototypeVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec2 array" );
}

macro CreateFunctionPrototypeVec2Array()
[Category="Create Commands", Guid="{3E3189BB-E20D-403F-81D8-7622F4F4B72D}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   VectorArrayExpressionNode a_oVectorArrayExpressionNode =
      (VectorArrayExpressionNode)CreateFunctionPrototype( VectorArrayExpressionNode, VectorExpressionGenerator );
   a_oVectorArrayExpressionNode.MakeVec2();
   a_oVectorArrayExpressionNode.Count = 4;
   a_oVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oVectorArrayExpressionNode.Name =
      a_oVectorArrayExpressionNode.GetFunctionDescriptionString( VectorArrayExpressionGenerator );
}

function void CreateFunctionPrototypeVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec3 array" );
}

macro CreateFunctionPrototypeVec3Array()
[Category="Create Commands", Guid="{D7A32E80-F1B4-4534-9D75-036A70B94D0D}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   VectorArrayExpressionNode a_oVectorArrayExpressionNode =
      (VectorArrayExpressionNode)CreateFunctionPrototype( VectorArrayExpressionNode, VectorArrayExpressionGenerator );
   a_oVectorArrayExpressionNode.MakeVec3();
   a_oVectorArrayExpressionNode.Count = 4;
   a_oVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oVectorArrayExpressionNode.Name =
      a_oVectorArrayExpressionNode.GetFunctionDescriptionString( VectorArrayExpressionGenerator );
}

function void CreateFunctionPrototypeVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "vec4 array" );
}

macro CreateFunctionPrototypeVec4Array()
[Category="Create Commands", Guid="{AF9CABB7-8AB4-4850-8613-DA280757FC31}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   VectorArrayExpressionNode a_oVectorArrayExpressionNode =
      (VectorArrayExpressionNode)CreateFunctionPrototype( VectorArrayExpressionNode, VectorArrayExpressionGenerator );
   a_oVectorArrayExpressionNode.MakeVec4();
   a_oVectorArrayExpressionNode.Count = 4;
   a_oVectorArrayExpressionNode.FunctionName = "MyFunction";
   a_oVectorArrayExpressionNode.Name =
      a_oVectorArrayExpressionNode.GetFunctionDescriptionString( VectorArrayExpressionGenerator );
}

function void CreateMatrixFunctionPrototype( int p_nCols, int p_nRows )
{
   MatrixExpressionNode a_oMatrixExpressionNode =
      (MatrixExpressionNode)CreateFunctionPrototype( MatrixExpressionNode, MatrixExpressionGenerator );
   a_oMatrixExpressionNode.Cols = p_nCols;
   a_oMatrixExpressionNode.Rows = p_nRows;
   a_oMatrixExpressionNode.FunctionName = "MyFunction";
   a_oMatrixExpressionNode.Name =
      a_oMatrixExpressionNode.GetFunctionDescriptionString( MatrixExpressionGenerator );
}

function void CreateFunctionPrototypeMat2x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x2" );
}

macro CreateFunctionPrototypeMat2x2()
[Category="Create Commands", Guid="{9A84C83D-284F-4544-A4B3-4A628738FCA7}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 2, 2 );
}

function void CreateFunctionPrototypeMat2x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x3" );
}

macro CreateFunctionPrototypeMat2x3()
[Category="Create Commands", Guid="{9D710F37-B0B8-4BCA-A13C-FCE572DD0A7C}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 2, 3 );
}

function void CreateFunctionPrototypeMat2x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x4" );
}

macro CreateFunctionPrototypeMat2x4()
[Category="Create Commands", Guid="{7A730737-80EE-4E44-9BFF-E783236EAE1D}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 2, 4 );
}

function void CreateFunctionPrototypeMat3x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x2" );
}

macro CreateFunctionPrototypeMat3x2()
[Category="Create Commands", Guid="{F946C0DC-46AF-4599-AC2F-C60B961B70A5}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 3, 2 );
}

function void CreateFunctionPrototypeMat3x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x3" );
}

macro CreateFunctionPrototypeMat3x3()
[Category="Create Commands", Guid="{253F9FAD-30F1-4CB5-972C-6F05EEF2B6A0}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 3, 3 );
}

function void CreateFunctionPrototypeMat3x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x4" );
}

macro CreateFunctionPrototypeMat3x4()
[Category="Create Commands", Guid="{6BEA4163-8AEB-4F49-92B3-4E5CF7454F40}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 3, 4 );
}

function void CreateFunctionPrototypeMat4x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x2" );
}

macro CreateFunctionPrototypeMat4x2()
[Category="Create Commands", Guid="{103B45C6-39AE-4882-ADE7-2204A5DA218C}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 4, 2 );
}

function void CreateFunctionPrototypeMat4x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x3" );
}

macro CreateFunctionPrototypeMat4x3()
[Category="Create Commands", Guid="{2653D6E8-2152-4DF5-9F10-2D24D94F998F}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 4, 3 );
}

function void CreateFunctionPrototypeMat4x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x4" );
}

macro CreateFunctionPrototypeMat4x4()
[Category="Create Commands", Guid="{BC6C57EC-D30D-4259-8FC5-03BCF6811508}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionPrototype( 4, 4 );
}

function void CreateFunctionPrototypeStruct_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "struct" );
}

function void CreateMatrixArrayFunctionPrototype( int p_nCols, int p_nRows, int p_nCount )
{
   MatrixArrayExpressionNode a_oMatrixArrayExpressionNode =
      (MatrixArrayExpressionNode)CreateFunctionPrototype(
         MatrixArrayExpressionNode,
         MatrixArrayExpressionGenerator );

   a_oMatrixArrayExpressionNode.Cols = p_nCols;
   a_oMatrixArrayExpressionNode.Rows = p_nRows;
   a_oMatrixArrayExpressionNode.Count = p_nCount;
   a_oMatrixArrayExpressionNode.FunctionName = "MyFunction";
   a_oMatrixArrayExpressionNode.Name =
      a_oMatrixArrayExpressionNode.GetFunctionDescriptionString(
         MatrixArrayExpressionGenerator );
}

macro CreateFunctionPrototypeMat2x2Array()
[Category="Create Commands", Guid="{34DA75EC-BD49-413D-B879-C78851F72D57}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 2, 2, 4 );
}

function void CreateFunctionPrototypeMat2x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x3 array" );
}

macro CreateFunctionPrototypeMat2x3Array()
[Category="Create Commands", Guid="{F0BDE6EC-21E6-4A97-9162-298B6F28F3E7}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 2, 3, 4 );
}

function void CreateFunctionPrototypeMat2x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x4 array" );
}

macro CreateFunctionPrototypeMat2x4Array()
[Category="Create Commands", Guid="{F4A21965-F66B-4D1B-AD6D-C657D0DF164B}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 2, 4, 4 );
}

function void CreateFunctionPrototypeMat3x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x2 array" );
}

macro CreateFunctionPrototypeMat3x2Array()
[Category="Create Commands", Guid="{2AC7494E-4979-42A0-B4D3-33322150243A}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 3, 2, 4 );
}

function void CreateFunctionPrototypeMat3x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x3 array" );
}

macro CreateFunctionPrototypeMat3x3Array()
[Category="Create Commands", Guid="{8D4E0345-21EC-49B8-AF73-34A03D4A81A0}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 3, 3, 4 );
}

function void CreateFunctionPrototypeMat3x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat3x4 array" );
}

macro CreateFunctionPrototypeMat3x4Array()
[Category="Create Commands", Guid="{0116A72A-6462-4F6C-AD50-FE312757860D}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 3, 4, 4 );
}

function void CreateFunctionPrototypeMat4x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x2 array" );
}

macro CreateFunctionPrototypeMat4x2Array()
[Category="Create Commands", Guid="{BDB9E409-A0DE-40B6-A7E2-F93C2A5D2A45}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 4, 2, 4 );
}

function void CreateFunctionPrototypeMat4x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x3 array" );
}

macro CreateFunctionPrototypeMat4x3Array()
[Category="Create Commands", Guid="{7950464C-81C4-40A9-8FD9-3E9087BC098F}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 4, 3, 4 );
}

function void CreateFunctionPrototypeMat4x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat4x4 array" );
}

macro CreateFunctionPrototypeMat4x4Array()
[Category="Create Commands", Guid="{16D71015-DFF6-4AF2-95BB-F951BC1FFEF1}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionPrototype( 4, 4, 4 );
}

function void CreateFunctionPrototypeMat2x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "mat2x2 array" );
}

macro CreateFunctionPrototypeStruct()
[Category="Create Commands", Guid="{40129039-3B07-4F16-A2C1-466DCADE6D02}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   CreateFunctionPrototype( StructExpressionNode, StructExpressionGenerator );
}

function void CreateFunctionPrototypeStructArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionPrototype_OnUpdate( commandInfo, "struct array" );
}

macro CreateFunctionPrototypeStructArray()
[Category="Create Commands", Guid="{8EE0F311-20AB-48B2-BF19-4C12341CBFA6}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   StructExpressionNode a_oNode = (StructExpressionNode)CreateFunctionPrototype( StructExpressionNode, StructExpressionGenerator );
   a_oNode.IsArray = true;
   a_oNode.ArrayDimension = 4;
}

////////////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo,
   string p_sType )
{
   ValidateNodeCommandContext.TestContext( commandInfo, VariableExpressionNode,
      "Creates a " + p_sType + " function parameter." );

   bool a_bEnabled = Model.GetSelectCount() &&
      Model.GetSelectBuffer().IsNodeTypeSelectedExclusive( VariableExpressionNode );
   if( !a_bEnabled )
   {
      commandInfo.Status.SetHint( "All selected nodes must be VariableExpressionNode." );
      commandInfo.SetEnabled( false );
      return;
   }

   bool a_bValidateExpressionType = true;
   for( int a_nSelIndex = 0; a_nSelIndex < Model.GetSelectCount(); ++a_nSelIndex )
   {
      VariableExpressionNode a_oVariableExpressionNode =
         (VariableExpressionNode)Model.GetSelectedNode( a_nSelIndex ).GetNode();
      if(   !( a_oVariableExpressionNode.IsFunction() ) &&
            !( a_oVariableExpressionNode.IsFunctionPrototype() ) )
      {
         a_bValidateExpressionType = false;
         break;
      }
   }

   if( !a_bValidateExpressionType )
   {
      string a_sMessage = "You can only create a parameter as a child of a function expression or function prototype.";
      commandInfo.Status.SetHint( a_sMessage );
      commandInfo.SetEnabled( false );
   }
}

function void AddFunctionParametersToModel( List p_lNewNodes )
{
   for( int a_nSelIndex = 0; a_nSelIndex < Model.GetSelectCount(); ++a_nSelIndex )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( a_nSelIndex ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelExpression = (Group)a_oSelNode;
         Node a_oNewNode = (Node)p_lNewNodes.Get( a_nSelIndex );
         if( !( Model.AddNode( a_oNewNode, a_oSelExpression, -1 ) ) )
         {
            delete a_oNewNode;
         }
      }
   }
}

function Node CreateFunctionParameter( TypeInformation p_oTypeInfo, string p_sName )
{
   Node a_oNewNode = ValidateNodeCreateContext.CreateNodeOfType( p_oTypeInfo, p_sName + " Parameter" );   

   if( a_oNewNode && a_oNewNode.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oFunctionParameter = (VariableExpressionNode)a_oNewNode;
      a_oFunctionParameter.MakeFunctionParameter();
   }

   return a_oNewNode;
}

function void AddFunctionParameterToModel( TypeInformation p_poTypeInfo, string p_sName,
   int p_nDimension, int p_nCount, int p_nCols, int p_nRows )
{
   // ^^
   // We're going to stray from our usual avoidance of
   // functions with parameters that may be unused because
   // it will allow us to keep this code very short.
   auto List a_lNewFunctionParams;
   Node a_oParam = (Node)CreateFunctionParameter( p_poTypeInfo, p_sName );

   if( a_oParam && a_oParam.IsDerived( VariableExpressionNode ) )
   {
      VariableExpressionNode a_oFunctionParameter =
         (VariableExpressionNode)a_oParam;

      if( a_oFunctionParameter.IsStructExpressionType() )
      {
         a_oFunctionParameter.MakeCount( p_nCount );
      }
      else
      if( a_oFunctionParameter.IsAnyArrayExpressionType() )
      {
         a_oFunctionParameter.MakeCount( p_nCount );
      }

      if( a_oFunctionParameter.IsAnyVectorExpressionType() )
      {
         a_oFunctionParameter.MakeVec( p_nDimension );
      }
      else
      if( a_oFunctionParameter.IsMatrixExpressionType() )
      {
         a_oFunctionParameter.MakeMatrix( p_nCols, p_nRows );
      }
      Expression.GenerateExpression( a_oFunctionParameter );
   }

   ValidateNodeCreateContext.AmplifyNode( a_oParam, Model.GetSelectCount(), a_lNewFunctionParams );
   AddFunctionParametersToModel( a_lNewFunctionParams );
   delete a_oParam;
}

function void CreateBoolFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bool" );
}

macro CreateBoolFunctionParameter()
[Category="Expression Commands", Guid="{62DA4D4F-2CD6-479B-92A7-96E448C2EF00}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanExpressionNode, "Bool", 0, 0, 0, 0 );
}

function void CreateBoolArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bool array" );
}

macro CreateBoolArrayFunctionParameter()
[Category="Expression Commands", Guid="{7BCACC30-2817-47C8-BA7E-2B57BC7F239B}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanArrayExpressionNode, "Bool Array", 0, 4, 0, 0 );
}

function void CreateBoolVector2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec2" );
}

macro CreateBoolVector2FunctionParameter()
[Category="Expression Commands", Guid="{1C11E7DB-D7B5-4366-AF02-47FE67585B45}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorExpressionNode, "Bvec2", 2, 0, 0, 0 );
}

function void CreateBoolVector3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec3" );
}

macro CreateBoolVector3FunctionParameter()
[Category="Expression Commands", Guid="{3F76DC8C-2D53-4673-A080-B4D64467BDB2}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorExpressionNode, "Bvec3", 3, 0, 0, 0 );
}

function void CreateBoolVector4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec4" );
}

macro CreateBoolVector4FunctionParameter()
[Category="Expression Commands", Guid="{39A4E827-2FA1-4E36-9D9C-2D60B7B34C1A}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorExpressionNode, "Bvec4", 4, 0, 0, 0 );
}

function void CreateBoolVector2ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec2 array" );
}

macro CreateBoolVector2ArrayFunctionParameter()
[Category="Expression Commands", Guid="{DFD7ACB2-C999-4CEB-A0CD-B98EC3ED78E9}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorArrayExpressionNode, "Bvec2 Array", 2, 4, 0, 0 );
}

function void CreateBoolVector3ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec3 array" );
}

macro CreateBoolVector3ArrayFunctionParameter()
[Category="Expression Commands", Guid="{098E63C6-0A66-4F54-9957-B48171F75486}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorArrayExpressionNode, "Bvec3 Array", 3, 4, 0, 0 );
}

function void CreateBoolVector4ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "bvec4 array" );
}

macro CreateBoolVector4ArrayFunctionParameter()
[Category="Expression Commands", Guid="{8674EC36-D127-4E1D-B3E0-D69663C8D92F}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( BooleanVectorArrayExpressionNode, "Bvec4 Array", 4, 4, 0, 0 );
}

function void CreateIntFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "int" );
}

macro CreateIntFunctionParameter()
[Category="Expression Commands", Guid="{6E656446-E690-4685-829B-3C951D4ED8BC}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerExpressionNode, "Int", 0, 0, 0, 0 );
}

function void CreateIntArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "int array" );
}

macro CreateIntArrayFunctionParameter()
[Category="Expression Commands", Guid="{53DA0148-14A2-4396-8907-9712CC530840}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerArrayExpressionNode, "Int Array", 0, 4, 0, 0 );
}

function void CreateIntVector2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec2" );
}

macro CreateIntVector2FunctionParameter()
[Category="Expression Commands", Guid="{A1C13E5E-F79F-467F-8169-E5F5AEAF3589}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorExpressionNode, "Ivec2", 2, 0, 0, 0 );
}

function void CreateIntVector3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec3" );
}

macro CreateIntVector3FunctionParameter()
[Category="Expression Commands", Guid="{7442E225-7551-4F33-85A7-FF174A5E894E}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorExpressionNode, "Ivec3", 3, 0, 0, 0 );
}

function void CreateIntVector4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec4" );
}

macro CreateIntVector4FunctionParameter()
[Category="Expression Commands", Guid="{B121AA2E-0CE7-489D-A81E-CB455C1FCA7A}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorExpressionNode, "Ivec4", 4, 0, 0, 0 );
}

function void CreateIntVector2ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec2 array" );
}

macro CreateIntVector2ArrayFunctionParameter()
[Category="Expression Commands", Guid="{9BBA6601-2D88-4DF4-A430-C675BD810C99}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorArrayExpressionNode, "Ivec2 Array", 2, 4, 0, 0 );
}

function void CreateIntVector3ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec3 array" );
}

macro CreateIntVector3ArrayFunctionParameter()
[Category="Expression Commands", Guid="{A225F339-11DE-44DD-B290-32BBCAE1AD21}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorArrayExpressionNode, "Ivec3 Array", 3, 4, 0, 0 );
}

function void CreateIntVector4ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "ivec4 array" );
}

macro CreateIntVector4ArrayFunctionParameter()
[Category="Expression Commands", Guid="{BF2F5FBE-1EA6-4096-B748-B8761CE541F5}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( IntegerVectorArrayExpressionNode, "Ivec4 Array", 4, 4, 0, 0 );
}

function void CreateUintFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uint" );
}

macro CreateUintFunctionParameter()
[Category="Expression Commands", Guid="{D354B125-DD7D-43B0-A76C-694B82EC4937}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerExpressionNode, "Uint", 0, 0, 0, 0 );
}

function void CreateUintArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uint array" );
}

macro CreateUintArrayFunctionParameter()
[Category="Expression Commands", Guid="{A73B3239-9593-497D-B1E1-D2777DA1349A}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerArrayExpressionNode, "Uint Array", 0, 4, 0, 0 );
}

function void CreateUintVector2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec2" );
}

macro CreateUintVector2FunctionParameter()
[Category="Expression Commands", Guid="{298FE8BE-BC17-4C53-996E-1305D2A7372C}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorExpressionNode, "Uvec2", 2, 0, 0, 0 );
}

function void CreateUintVector3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec3" );
}

macro CreateUintVector3FunctionParameter()
[Category="Expression Commands", Guid="{8CD30A56-CABB-4EC9-BE76-14BAFC9E8B97}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorExpressionNode, "Uvec3", 3, 0, 0, 0 );
}

function void CreateUintVector4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec4" );
}

macro CreateUintVector4FunctionParameter()
[Category="Expression Commands", Guid="{F426B1C6-2E41-4E06-827E-C433B7C5D2B1}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorExpressionNode, "Ivec4", 4, 0, 0, 0 );
}

function void CreateUintVector2ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec2 array" );
}

macro CreateUintVector2ArrayFunctionParameter()
[Category="Expression Commands", Guid="{4F1BB35E-C862-4465-9789-CF3208202220}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorArrayExpressionNode, "Uvec2 Array", 2, 4, 0, 0 );
}

function void CreateUintVector3ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec3 array" );
}

macro CreateUintVector3ArrayFunctionParameter()
[Category="Expression Commands", Guid="{2796B662-3A12-4FE2-8C88-B6F66067E1A3}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorArrayExpressionNode, "Uvec3 Array", 3, 4, 0, 0 );
}

function void CreateUintVector4ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "uvec4 array" );
}

macro CreateUintVector4ArrayFunctionParameter()
[Category="Expression Commands", Guid="{98534998-A817-46E3-A5BB-B83D9ED91DB5}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( UnsignedIntegerVectorArrayExpressionNode, "Uvec4 Array", 4, 4, 0, 0 );
}

function void CreateFloatFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "float" );
}

macro CreateFloatFunctionParameter()
[Category="Expression Commands", Guid="{D1B69A5B-53CC-4265-8AD9-162A51DE9021}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( FloatExpressionNode, "Float", 0, 0, 0, 0 );
}

function void CreateFloatArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "float array" );
}

macro CreateFloatArrayFunctionParameter()
[Category="Expression Commands", Guid="{5F3082DB-FFFC-44D9-B3BF-CCFE92B3D2B5}", Image=".\\icons\\new_float_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( FloatArrayExpressionNode, "Float Array", 0, 4, 0, 0 );
}

function void CreateVector2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec2" );
}

macro CreateVector2FunctionParameter()
[Category="Expression Commands", Guid="{07D1B421-CE47-4F13-891B-AAA7F202F291}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorExpressionNode, "Vec2", 2, 0, 0, 0 );
}

function void CreateVector3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec3" );
}

macro CreateVector3FunctionParameter()
[Category="Expression Commands", Guid="{AAB0C2D1-5ADE-4B95-8D0D-95878E71A270}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorExpressionNode, "Vec3", 3, 0, 0, 0 );
}

function void CreateVector4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec4" );
}

macro CreateVector4FunctionParameter()
[Category="Expression Commands", Guid="{18C2032B-D30E-4385-A6B0-8DBB63FE39B6}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorExpressionNode, "Vec4", 4, 0, 0, 0 );
}

function void CreateVector2ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec2 array" );
}

macro CreateVector2ArrayFunctionParameter()
[Category="Expression Commands", Guid="{010D34AE-5F53-417E-9226-B4AB0C9BBACF}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorArrayExpressionNode, "Vec2 Array", 2, 4, 0, 0 );
}

function void CreateVector3ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec3 array" );
}

macro CreateVector3ArrayFunctionParameter()
[Category="Expression Commands", Guid="{FE5056EB-2F0B-47E4-A2A4-0C60D1580044}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorArrayExpressionNode, "Vec3 Array", 3, 4, 0, 0 );
}

function void CreateVector4ArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "vec4 array" );
}

macro CreateVector4ArrayFunctionParameter()
[Category="Expression Commands", Guid="{41064658-B75A-48E5-A581-B29B25DA3DF2}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( VectorArrayExpressionNode, "Vec4 Array", 4, 4, 0, 0 );
}

function void CreateMat2x2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat2x2" );
}

macro CreateMat2x2FunctionParameter()
[Category="Expression Commands", Guid="{765B9443-47CD-4BD2-B0F4-793FE37B7ED7}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat2x2", 0, 0, 2, 2 );
}

function void CreateMat2x3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat2x3" );
}

macro CreateMat2x3FunctionParameter()
[Category="Expression Commands", Guid="{46D6FE3F-F37A-401F-A90C-C157D7C90492}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat2x3", 0, 0, 2, 3 );
}

function void CreateMat2x4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat2x4" );
}

macro CreateMat2x4FunctionParameter()
[Category="Expression Commands", Guid="{B56565F2-D598-49D9-9DDD-5FFC721AD4B2}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat2x4", 0, 0, 2, 4 );
}

function void CreateMat3x2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat3x2" );
}

macro CreateMat3x2FunctionParameter()
[Category="Expression Commands", Guid="{7BD062EC-086F-401A-A5ED-42AE5801D158}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat3x2", 0, 0, 3, 2 );
}

function void CreateMat3x3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat3x3" );
}

macro CreateMat3x3FunctionParameter()
[Category="Expression Commands", Guid="{6AD13E79-CD7B-42BC-8826-7535026CE79F}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat3x3", 0, 0, 3, 3 );
}

function void CreateMat3x4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat3x4" );
}

macro CreateMat3x4FunctionParameter()
[Category="Expression Commands", Guid="{38BFD1E2-5374-41F1-9859-6C571E8C3AF5}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat3x4", 0, 0, 3, 4 );
}

function void CreateMat4x2FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat4x2" );
}

macro CreateMat4x2FunctionParameter()
[Category="Expression Commands", Guid="{9AE0F5BB-0D92-4580-86E1-5CD9A5463CB4}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat4x2", 0, 0, 4, 2 );
}

function void CreateMat4x3FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat4x3" );
}

macro CreateMat4x3FunctionParameter()
[Category="Expression Commands", Guid="{81E44D48-78A4-49E9-8D77-E5AD245046B3}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat4x3", 0, 0, 4, 3 );
}

function void CreateMat4x4FunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "mat4x4" );
}

macro CreateMat4x4FunctionParameter()
[Category="Expression Commands", Guid="{59DC5CAF-B855-4131-BE97-97D0AF3A83A9}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( MatrixExpressionNode, "Mat4x4", 0, 0, 4, 4 );
}

function void CreateStructFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "struct" );
}

macro CreateStructFunctionParameter()
[Category="Expression Commands", Guid="{F1FA3BDE-0E60-4D93-84F6-2AB310B86D47}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( StructExpressionNode, "Struct", 0, 0, 0, 0 );
}

function void CreateStructArrayFunctionParameter_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionParameter_OnUpdate( commandInfo, "struct array" );
}

macro CreateStructArrayFunctionParameter()
[Category="Expression Commands", Guid="{4E338AB8-25B6-4592-9FD5-219A24AA14C7}", Image=".\\icons\\new_struct_assignment_expression.bmp"]
{
   AddFunctionParameterToModel( StructExpressionNode, "Struct", 0, 4, 0, 0 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIncludeSourceNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, ScriptNode, "Creates a new IncludeSourceNode." );
}

macro CreateIncludeSourceNode()
[Category="Create Commands", Guid="{DA2B40D0-BC61-4521-BBF3-FAFFD6E4F351}", Image=".\\icons\\new_shader_source_node.bmp"]
{
   auto List nodes;
   ValidateNodeCreateContext.CreateNodes( Model, IncludeSourceNode, "IncludeSourceNode", nodes, 0 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void SwapOperands(

   BinaryOperatorNode p_oBinaryOperatorNode,
   TypeInformation p_oNewExpressionType,
   ExpressionInfo p_oExpressionInfo

   )
{
   //SpaSelectUtil.ValidateOperandChange( commandInfo );
   auto List a_lOperands;
   p_oBinaryOperatorNode.GetOperands( a_lOperands );
   if( a_lOperands.GetCount() != 2 )
   {
      return;
   }

   Group a_oParent = (Group)p_oBinaryOperatorNode.Parent();

   VariableExpressionNode a_oLeft =
      (VariableExpressionNode)p_oBinaryOperatorNode.LeftDataSource;
   VariableExpressionNode a_oRight =
      (VariableExpressionNode)p_oBinaryOperatorNode.RightDataSource;
   int a_nLeftChildIndex = a_oLeft.ChildIndex();
   int a_nRightChildIndex = a_oRight.ChildIndex();

   // Clear the left and right data source.
   a_oLeft.OperatorDataSource = null;
   a_oRight.OperatorDataSource = null;

   // Create the new left operand.
   VariableExpressionNode a_oNewLeft = (VariableExpressionNode)p_oNewExpressionType.CreateObject();
   a_oNewLeft.SetParams( p_oExpressionInfo );
   a_oNewLeft.Name = a_oLeft.Name;
   a_oNewLeft.MakeLeftExpression();
   a_oNewLeft.OperatorDataSource = p_oBinaryOperatorNode;

   // Create the new right operand.
   VariableExpressionNode a_oNewRight = (VariableExpressionNode)p_oNewExpressionType.CreateObject();
   a_oNewRight.SetParams( p_oExpressionInfo );
   a_oNewRight.Name = a_oRight.Name;
   a_oNewRight.MakeRightExpression();
   a_oNewRight.OperatorDataSource = p_oBinaryOperatorNode;

   // Set the BinaryOperatorNode's left and right data sources.
   p_oBinaryOperatorNode.LeftDataSource = a_oNewLeft;
   p_oBinaryOperatorNode.RightDataSource = a_oNewRight;

   // Delete the operands we just replaced.
   if( a_oLeft && a_oRight )
   {
      Model.DeleteNode( a_oLeft );
      Model.DeleteNode( a_oRight );
   }

   // Add the nodes the model.
   Model.AddNode( a_oNewLeft, a_oParent, a_nLeftChildIndex );
   Model.AddNode( a_oNewRight, a_oParent, a_nRightChildIndex );

}

////////////////////////////////////////////////////////////////////////////////
// function
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsTo( TypeInformation p_oNewOperandType, ExpressionInfo p_oExpressionInfo )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( BinaryOperatorNode ) )
   {
      BinaryOperatorNode a_oBinaryOperatorNode = (BinaryOperatorNode)a_oSelNode;
      SwapOperands( a_oBinaryOperatorNode, p_oNewOperandType, p_oExpressionInfo );
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ValidateChangeOperandPair(

   CommandPresentationModuleInfo commandInfo,
   TypeInformation p_oExpressionType,
   ExpressionInfo p_oExpressionInfo

   )
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( BinaryOperatorNode ) )
   {
      BinaryOperatorNode a_oBinaryOperatorNode = (BinaryOperatorNode)a_oSelNode;

      auto BinaryOperatorNode a_oBinaryOperatorTemp;
      a_oBinaryOperatorTemp.Operator = a_oBinaryOperatorNode.Operator;
      VariableExpressionNode a_oNewLeftTemp =
         (VariableExpressionNode)p_oExpressionType.CreateObject();
      a_oNewLeftTemp.SetParams( p_oExpressionInfo );
      VariableExpressionNode a_oNewRightTemp =
         (VariableExpressionNode)p_oExpressionType.CreateObject();
      a_oNewRightTemp.SetParams( p_oExpressionInfo );
      a_oBinaryOperatorTemp.LeftDataSource = a_oNewLeftTemp;
      a_oBinaryOperatorTemp.RightDataSource = a_oNewRightTemp;

      auto ExpressionInfo a_oExpressionInfo;
      a_oBinaryOperatorTemp.GetExpressionResult( a_oExpressionInfo );
      string a_sType = p_oExpressionType.GetTypeName();
      string a_sOperator = a_oBinaryOperatorNode.GetOperatorString();

      int a_nScalarDimension = a_oExpressionInfo.GetScalarCount();
      Node a_oParent = (Node)a_oBinaryOperatorNode.Parent();
      bool a_bCanInitializeParent = false;
      if( a_oParent && a_oParent.IsDerived( VariableExpressionNode ) )
      {
         VariableExpressionNode a_oParentExpression =
            (VariableExpressionNode)a_oParent;
         auto ExpressionInfo a_oParentInfo;
         a_oParentExpression.GetParams( a_oParentInfo );
         int a_nParentScalarDimension = a_oParentInfo.GetScalarCount();
         if( a_nScalarDimension >= a_nParentScalarDimension || a_nScalarDimension == 1 )
         {
            a_bCanInitializeParent = true;
         }
      }
      else
      {
         // Parent is not a VariableExpressionNode
         // so this is basically irrelevant. Set to
         // true to allow the user to make expressions.
         a_bCanInitializeParent = true;
      }


      if( !a_bCanInitializeParent )
      {
         string a_sHint = "The following expression: [" + a_sType +
            " " + a_sOperator + " " + a_sType + "] cannot initialize its parent expression";
         commandInfo.SetEnabled( false );
         commandInfo.Status.SetHint( a_sHint );
      }
      else
      if( !a_oExpressionInfo.IsValidDataType() )
      {
         string a_sHint = "The operator [" + a_sOperator +
            "] cannot produce a valid expression with operands of type <" +
            a_sType +">" ;
         commandInfo.SetEnabled( false );
         commandInfo.Status.SetHint( a_sHint );
      }
      else
      {
         string a_sHint = "Creates the following expression: [" +
            a_sType + " " + a_sOperator + " " + a_sType + "]";
         commandInfo.Status.SetHint( a_sHint );
      }
   }
}

function void ChangeOperandsToBool_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBool()
[Category="Create Commands", Guid="{E20FC652-1CCF-4931-BF29-FBE9D477CF70}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBoolArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBoolArray()
[Category="Create Commands", Guid="{43CF55AE-7025-484A-9306-14C6BE7EAD4A}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec2()
[Category="Create Commands", Guid="{58514776-9825-4FA1-B226-0BF71EE43ED0}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec3()
[Category="Create Commands", Guid="{2C07F9AC-19B4-49C7-85A0-D1C7242B902D}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec4()
[Category="Create Commands", Guid="{826AC725-9F35-4848-A6A3-7FA17F59919D}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec2Array()
[Category="Create Commands", Guid="{61219600-479B-4F55-8869-6BBD3EA25E47}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec3Array()
[Category="Create Commands", Guid="{5D2292AC-7B46-4CA9-A553-54E975B1D203}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToBvec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToBvec4Array()
[Category="Create Commands", Guid="{766CC57E-83D9-4418-B065-C78DC91E9A4D}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsToInt_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToInt()
[Category="Create Commands", Guid="{A3583190-D315-4A83-8A20-897BF88A2CFB}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIntArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIntArray()
[Category="Create Commands", Guid="{30279270-A699-4BA4-B5DE-ABF82EF3240B}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec2()
[Category="Create Commands", Guid="{93D47954-80AD-4C6C-A7FB-92DB582573CE}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec3()
[Category="Create Commands", Guid="{15CA31D1-9167-49A3-BD5C-22B57164DBD1}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec4()
[Category="Create Commands", Guid="{A2C4EF8B-3D63-42EE-BB8C-4AFE49D75805}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec2Array()
[Category="Create Commands", Guid="{6C870395-9E33-4A18-8DA0-4B6A922A1C9C}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec3Array()
[Category="Create Commands", Guid="{30AFF756-FAF5-48CF-B694-9703B36076BF}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToIvec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToIvec4Array()
[Category="Create Commands", Guid="{4203F5E6-DFFD-40E2-ABFB-2129961CA667}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( IntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsToUint_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUint()
[Category="Create Commands", Guid="{A9414527-C3BF-4224-8BFC-56B9D451B710}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUintArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUintArray()
[Category="Create Commands", Guid="{0D6747BD-7075-4E38-BAC0-27BA2829AAE0}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec2()
[Category="Create Commands", Guid="{C07A6FE1-3A8D-47A8-A433-AB88C8C71AED}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec3()
[Category="Create Commands", Guid="{7A9DE662-4ADE-4392-9B63-639C2D93478E}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec4()
[Category="Create Commands", Guid="{8628E037-6785-41A2-B852-0500C0A6A1C5}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec2Array()
[Category="Create Commands", Guid="{6A0C5868-6780-4E6B-801E-3F746F21BDFF}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec3Array()
[Category="Create Commands", Guid="{15EFC441-13F6-4884-B493-8642E66F74AE}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToUvec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToUvec4Array()
[Category="Create Commands", Guid="{5E26E241-94CF-485A-BE61-3ADC9632A8AC}", Image=".\\icons\\new_integer_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( UnsignedIntegerVectorArrayExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsToFloat_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, FloatExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToFloat()
[Category="Create Commands", Guid="{8D0EEB0A-E38D-4A49-9A73-0331B6B6FB67}", Image=".\\icons\\new_float_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( FloatExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToFloatArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, FloatArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToFloatArray()
[Category="Create Commands", Guid="{C4629D20-6E13-45ED-98A6-0AB5EDBBF43A}", Image=".\\icons\\new_float_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( FloatArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, VectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec2()
[Category="Create Commands", Guid="{A50A59C6-9CAE-4838-ACCA-DE9C53DD56D6}", Image=".\\icons\\new_float_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( VectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, VectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec3()
[Category="Create Commands", Guid="{CDF68E39-C558-43BE-BE7A-863AA53B16C9}", Image=".\\icons\\new_float_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( VectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, VectorExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec4()
[Category="Create Commands", Guid="{3C84A2D6-785F-4918-AA64-24B72DB9DECD}", Image=".\\icons\\new_boolean_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( VectorExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec2Array()
[Category="Create Commands", Guid="{39041F86-2A96-497A-A8A4-041935D2AC64}", Image=".\\icons\\new_vector_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec3Array()
[Category="Create Commands", Guid="{24EB911F-4CC9-4666-8FB4-B19E9E0E9FC3}", Image=".\\icons\\new_vector_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ValidateChangeOperandPair( commandInfo, BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToVec4Array()
[Category="Create Commands", Guid="{41706424-9CD9-415C-A79E-C78B4544FF67}", Image=".\\icons\\new_vector_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   ChangeOperandsTo( BooleanVectorArrayExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsToMat2x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 2, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x2()
[Category="Create Commands", Guid="{E37A1778-D7E2-493F-B7DE-C88F2FE323A5}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 2, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat2x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 3, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x3()
[Category="Create Commands", Guid="{6472EE76-2D02-4E7D-9EF2-CA833C61A296}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 3, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat2x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 4, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x4()
[Category="Create Commands", Guid="{D1DAFFD2-7893-47C6-BDBD-F25EB78FFEAF}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 4, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 2, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x2()
[Category="Create Commands", Guid="{FA4A8907-5B81-4AE8-AF98-AC4F5BCA2E99}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 2, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 3, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x3()
[Category="Create Commands", Guid="{94947771-0D34-40B5-A15A-4D7C69CA317B}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 3, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 4, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x4()
[Category="Create Commands", Guid="{DEC54200-3AAE-4102-BEFF-5CF40B16333B}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 4, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 2, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x2()
[Category="Create Commands", Guid="{60110DCD-9131-4C8E-AA0B-CD8FC66B5C27}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 2, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 3, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x3()
[Category="Create Commands", Guid="{DE3CF9E8-FA98-496E-9197-D4B36BC04E32}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 3, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 4, 0 );
   ValidateChangeOperandPair( commandInfo, MatrixExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x4()
[Category="Create Commands", Guid="{6043FE12-521D-4197-8704-FC7914F1542A}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 4, 0 );
   ChangeOperandsTo( MatrixExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void ChangeOperandsToMat2x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 2, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x2Array()
[Category="Create Commands", Guid="{1EEFA1C0-3EA6-4156-BC76-0FFD82186432}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 2, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat2x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 3, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x3Array()
[Category="Create Commands", Guid="{334DA23A-B140-40F4-8CBC-C18DA3A509B0}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 3, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat2x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 4, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat2x4Array()
[Category="Create Commands", Guid="{636DA114-B8C0-4E79-BA53-ADF61F3F952B}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 2, 4, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 2, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x2Array()
[Category="Create Commands", Guid="{C956541F-50BB-47EA-A4D5-1D0C427F1D64}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 2, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 3, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x3Array()
[Category="Create Commands", Guid="{33AA1D18-5187-4405-ABD7-81C591DDA9F7}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 3, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat3x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 4, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat3x4Array()
[Category="Create Commands", Guid="{7D67DEFA-0B7B-4046-A5E4-39D9BA648601}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 3, 4, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 2, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x2Array()
[Category="Create Commands", Guid="{20DF71C5-140A-48A1-94A5-3940C6167B51}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 2, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 3, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x3Array()
[Category="Create Commands", Guid="{0F1D8AA0-0093-4A3D-BCF3-2C37E64FAB5B}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 3, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

function void ChangeOperandsToMat4x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 4, 4 );
   ValidateChangeOperandPair( commandInfo, MatrixArrayExpressionNode, a_oExpressionInfo );
}

macro ChangeOperandsToMat4x4Array()
[Category="Create Commands", Guid="{08E1C48C-C2D7-4FE5-918C-1275E931D1E2}", Image=".\\icons\\new_matrix_node.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, 4, 4, 4 );
   ChangeOperandsTo( MatrixArrayExpressionNode, a_oExpressionInfo );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIfStatementNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   //SpaSelectUtil.ValidateOperandChange( commandInfo );
}

macro CreateIfStatementNode()
[Category="Create Commands", Guid="{83FB969B-B57F-4214-904C-A5F85AD23786}", Image=".\\icons\\new_statement_node.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   {
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelGroup = (Group)a_oSelNode;
         StatementNode a_oIfStatementNode = new StatementNode;
         a_oIfStatementNode.StatementType = 2;
         a_oIfStatementNode.Name = "If";

         ConditionNode a_oConditionNode = new ConditionNode;
         a_oConditionNode.Name = "Condition";
         a_oConditionNode.Enabled = false;

         StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
         a_oStatementBlockNode.Name = "Body";

         Model.AddNode( a_oConditionNode, a_oIfStatementNode, -1 );
         Model.AddNode( a_oStatementBlockNode, a_oIfStatementNode, -1 );
         Model.AddNode( a_oIfStatementNode, a_oSelGroup, -1 );
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIfStatementNodeWithBooleanExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   //SpaSelectUtil.ValidateOperandChange( commandInfo );
}

macro CreateIfStatementNodeWithBooleanExpression()
[Category="Create Commands", Guid="{47C7BA3E-4C0F-4B4D-9AF6-922A5F030646}", Image=".\\icons\\new_statement_node.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   {
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelGroup = (Group)a_oSelNode;
         StatementNode a_oIfStatementNode = new StatementNode;
         a_oIfStatementNode.StatementType = 2;
         a_oIfStatementNode.Name = "If";

         ConditionNode a_oConditionNode = new ConditionNode;
         a_oConditionNode.Name = "Condition";
         a_oConditionNode.Enabled = false;

         BooleanExpressionNode a_oBooleanExpressionNode = new BooleanExpressionNode;
         a_oBooleanExpressionNode.Name = "Boolean Expression";
         a_oBooleanExpressionNode.MakeExpression();
         a_oBooleanExpressionNode.GenerateExpression( BooleanExpressionGenerator );

         StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
         a_oStatementBlockNode.Name = "Body";

         Model.AddNode( a_oBooleanExpressionNode, a_oConditionNode, -1 );
         Model.AddNode( a_oConditionNode, a_oIfStatementNode, -1 );
         Model.AddNode( a_oStatementBlockNode, a_oIfStatementNode, -1 );
         Model.AddNode( a_oIfStatementNode, a_oSelGroup, -1 );
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateElseStatement_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   if( Model.GetSelectCount() > 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single StatementNode" );
      return;
   }

   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   if( a_oSelNode && a_oSelNode.IsDerived( StatementNode ) )
   {
      StatementNode a_oStatementNode = (StatementNode)a_oSelNode;
      if( a_oStatementNode.StatementType != 2 ) // 'if'
      {
         commandInfo.SetEnabled( false );
         commandInfo.Status.SetHint( "Please select an 'if' StatementNode" );
         return;
      }
   }
}

macro CreateElseStatement()
[Category="Create Commands", Guid="{F1702219-D577-42EA-BD1C-3C5DD5CE325E}", Image=".\\icons\\new_statement_node.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   {
      if( a_oSelNode && a_oSelNode.IsDerived( StatementNode ) )
      {
         StatementNode a_oStatementNode = (StatementNode)a_oSelNode;
         int a_nChildIndex = a_oStatementNode.ChildIndex();

         if( a_oStatementNode.NextStatement )
         {
            // In this case we already have an 'else' attached to
            // the 'if' statement, so we we need to insert an 'else/if'
            // into the statement chain ( or we'll get a syntax error in
            // the shader ).
            StatementNode a_oNextStatementNode = (StatementNode)a_oStatementNode.NextStatement;
            if( a_oNextStatementNode && a_oNextStatementNode.StatementType == 3 ) // 'else'
            {
               // Create a new 'else' StatementNode.
               StatementNode a_oElseStatementNode = new StatementNode;
               a_oElseStatementNode.StatementType = 3;
               a_oElseStatementNode.Name = "Else";
               StatementBlockNode a_oElseBlock = new StatementBlockNode;
               a_oElseBlock.Name = "Body";
               a_oElseStatementNode.AddChild( a_oElseBlock );

               // Set the selected StatementNode's 'NextStatement' property
               // to the new 'else' StatementNode we just created.
               a_oStatementNode.NextStatement = a_oElseStatementNode;

               // Create a new 'if' StatementNode.
               StatementNode a_oIfStatementNode = new StatementNode;
               a_oIfStatementNode.StatementType = 2;
               a_oIfStatementNode.Name = "If";
               a_oIfStatementNode.NextStatement = a_oNextStatementNode;
               ConditionNode a_oConditionNode = new ConditionNode;
               a_oConditionNode.Name = "Condition";
               a_oIfStatementNode.AddChild( a_oConditionNode );
               StatementBlockNode a_oIfBlock = new StatementBlockNode;
               a_oIfBlock.Name = "Body";
               a_oIfStatementNode.AddChild( a_oIfBlock );

               // Set the new 'else' StatementNode's 'NextStatement'
               // property to the previous 'else' that already exists.
               a_oElseStatementNode.NextStatement = a_oIfStatementNode;

               Model.AddNode( a_oElseStatementNode, a_oStatementNode.Parent(), a_nChildIndex + 1 );
               Model.AddNode( a_oIfStatementNode, a_oStatementNode.Parent(), a_nChildIndex + 2 );
            }
         }
         else
         {
            StatementNode a_oElseStatementNode = new StatementNode;
            a_oElseStatementNode.StatementType = 3;
            a_oElseStatementNode.Name = "Else";
            a_oStatementNode.NextStatement = a_oElseStatementNode;

            StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
            a_oStatementBlockNode.Name = "Body";

            Model.AddNode( a_oStatementBlockNode, a_oElseStatementNode, -1 );
            Model.AddNode( a_oElseStatementNode, a_oStatementNode.Parent(), a_nChildIndex + 1 );
         }
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIteratorNode_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, StatementBlockNode,
      "Creates an IteratorNode." );
}

macro CreateIteratorNode()
[Category="Create Commands", Guid="{52CB0184-02A7-4530-AF93-A037E42D44F0}", Image=".\\icons\\new_iterator_node.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();
   {
      if( a_oSelNode && a_oSelNode.IsDerived( StatementBlockNode ) )
      {
         StatementBlockNode a_oStatementBlockNode = (StatementBlockNode)a_oSelNode;

         IteratorNode a_oIteratorNode = new IteratorNode;
         a_oIteratorNode.Name = "for";

         InitializationNode a_oInitializationNode = new InitializationNode;
         a_oInitializationNode.Name = "Initialization";

         ConditionNode a_oConditionNode = new ConditionNode;
         a_oConditionNode.Name = "Condition";

         LoopNode a_oLoopNode = new LoopNode;
         a_oLoopNode.Name = "Loop";

         StatementBlockNode a_oForLoopBody = new StatementBlockNode;
         a_oForLoopBody.Name = "Body";

         a_oIteratorNode.AddChild( a_oInitializationNode );
         a_oIteratorNode.AddChild( a_oConditionNode );
         a_oIteratorNode.AddChild( a_oLoopNode );
         a_oIteratorNode.AddChild( a_oForLoopBody );
         Model.AddNode( a_oIteratorNode, a_oStatementBlockNode, -1 );
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateTraversalGuardExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   auto TypeInfoArray types;
   types.Add( ShaderDeclarationNode );
   types.Add( MainFunctionNode );
   types.Add( StatementBlockNode );
   bool a_bCorrectTypeSelected = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bCorrectTypeSelected );
   
   if( !a_bCorrectTypeSelected )
   {
      commandInfo.Status.SetHint( "Please select a node of type ShaderSourceNode, MainFunctionNode, or StatementBlockNode." );
      return;
   }

   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node." );
      return;
   }

   commandInfo.Status.SetHint( "Creates a traversal guard expression that controls code generation." );

}

macro CreateTraversalGuardExpression()
[Category="Create Commands", Guid="{8415F5B3-82B4-45C0-8210-D23F3919B380}", Image=".\\icons\\new_traversal_guard_node.bmp"]
{
   Node a_oSelNode = (Node)Model.GetFirstSelectedNode().GetNode();

   Group a_oSelGroup;
   if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
   {
      a_oSelGroup = (Group)a_oSelNode;
   }
   
   if( !a_oSelGroup )
   {
      return;
   }

   TraversalGuardNode a_oTraversalGuardNode = new TraversalGuardNode;
   a_oTraversalGuardNode.Name = "Guard";
   a_oTraversalGuardNode.Language = 1;
   a_oTraversalGuardNode.Type = "int";
   a_oTraversalGuardNode.Enabled = true;
   a_oTraversalGuardNode.Code = "return false";

   ConditionNode a_oConditionNode = new ConditionNode;
   a_oConditionNode.Name = "Condition";
   a_oTraversalGuardNode.AddChild( a_oConditionNode );

   BooleanExpressionNode a_oBooleanExpressionNode = new BooleanExpressionNode;
   a_oBooleanExpressionNode.Name = "Boolean Expression";
   a_oBooleanExpressionNode.MakeExpression();
   a_oConditionNode.AddChild( a_oBooleanExpressionNode );

   StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
   a_oStatementBlockNode.Name = "Body";
   a_oTraversalGuardNode.AddChild( a_oStatementBlockNode );

   Model.AddNode( a_oTraversalGuardNode, a_oSelGroup, -1 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateFunctionDeclaration_OnUpdate(

   CommandPresentationModuleInfo commandInfo,
   string p_sTypeInfo

   )
{
   auto TypeInfoArray types;
   types.Add( AccessControlNode );
   types.Add( ShaderSourceNode );
   types.Add( ShaderDeclarationNode );
   bool a_bCorrectTypeSelected = SpaSelectUtil.ValidateSelectionArray( types );
   commandInfo.SetEnabled( a_bCorrectTypeSelected );
   
   if( !a_bCorrectTypeSelected )
   {
      commandInfo.Status.SetHint( "Select a node of type AccessControlNode, IncludeSourceNode, or any type of ShaderDeclarationNode." );
      return;
   }

   if( Model.GetSelectCount() != 1 )
   {
      commandInfo.SetEnabled( false );
      commandInfo.Status.SetHint( "Please select a single node." );
      return;
   }

   commandInfo.Status.SetHint( "Creates a <" + p_sTypeInfo + "> function declaration" );
}

function void CreateFunctionDeclaration(

   TypeInformation p_oTypeInfo,
   TypeInformation p_oCodeGeneratorType,
   ExpressionInfo p_oExpressionInfo

   )
{
   Node a_oNode = (Node)Model.GetFirstSelectedNode().GetNode();

   if( !a_oNode || !( a_oNode.IsDerived( Group ) ) || !p_oTypeInfo )
   {
      return;
   }

   Group a_oSelGroup = (Group)a_oNode;

   if( p_oTypeInfo.IsDerived( VariableExpressionNode ) )
   {
      Node a_oNewNode = ValidateNodeCreateContext.CreateNodeOfType( p_oTypeInfo, "" );
      Node a_oReturn = ValidateNodeCreateContext.CreateNodeOfType( p_oTypeInfo, "" );

      VariableExpressionNode a_oFunctionDeclaration =
         (VariableExpressionNode)a_oNewNode;
      a_oFunctionDeclaration.MakeFunctionDeclaration();
      a_oFunctionDeclaration.FunctionName = "MyFunction";
      a_oFunctionDeclaration.SetParams( p_oExpressionInfo );
      a_oFunctionDeclaration.Name =
         a_oFunctionDeclaration.GetFunctionDescriptionString( p_oCodeGeneratorType );

      VariableExpressionNode a_oReturnExpression =
         (VariableExpressionNode)a_oReturn;
      a_oReturnExpression.Name = "Return";
      a_oReturnExpression.MakeReturn();
      a_oReturnExpression.SetParams( p_oExpressionInfo );

      ParameterListNode a_oFunctionParameters = new ParameterListNode;
      a_oFunctionParameters.Name = "Parameters";

      StatementBlockNode a_oStatementBlockNode = new StatementBlockNode;
      a_oStatementBlockNode.Name = "Body";
      a_oStatementBlockNode.AddChild( a_oReturn );

      a_oFunctionDeclaration.AddChild( a_oFunctionParameters );
      a_oFunctionDeclaration.AddChild( a_oStatementBlockNode );

      Model.AddNode( a_oFunctionDeclaration, a_oSelGroup, -1 );
   }
}

function void CreateFunctionDeclarationBool_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bool" );
}

macro CreateFunctionDeclarationBool()
[Category="Create Commands", Guid="{80707D29-6226-4F27-B0CE-10CB8E0AAB7C}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanExpressionNode, BooleanExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bool" );
}

macro CreateFunctionDeclarationBoolArray()
[Category="Create Commands", Guid="{3FE8F960-D71D-4358-96A8-BC28E6C4F8AC}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanArrayExpressionNode, BooleanArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec2" );
}

macro CreateFunctionDeclarationBoolVec2()
[Category="Create Commands", Guid="{793CAE8A-116A-42C6-BDEE-8B92C3E11B92}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec3" );
}

macro CreateFunctionDeclarationBoolVec3()
[Category="Create Commands", Guid="{0FE4D84D-AE29-4B42-AC90-7455440B5722}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec4" );
}

macro CreateFunctionDeclarationBoolVec4()
[Category="Create Commands", Guid="{7C6C0B04-892B-49D0-BB03-EA1172F344B9}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorExpressionNode, BooleanVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec2" );
}

macro CreateFunctionDeclarationBoolVec2Array()
[Category="Create Commands", Guid="{A53AEFC8-C97A-49C0-8FD8-310A70B05E8B}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorArrayExpressionNode, BooleanVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec3" );
}

macro CreateFunctionDeclarationBoolVec3Array()
[Category="Create Commands", Guid="{D24DCAB8-AF02-4F5B-B870-F59B8C5D15F4}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorArrayExpressionNode, BooleanVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationBoolVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "bvec4" );
}

macro CreateFunctionDeclarationBoolVec4Array()
[Category="Create Commands", Guid="{587B165A-728D-4AA9-9742-5E91EDAE5C25}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( BooleanVectorArrayExpressionNode, BooleanVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationInt_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "int" );
}

macro CreateFunctionDeclarationInt()
[Category="Create Commands", Guid="{1318BF2A-4F19-440F-840B-0A273E8FE51E}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerExpressionNode, IntegerExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "int" );
}

macro CreateFunctionDeclarationIntArray()
[Category="Create Commands", Guid="{BD0F2D22-757C-4D1E-BF24-46A6E2497429}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerArrayExpressionNode, IntegerArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec2" );
}

macro CreateFunctionDeclarationIntVec2()
[Category="Create Commands", Guid="{D70A45A3-B4E6-42CA-8E17-B5CAE1199A1A}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec3" );
}

macro CreateFunctionDeclarationIntVec3()
[Category="Create Commands", Guid="{624B5107-1172-499A-BE7F-D5D9993636E1}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec4" );
}

macro CreateFunctionDeclarationIntVec4()
[Category="Create Commands", Guid="{7E6AE91E-A73D-4F9B-AE77-DA8A076027E6}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorExpressionNode, IntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec2" );
}

macro CreateFunctionDeclarationIntVec2Array()
[Category="Create Commands", Guid="{6955E5B5-C58B-45F0-B4A7-D3777A857D13}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorArrayExpressionNode, IntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec3" );
}

macro CreateFunctionDeclarationIntVec3Array()
[Category="Create Commands", Guid="{393FF6B8-04D0-461A-961A-F7D2658DA105}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorArrayExpressionNode, IntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationIntVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "ivec4" );
}

macro CreateFunctionDeclarationIntVec4Array()
[Category="Create Commands", Guid="{1A3457F5-B541-4E74-8652-628AD7214BE9}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( IntegerVectorArrayExpressionNode, IntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUint_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uint" );
}

macro CreateFunctionDeclarationUint()
[Category="Create Commands", Guid="{98F20D16-A2BB-4670-8622-F2FE3B44FF9C}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerExpressionNode, UnsignedIntegerExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uint" );
}

macro CreateFunctionDeclarationUintArray()
[Category="Create Commands", Guid="{0155AA3C-3D51-47E3-8765-FDC38C2463AD}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerArrayExpressionNode, UnsignedIntegerArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec2" );
}

macro CreateFunctionDeclarationUintVec2()
[Category="Create Commands", Guid="{90AA3791-D0A2-4213-8AD2-7A114FF2EA92}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec3" );
}

macro CreateFunctionDeclarationUintVec3()
[Category="Create Commands", Guid="{35D2E881-B95B-49D7-A82D-F54B77B78211}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec4" );
}

macro CreateFunctionDeclarationUintVec4()
[Category="Create Commands", Guid="{51AB228B-7785-49AD-8F03-913E63678445}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorExpressionNode, UnsignedIntegerVectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec2" );
}

macro CreateFunctionDeclarationUintVec2Array()
[Category="Create Commands", Guid="{0FF648E1-3AD9-4280-BCAA-FADA71A20AD7}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorArrayExpressionNode,
      UnsignedIntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec3" );
}

macro CreateFunctionDeclarationUintVec3Array()
[Category="Create Commands", Guid="{564EE795-758A-45EE-BAF5-6312CE0BD8A3}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorArrayExpressionNode, UnsignedIntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationUintVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "uvec4" );
}

macro CreateFunctionDeclarationUintVec4Array()
[Category="Create Commands", Guid="{FFAC0F5F-459C-444E-8E9D-7C5C4D564014}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( UnsignedIntegerVectorArrayExpressionNode, UnsignedIntegerVectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloat_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "float" );
}

macro CreateFunctionDeclarationFloat()
[Category="Create Commands", Guid="{E42C784A-4875-4EA6-A508-CDE597895928}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( FloatExpressionNode, FloatExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatArray_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "float" );
}

macro CreateFunctionDeclarationFloatArray()
[Category="Create Commands", Guid="{15F74416-C512-4BED-94C2-7CDC86C32C58}", Image=".\\icons\\new_bool_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseScalarArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( FloatArrayExpressionNode, FloatArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec2" );
}

macro CreateFunctionDeclarationFloatVec2()
[Category="Create Commands", Guid="{F219B588-D94E-4976-9E9C-234ABECEAD24}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorExpressionNode, VectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec3" );
}

macro CreateFunctionDeclarationFloatVec3()
[Category="Create Commands", Guid="{B0E67B0B-503A-4001-81F9-318F0583EEE2}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorExpressionNode, VectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec4" );
}

macro CreateFunctionDeclarationFloatVec4()
[Category="Create Commands", Guid="{992CCE1E-3D4B-4ACC-AB4B-3082640AEB22}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorExpressionNode, VectorExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec2" );
}

macro CreateFunctionDeclarationFloatVec2Array()
[Category="Create Commands", Guid="{08546C34-316C-4C88-81E4-AFA9BBF95E2F}", Image=".\\icons\\new_vec2_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec2ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorArrayExpressionNode, VectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec3" );
}

macro CreateFunctionDeclarationFloatVec3Array()
[Category="Create Commands", Guid="{4503877C-7D10-4781-B1E5-66A97051C4C3}", Image=".\\icons\\new_vec3_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec3ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorArrayExpressionNode, VectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationFloatVec4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "vec4" );
}

macro CreateFunctionDeclarationFloatVec4Array()
[Category="Create Commands", Guid="{67F7E538-A792-4EB7-A67B-C4BA6262AFCF}", Image=".\\icons\\new_vec4_assignment_expression.bmp"]
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseTvec4ExpressionInfo( a_oExpressionInfo );
   Create.SetBaseArrayExpressionInfo( a_oExpressionInfo );
   CreateFunctionDeclaration( VectorArrayExpressionNode, VectorArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateMatrixFunctionDeclaration( int p_nCols, int p_nRows )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, p_nCols, p_nRows, 0 );
   CreateFunctionDeclaration( MatrixExpressionNode, MatrixExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationMat2x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x2" );
}

macro CreateFunctionDeclarationMat2x2()
[Category="Create Commands", Guid="{6CE8B739-9D00-4150-A48A-2CE6BC854C57}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 2, 2 );
}

function void CreateFunctionDeclarationMat2x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x3" );
}

macro CreateFunctionDeclarationMat2x3()
[Category="Create Commands", Guid="{14A24A35-D19C-4A51-9A66-CE8DF14295B3}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 2, 3 );
}

function void CreateFunctionDeclarationMat2x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x4" );
}

macro CreateFunctionDeclarationMat2x4()
[Category="Create Commands", Guid="{35E54FB5-C325-47A5-9BA4-381879C69E19}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 2, 4 );
}

function void CreateFunctionDeclarationMat3x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x2" );
}

macro CreateFunctionDeclarationMat3x2()
[Category="Create Commands", Guid="{78FBB067-D2D6-4172-9DFE-DEF7F8FA207C}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 3, 2 );
}

function void CreateFunctionDeclarationMat3x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x3" );
}

macro CreateFunctionDeclarationMat3x3()
[Category="Create Commands", Guid="{CB9A84AC-BD24-481A-8F5A-978CA03D14D4}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 3, 3 );
}

function void CreateFunctionDeclarationMat3x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x4" );
}

macro CreateFunctionDeclarationMat3x4()
[Category="Create Commands", Guid="{BFC34461-9930-4EC8-B124-8D78782DD844}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 3, 4 );
}

function void CreateFunctionDeclarationMat4x2_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x2" );
}

macro CreateFunctionDeclarationMat4x2()
[Category="Create Commands", Guid="{017DF459-C318-4709-A212-640421316906}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 4, 2 );
}

function void CreateFunctionDeclarationMat4x3_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x3" );
}

macro CreateFunctionDeclarationMat4x3()
[Category="Create Commands", Guid="{735CF7DF-E502-42B5-A532-E276FDAF299D}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 4, 3 );
}

function void CreateFunctionDeclarationMat4x4_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x4" );
}

macro CreateFunctionDeclarationMat4x4()
[Category="Create Commands", Guid="{084414F0-791E-4670-9FEE-6F000604C98F}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   CreateMatrixFunctionDeclaration( 4, 4 );
}

function void CreateMatrixArrayFunctionDeclaration( int p_nCols, int p_nRows, int p_nCount )
{
   auto ExpressionInfo a_oExpressionInfo;
   Create.SetBaseMatrixExpressionInfo( a_oExpressionInfo, p_nCols, p_nRows, p_nCount );
   CreateFunctionDeclaration( MatrixArrayExpressionNode, MatrixArrayExpressionGenerator, a_oExpressionInfo );
}

function void CreateFunctionDeclarationMat2x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x2 array" );
}

macro CreateFunctionDeclarationMat2x2Array()
[Category="Create Commands", Guid="{2BEF2144-DE0F-46C4-B75C-E7798BB1D02D}", Image=".\\icons\\new_matrix2x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 2, 2, 4 );
}

function void CreateFunctionDeclarationMat2x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x3 array" );
}

macro CreateFunctionDeclarationMat2x3Array()
[Category="Create Commands", Guid="{79CB1F0F-3D0E-43FB-BF65-7E667F2A36CE}", Image=".\\icons\\new_matrix2x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 2, 3, 4 );
}

function void CreateFunctionDeclarationMat2x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat2x4 array" );
}

macro CreateFunctionDeclarationMat2x4Array()
[Category="Create Commands", Guid="{64237581-29C2-4EEF-BBD1-3D26FE2140B4}", Image=".\\icons\\new_matrix2x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 2, 4, 4 );
}

function void CreateFunctionDeclarationMat3x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x2 array" );
}

macro CreateFunctionDeclarationMat3x2Array()
[Category="Create Commands", Guid="{F266CE7C-652C-409C-899D-5BA9A7F3A380}", Image=".\\icons\\new_matrix3x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 3, 2, 4 );
}

function void CreateFunctionDeclarationMat3x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x3 array" );
}

macro CreateFunctionDeclarationMat3x3Array()
[Category="Create Commands", Guid="{EEA1DA0D-1BE8-4E35-8028-5B4B2A4B3C5F}", Image=".\\icons\\new_matrix3x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 3, 3, 4 );
}

function void CreateFunctionDeclarationMat3x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat3x4 array" );
}

macro CreateFunctionDeclarationMat3x4Array()
[Category="Create Commands", Guid="{53BD4ED3-B61C-40E1-95EC-9D080E25F407}", Image=".\\icons\\new_matrix3x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 3, 4, 4 );
}

function void CreateFunctionDeclarationMat4x2Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x2 array" );
}

macro CreateFunctionDeclarationMat4x2Array()
[Category="Create Commands", Guid="{EE2FF8E6-E7F3-4E70-88B0-B281F00BAD37}", Image=".\\icons\\new_matrix4x2_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 4, 2, 4 );
}

function void CreateFunctionDeclarationMat4x3Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x3 array" );
}

macro CreateFunctionDeclarationMat4x3Array()
[Category="Create Commands", Guid="{E7AD507D-3818-4F06-94F6-7F321647CDF0}", Image=".\\icons\\new_matrix4x3_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 4, 3, 4 );
}

function void CreateFunctionDeclarationMat4x4Array_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x4 array" );
}

macro CreateFunctionDeclarationMat4x4Array()
[Category="Create Commands", Guid="{F0BA333A-DEE7-4226-B8A9-7BC6EDC1859F}", Image=".\\icons\\new_matrix4x4_assignment_expression.bmp"]
{
   CreateMatrixArrayFunctionDeclaration( 4, 4, 4 );
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateUnaryIntegerExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   //CreateFunctionDeclaration_OnUpdate( commandInfo, "mat4x4" );
}

macro CreateUnaryIntegerExpression()
[Category="Create Commands", Guid="{CCEA4496-C9E6-4E2C-B1D0-197C711CA7E6}", Image=".\\icons\\new_integer_assignment_expression.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelGroup = (Group)a_oSelNode;
         IntegerExpressionNode a_oIntegerExpressionNode =
            new IntegerExpressionNode;
         a_oIntegerExpressionNode.Name = "++";
         Model.AddNode( a_oIntegerExpressionNode, a_oSelGroup, -1 );
      }
   }
}

////////////////////////////////////////////////////////////////////////////////
// macro
////////////////////////////////////////////////////////////////////////////////

function void CreateIntegerInitializationExpression_OnUpdate( CommandPresentationModuleInfo commandInfo )
{
   ValidateNodeCommandContext.TestContext( commandInfo, InitializationNode,
      "Creates an integer initialization expression for the loop" );
}

macro CreateIntegerInitializationExpression()
[Category="Create Commands", Guid="{AC76915E-38CB-4360-B753-4D5429A8751B}", Image=".\\icons\\new_integer_assignment_expression.bmp"]
{
   for( int i = 0; i < Model.GetSelectCount(); ++i )
   {
      Node a_oSelNode = (Node)Model.GetSelectedNode( i ).GetNode();
      if( a_oSelNode && a_oSelNode.IsDerived( Group ) )
      {
         Group a_oSelGroup = (Group)a_oSelNode;

         IntegerNode a_oIntegerNode = new IntegerNode;
         a_oIntegerNode.Name = "i";
         a_oIntegerNode.Variable = "i";

         BinaryOperatorNode a_oBinaryOperatorNode = new BinaryOperatorNode;
         a_oBinaryOperatorNode.Name = "Assign";
         a_oBinaryOperatorNode.LeftDataSource = a_oIntegerNode;

         a_oIntegerNode.OperatorDataSource = a_oBinaryOperatorNode;

         IntegerExpressionNode a_oIntegerExpressionNode =
            new IntegerExpressionNode;
         a_oIntegerExpressionNode.Name = "0";
         a_oIntegerExpressionNode.MakeRightExpression();
         a_oIntegerExpressionNode.OperatorDataSource = a_oBinaryOperatorNode;

         a_oBinaryOperatorNode.RightDataSource = a_oIntegerExpressionNode;

         Model.AddNode( a_oIntegerNode, a_oSelGroup, -1 );
         Model.AddNode( a_oBinaryOperatorNode, a_oSelGroup, -1 );
         Model.AddNode( a_oIntegerExpressionNode, a_oSelGroup, -1 );
      }
   }
}
